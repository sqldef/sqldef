// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const POSIX_REGEX = 57428
const POSIX_REGEX_CI = 57429
const POSIX_NOT_REGEX = 57430
const POSIX_NOT_REGEX_CI = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const SCHEMA = 57449
const TABLE = 57450
const INDEX = 57451
const MATERIALIZED = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const PRIMARY = 57457
const COLUMN = 57458
const CONSTRAINT = 57459
const REFERENCES = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const FOREIGN = 57463
const KEY_BLOCK_SIZE = 57464
const POLICY = 57465
const WHILE = 57466
const UNIQUE = 57467
const KEY = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const TYPE = 57484
const VINDEX = 57485
const VINDEXES = 57486
const STATUS = 57487
const VARIABLES = 57488
const RESTRICT = 57489
const CASCADE = 57490
const NO = 57491
const ACTION = 57492
const PERMISSIVE = 57493
const RESTRICTIVE = 57494
const PUBLIC = 57495
const CURRENT_USER = 57496
const SESSION_USER = 57497
const PAD_INDEX = 57498
const FILLFACTOR = 57499
const IGNORE_DUP_KEY = 57500
const STATISTICS_NORECOMPUTE = 57501
const STATISTICS_INCREMENTAL = 57502
const ALLOW_ROW_LOCKS = 57503
const ALLOW_PAGE_LOCKS = 57504
const BEFORE = 57505
const AFTER = 57506
const EACH = 57507
const ROW = 57508
const SCROLL = 57509
const CURSOR = 57510
const OPEN = 57511
const CLOSE = 57512
const FETCH = 57513
const PRIOR = 57514
const FIRST = 57515
const LAST = 57516
const DEALLOCATE = 57517
const DEFERRABLE = 57518
const INITIALLY = 57519
const IMMEDIATE = 57520
const DEFERRED = 57521
const CONCURRENTLY = 57522
const BEGIN = 57523
const START = 57524
const TRANSACTION = 57525
const COMMIT = 57526
const ROLLBACK = 57527
const BIT = 57528
const TINYINT = 57529
const SMALLINT = 57530
const SMALLSERIAL = 57531
const MEDIUMINT = 57532
const INT = 57533
const INTEGER = 57534
const SERIAL = 57535
const BIGINT = 57536
const BIGSERIAL = 57537
const INTNUM = 57538
const REAL = 57539
const DOUBLE = 57540
const PRECISION = 57541
const FLOAT_TYPE = 57542
const DECIMAL = 57543
const NUMERIC = 57544
const SMALLMONEY = 57545
const MONEY = 57546
const TIME = 57547
const TIMESTAMP = 57548
const DATETIME = 57549
const YEAR = 57550
const DATETIMEOFFSET = 57551
const DATETIME2 = 57552
const SMALLDATETIME = 57553
const CHAR = 57554
const VARCHAR = 57555
const VARYING = 57556
const BOOL = 57557
const CHARACTER = 57558
const VARBINARY = 57559
const NCHAR = 57560
const NVARCHAR = 57561
const NTEXT = 57562
const UUID = 57563
const TEXT = 57564
const TINYTEXT = 57565
const MEDIUMTEXT = 57566
const LONGTEXT = 57567
const CITEXT = 57568
const BLOB = 57569
const TINYBLOB = 57570
const MEDIUMBLOB = 57571
const LONGBLOB = 57572
const JSON = 57573
const JSONB = 57574
const ENUM = 57575
const GEOMETRY = 57576
const POINT = 57577
const LINESTRING = 57578
const POLYGON = 57579
const GEOMETRYCOLLECTION = 57580
const MULTIPOINT = 57581
const MULTILINESTRING = 57582
const MULTIPOLYGON = 57583
const VARIADIC = 57584
const ARRAY = 57585
const NOW = 57586
const GETDATE = 57587
const BPCHAR = 57588
const TEXT_PATTERN_OPS = 57589
const NULLX = 57590
const AUTO_INCREMENT = 57591
const APPROXNUM = 57592
const SIGNED = 57593
const UNSIGNED = 57594
const ZEROFILL = 57595
const ZONE = 57596
const AUTOINCREMENT = 57597
const DATABASES = 57598
const TABLES = 57599
const VITESS_KEYSPACES = 57600
const VITESS_SHARDS = 57601
const VITESS_TABLETS = 57602
const VSCHEMA_TABLES = 57603
const EXTENDED = 57604
const FULL = 57605
const PROCESSLIST = 57606
const NAMES = 57607
const CHARSET = 57608
const GLOBAL = 57609
const SESSION = 57610
const ISOLATION = 57611
const LEVEL = 57612
const READ = 57613
const WRITE = 57614
const ONLY = 57615
const REPEATABLE = 57616
const COMMITTED = 57617
const UNCOMMITTED = 57618
const SERIALIZABLE = 57619
const NEW = 57620
const CURRENT_TIMESTAMP = 57621
const DATABASE = 57622
const CURRENT_DATE = 57623
const CURRENT_TIME = 57624
const LOCALTIME = 57625
const LOCALTIMESTAMP = 57626
const UTC_DATE = 57627
const UTC_TIME = 57628
const UTC_TIMESTAMP = 57629
const REPLACE = 57630
const CONVERT = 57631
const CAST = 57632
const SUBSTR = 57633
const SUBSTRING = 57634
const GROUP_CONCAT = 57635
const SEPARATOR = 57636
const INHERIT = 57637
const MATCH = 57638
const AGAINST = 57639
const BOOLEAN = 57640
const LANGUAGE = 57641
const WITH = 57642
const WITHOUT = 57643
const PARSER = 57644
const QUERY = 57645
const EXPANSION = 57646
const UNUSED = 57647
const VIRTUAL = 57648
const STORED = 57649
const GENERATED = 57650
const ALWAYS = 57651
const IDENTITY = 57652
const SEQUENCE = 57653
const INCREMENT = 57654
const MINVALUE = 57655
const CACHE = 57656
const CYCLE = 57657
const OWNED = 57658
const NONE = 57659
const CLUSTERED = 57660
const NONCLUSTERED = 57661
const REPLICATION = 57662
const INCLUDE = 57663
const HOLDLOCK = 57664
const NOLOCK = 57665
const NOWAIT = 57666
const PAGLOCK = 57667
const ROWLOCK = 57668
const TABLELOCK = 57669
const TYPECAST = 57670
const CHECK = 57671

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	128, 153,
	-2, 143,
	-1, 36,
	162, 487,
	163, 487,
	-2, 477,
	-1, 276,
	115, 845,
	-2, 841,
	-1, 277,
	115, 846,
	-2, 842,
	-1, 278,
	115, 847,
	-2, 238,
	-1, 319,
	260, 856,
	-2, 739,
	-1, 351,
	82, 1071,
	-2, 82,
	-1, 352,
	82, 1021,
	-2, 83,
	-1, 358,
	82, 1000,
	-2, 812,
	-1, 360,
	82, 1045,
	-2, 814,
	-1, 616,
	260, 856,
	-2, 515,
	-1, 665,
	260, 856,
	-2, 515,
	-1, 694,
	53, 41,
	55, 41,
	-2, 43,
	-1, 726,
	112, 995,
	243, 995,
	249, 995,
	-2, 274,
	-1, 727,
	112, 996,
	243, 996,
	249, 996,
	-2, 275,
	-1, 728,
	243, 998,
	249, 998,
	-2, 309,
	-1, 729,
	243, 999,
	249, 999,
	-2, 309,
	-1, 730,
	243, 1098,
	249, 1098,
	-2, 309,
	-1, 731,
	243, 1046,
	249, 1046,
	-2, 309,
	-1, 732,
	243, 1051,
	249, 1051,
	-2, 309,
	-1, 733,
	112, 1049,
	243, 1049,
	249, 1049,
	-2, 281,
	-1, 735,
	112, 1097,
	243, 1097,
	249, 1097,
	-2, 309,
	-1, 736,
	243, 1083,
	249, 1083,
	-2, 326,
	-1, 737,
	243, 1089,
	249, 1089,
	-2, 326,
	-1, 738,
	243, 1039,
	249, 1039,
	-2, 326,
	-1, 739,
	243, 1035,
	249, 1035,
	-2, 326,
	-1, 741,
	112, 994,
	243, 994,
	249, 994,
	-2, 290,
	-1, 742,
	112, 1087,
	243, 1087,
	249, 1087,
	-2, 291,
	-1, 743,
	112, 1037,
	243, 1037,
	249, 1037,
	-2, 292,
	-1, 744,
	112, 1034,
	243, 1034,
	249, 1034,
	-2, 293,
	-1, 745,
	112, 1026,
	243, 1026,
	249, 1026,
	-2, 294,
	-1, 747,
	112, 1096,
	243, 1096,
	249, 1096,
	-2, 296,
	-1, 750,
	112, 1007,
	243, 1007,
	249, 1007,
	-2, 266,
	-1, 751,
	112, 1085,
	243, 1085,
	249, 1085,
	-2, 309,
	-1, 752,
	112, 1086,
	243, 1086,
	249, 1086,
	-2, 309,
	-1, 753,
	112, 1008,
	243, 1008,
	249, 1008,
	-2, 309,
	-1, 754,
	112, 1009,
	243, 1009,
	249, 1009,
	-2, 270,
	-1, 755,
	112, 1010,
	243, 1010,
	249, 1010,
	-2, 309,
	-1, 756,
	112, 1076,
	243, 1076,
	249, 1076,
	-2, 272,
	-1, 757,
	112, 1110,
	243, 1110,
	249, 1110,
	-2, 273,
	-1, 758,
	112, 1018,
	243, 1018,
	249, 1018,
	-2, 299,
	-1, 759,
	112, 1055,
	243, 1055,
	249, 1055,
	-2, 300,
	-1, 760,
	112, 1033,
	243, 1033,
	249, 1033,
	-2, 301,
	-1, 761,
	112, 1056,
	243, 1056,
	249, 1056,
	-2, 302,
	-1, 762,
	112, 1019,
	243, 1019,
	249, 1019,
	-2, 303,
	-1, 763,
	112, 1043,
	243, 1043,
	249, 1043,
	-2, 304,
	-1, 764,
	112, 1042,
	243, 1042,
	249, 1042,
	-2, 305,
	-1, 765,
	112, 1044,
	243, 1044,
	249, 1044,
	-2, 306,
	-1, 766,
	112, 993,
	243, 993,
	249, 993,
	-2, 248,
	-1, 767,
	112, 1088,
	243, 1088,
	249, 1088,
	-2, 249,
	-1, 768,
	112, 1077,
	243, 1077,
	249, 1077,
	-2, 250,
	-1, 769,
	112, 1079,
	243, 1079,
	249, 1079,
	-2, 251,
	-1, 770,
	112, 1038,
	243, 1038,
	249, 1038,
	-2, 252,
	-1, 771,
	112, 1023,
	243, 1023,
	249, 1023,
	-2, 253,
	-1, 772,
	112, 1024,
	243, 1024,
	249, 1024,
	-2, 254,
	-1, 773,
	112, 1072,
	243, 1072,
	249, 1072,
	-2, 255,
	-1, 774,
	112, 991,
	243, 991,
	249, 991,
	-2, 256,
	-1, 775,
	112, 992,
	243, 992,
	249, 992,
	-2, 257,
	-1, 776,
	112, 1063,
	243, 1063,
	249, 1063,
	-2, 311,
	-1, 777,
	112, 1012,
	243, 1012,
	249, 1012,
	-2, 311,
	-1, 778,
	112, 1016,
	243, 1016,
	249, 1016,
	-2, 311,
	-1, 779,
	112, 1011,
	243, 1011,
	249, 1011,
	-2, 313,
	-1, 780,
	112, 1050,
	243, 1050,
	249, 1050,
	-2, 313,
	-1, 781,
	112, 1041,
	243, 1041,
	249, 1041,
	-2, 264,
	-1, 782,
	112, 1078,
	243, 1078,
	249, 1078,
	-2, 265,
	-1, 858,
	115, 849,
	-2, 844,
	-1, 995,
	138, 394,
	-2, 1005,
	-1, 1116,
	260, 856,
	-2, 515,
	-1, 1138,
	5, 28,
	-2, 636,
	-1, 1164,
	5, 27,
	-2, 785,
	-1, 1211,
	57, 367,
	-2, 364,
	-1, 1228,
	115, 847,
	-2, 238,
	-1, 1456,
	5, 27,
	-2, 90,
	-1, 1457,
	5, 27,
	-2, 91,
	-1, 1516,
	5, 28,
	-2, 786,
	-1, 1623,
	5, 27,
	-2, 788,
	-1, 1700,
	56, 102,
	-2, 172,
	-1, 1703,
	56, 102,
	-2, 172,
	-1, 1771,
	185, 54,
	-2, 172,
	-1, 1787,
	56, 102,
	-2, 171,
	-1, 1807,
	5, 28,
	-2, 789,
	-1, 1962,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 20617

var yyAct = [...]int16{
	362, 542, 1678, 21, 1914, 1797, 1728, 717, 1638, 1061,
	1681, 1772, 1522, 1200, 1751, 1761, 1588, 619, 3, 1167,
	1915, 787, 1549, 1635, 946, 620, 1786, 272, 1526, 716,
	1587, 1180, 1371, 293, 492, 92, 255, 1203, 92, 1401,
	834, 964, 529, 53, 1276, 309, 1372, 688, 1368, 1053,
	1539, 249, 1131, 990, 281, 686, 1814, 1226, 1070, 259,
	277, 282, 92, 92, 1069, 254, 601, 1232, 947, 1343,
	1005, 1185, 357, 916, 883, 92, 911, 66, 1121, 1036,
	1127, 92, 1000, 92, 1261, 793, 860, 1172, 704, 92,
	350, 1048, 934, 1704, 703, 250, 251, 252, 253, 943,
	690, 540, 1103, 548, 554, 675, 353, 280, 724, 264,
	1245, 718, 719, 643, 562, 347, 498, 336, 261, 910,
	48, 26, 27, 1941, 1339, 1527, 1528, 1529, 1530, 1531,
	1532, 337, 1692, 268, 914, 1023, 338, 1019, 1408, 52,
	1907, 602, 1428, 28, 570, 345, 573, 1762, 493, 494,
	1224, 1555, 588, 589, 590, 591, 592, 593, 594, 489,
	571, 572, 569, 595, 596, 597, 598, 575, 574, 584,
	585, 577, 578, 579, 580, 581, 582, 583, 576, 1414,
	1415, 586, 576, 1563, 1975, 586, 586, 1968, 500, 1832,
	1833, 1879, 1805, 505, 1953, 1733, 274, 1732, 1891, 1719,
	1128, 1129, 1019, 1020, 575, 574, 584, 585, 577, 578,
	579, 580, 581, 582, 583, 576, 1062, 1850, 586, 1506,
	541, 1181, 1124, 1022, 1878, 1008, 1804, 1363, 92, 1829,
	1510, 506, 1394, 87, 83, 84, 984, 85, 705, 1015,
	706, 1003, 977, 1698, 537, 1898, 1489, 1004, 1488, 1419,
	1487, 285, 1247, 1697, 1395, 1396, 615, 277, 277, 978,
	979, 575, 574, 584, 585, 577, 578, 579, 580, 581,
	582, 583, 576, 1193, 277, 586, 1192, 1507, 551, 1194,
	1025, 1612, 541, 1237, 1676, 1239, 1238, 277, 277, 277,
	277, 277, 277, 277, 825, 1027, 1503, 1037, 1693, 1694,
	1696, 826, 550, 1126, 1695, 1011, 1337, 1006, 1016, 938,
	1336, 277, 1335, 341, 1499, 1013, 1012, 1049, 1027, 1497,
	277, 248, 1973, 575, 574, 584, 585, 577, 578, 579,
	580, 581, 582, 583, 576, 1869, 92, 586, 1950, 1966,
	1965, 1949, 1920, 92, 92, 92, 1912, 1680, 1777, 1767,
	1654, 1504, 1409, 1752, 795, 575, 574, 584, 585, 577,
	578, 579, 580, 581, 582, 583, 576, 298, 1967, 586,
	1834, 1951, 493, 494, 575, 574, 584, 585, 577, 578,
	579, 580, 581, 582, 583, 576, 1798, 794, 586, 1462,
	1463, 353, 1315, 575, 574, 584, 585, 577, 578, 579,
	580, 581, 582, 583, 576, 944, 86, 586, 579, 580,
	581, 582, 583, 576, 1312, 587, 586, 49, 1338, 587,
	587, 634, 57, 1897, 1720, 1899, 1799, 795, 533, 534,
	1552, 356, 1620, 490, 1557, 1556, 1469, 497, 648, 1009,
	501, 502, 649, 1332, 1218, 1010, 1001, 59, 60, 61,
	62, 63, 587, 1470, 1417, 1890, 1564, 1037, 1217, 1946,
	1223, 1919, 1733, 1002, 701, 1205, 1838, 575, 574, 584,
	585, 577, 578, 579, 580, 581, 582, 583, 576, 1050,
	1840, 586, 1605, 607, 608, 609, 610, 611, 612, 613,
	695, 522, 1803, 1407, 1547, 1030, 1928, 1479, 1017, 1710,
	1018, 1778, 1779, 1780, 1972, 1547, 92, 499, 92, 587,
	511, 92, 81, 1835, 92, 796, 797, 1313, 92, 1014,
	1311, 783, 577, 578, 579, 580, 581, 582, 583, 576,
	1594, 603, 586, 80, 1314, 81, 965, 967, 804, 92,
	496, 495, 575, 574, 584, 585, 577, 578, 579, 580,
	581, 582, 583, 576, 1184, 1183, 586, 1182, 92, 524,
	277, 277, 526, 1550, 1551, 1553, 1210, 277, 1208, 277,
	784, 587, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 837, 796, 797,
	813, 523, 525, 1122, 341, 507, 504, 227, 82, 356,
	356, 356, 356, 587, 356, 1316, 605, 606, 1957, 857,
	1724, 356, 785, 786, 1145, 861, 966, 277, 1519, 1436,
	811, 799, 587, 277, 277, 277, 277, 277, 277, 277,
	277, 1324, 1149, 1115, 277, 1211, 832, 1001, 564, 858,
	921, 587, 913, 1836, 1837, 1839, 1841, 1842, 708, 618,
	587, 566, 1002, 838, 1002, 517, 986, 985, 1144, 1098,
	829, 917, 839, 1444, 559, 277, 277, 277, 277, 856,
	92, 561, 277, 92, 92, 92, 92, 92, 854, 1320,
	561, 1744, 1743, 1742, 552, 92, 1741, 1740, 92, 926,
	928, 1739, 92, 1738, 1736, 936, 889, 92, 92, 886,
	649, 888, 1459, 901, 1195, 921, 1170, 707, 277, 1963,
	867, 560, 559, 905, 908, 587, 356, 1961, 1445, 605,
	606, 918, 920, 710, 865, 866, 864, 1365, 561, 1964,
	935, 521, 527, 948, 935, 932, 1154, 937, 1202, 1656,
	1099, 1652, 940, 353, 636, 637, 638, 639, 640, 641,
	642, 983, 972, 790, 850, 852, 853, 1319, 922, 923,
	851, 1202, 1201, 1202, 931, 859, 587, 1653, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 556, 1202, 1931, 92, 92, 963, 961,
	587, 974, 969, 92, 970, 92, 510, 975, 1892, 939,
	92, 941, 942, 92, 949, 92, 1075, 952, 92, 988,
	950, 951, 899, 953, 835, 836, 1815, 1038, 1039, 1040,
	1041, 862, 898, 1214, 927, 79, 50, 1142, 902, 1141,
	1055, 277, 277, 277, 277, 1816, 863, 903, 904, 1105,
	541, 1930, 1893, 831, 1737, 277, 560, 559, 560, 559,
	1575, 1896, 900, 1895, 1248, 1868, 560, 559, 723, 723,
	1894, 560, 559, 561, 1619, 561, 277, 277, 277, 1051,
	1052, 1817, 1213, 561, 1813, 857, 356, 1574, 561, 1754,
	830, 1248, 513, 514, 515, 1580, 335, 356, 356, 356,
	356, 356, 356, 356, 356, 560, 559, 560, 559, 560,
	559, 356, 356, 1248, 1666, 858, 1367, 1112, 1113, 1114,
	861, 1583, 561, 277, 561, 1582, 561, 1424, 1268, 1266,
	277, 841, 1244, 1132, 341, 341, 341, 341, 341, 1481,
	884, 564, 885, 277, 356, 50, 277, 1104, 1262, 341,
	617, 1220, 617, 1734, 1055, 1765, 1980, 541, 341, 1412,
	261, 1117, 48, 26, 27, 1544, 1952, 1627, 1938, 1544,
	1903, 1164, 1544, 1886, 1692, 530, 531, 532, 1411, 535,
	1765, 1885, 92, 907, 907, 28, 539, 1882, 1881, 1111,
	1410, 909, 1143, 1051, 1052, 1212, 356, 1874, 541, 1902,
	1187, 1196, 1189, 1544, 1871, 1848, 929, 1544, 1870, 1125,
	1064, 929, 584, 585, 577, 578, 579, 580, 581, 582,
	583, 576, 897, 1133, 586, 1135, 1785, 92, 1627, 1795,
	277, 1627, 1663, 1138, 1139, 1140, 1153, 1188, 1219, 810,
	1198, 560, 559, 1150, 1627, 541, 1630, 1629, 1156, 929,
	1177, 1157, 1158, 1159, 1160, 1146, 809, 1134, 561, 1627,
	1628, 1544, 1543, 1236, 1391, 541, 1518, 541, 92, 1451,
	1450, 1758, 1118, 1119, 1120, 1190, 791, 1151, 356, 1447,
	1448, 1447, 1446, 1757, 1234, 1698, 356, 1136, 541, 1756,
	1206, 1207, 1209, 490, 789, 1697, 519, 575, 574, 584,
	585, 577, 578, 579, 580, 581, 582, 583, 576, 92,
	92, 586, 919, 541, 1675, 1277, 512, 92, 1249, 1250,
	1671, 1252, 1253, 1254, 672, 541, 862, 277, 715, 714,
	698, 1670, 1667, 277, 277, 1264, 1265, 1576, 1263, 1284,
	1693, 1694, 1696, 78, 1566, 1601, 1695, 277, 1766, 1437,
	1765, 1369, 1267, 1168, 1168, 277, 277, 277, 277, 277,
	277, 1169, 1056, 919, 23, 277, 1285, 356, 1329, 356,
	1282, 1169, 699, 277, 697, 54, 723, 1281, 1327, 277,
	277, 277, 1280, 1857, 277, 1281, 356, 277, 23, 1162,
	1514, 1148, 1163, 1375, 23, 71, 76, 1370, 68, 971,
	671, 697, 1362, 1330, 672, 1364, 277, 1331, 1544, 1340,
	356, 72, 50, 77, 1168, 1136, 1622, 672, 1393, 1373,
	1342, 1379, 1136, 1356, 672, 1565, 1400, 1355, 1458, 73,
	74, 69, 858, 341, 948, 1147, 50, 50, 277, 1449,
	948, 1392, 50, 1585, 1584, 1969, 1341, 1380, 1378, 976,
	1399, 803, 1136, 700, 833, 261, 1876, 1413, 587, 49,
	1847, 1760, 814, 815, 816, 817, 818, 819, 820, 821,
	1759, 1236, 1748, 1747, 1707, 1706, 822, 823, 1677, 1665,
	92, 1606, 1603, 1255, 1435, 1257, 1258, 1259, 1260, 1027,
	1054, 92, 1234, 564, 1418, 1425, 1416, 1390, 1454, 1434,
	1432, 1456, 1457, 50, 1421, 1427, 1386, 1384, 1429, 1269,
	1270, 788, 1026, 1049, 1225, 677, 680, 681, 682, 678,
	92, 679, 683, 1199, 1043, 1173, 1174, 1173, 1174, 1333,
	1334, 277, 1042, 677, 680, 681, 682, 678, 92, 679,
	683, 1440, 65, 277, 1729, 587, 1186, 1283, 1753, 1472,
	1465, 1357, 1358, 1359, 1360, 1361, 1483, 1466, 1474, 1586,
	1455, 1369, 1176, 807, 792, 356, 538, 845, 70, 958,
	956, 1179, 1477, 1204, 959, 957, 1178, 1329, 277, 960,
	1480, 681, 682, 955, 1215, 277, 954, 265, 266, 1925,
	1123, 1877, 1323, 1484, 75, 1100, 1923, 1241, 1110, 1292,
	1109, 92, 1490, 1256, 713, 520, 1423, 1512, 1495, 1913,
	1533, 1534, 1535, 555, 575, 574, 584, 585, 577, 578,
	579, 580, 581, 582, 583, 576, 1521, 553, 586, 1513,
	543, 277, 835, 836, 1066, 1607, 1272, 277, 1554, 1538,
	356, 1560, 1485, 544, 1562, 806, 1422, 1279, 1536, 1274,
	1273, 1540, 798, 685, 555, 1491, 262, 263, 1942, 1559,
	1600, 1461, 1406, 1108, 256, 277, 92, 1500, 1501, 1502,
	1236, 1107, 1505, 356, 1293, 1289, 1286, 1900, 1294, 1291,
	1290, 1713, 257, 54, 77, 1712, 1515, 1516, 1517, 1577,
	1520, 1234, 1610, 356, 1567, 1295, 1438, 1439, 1589, 1441,
	1442, 1443, 1288, 1169, 1865, 1864, 1596, 1863, 1597, 1598,
	1599, 1277, 1540, 1592, 277, 277, 1862, 277, 277, 277,
	1593, 1595, 1071, 1072, 1073, 1831, 1830, 356, 1405, 1404,
	1745, 557, 1065, 1746, 1067, 1721, 1579, 1216, 1581, 1486,
	929, 828, 1573, 1377, 1186, 1623, 929, 56, 1687, 8,
	58, 1096, 1287, 575, 574, 584, 585, 577, 578, 579,
	580, 581, 582, 583, 576, 1684, 7, 586, 1468, 277,
	1373, 1621, 1602, 1651, 277, 356, 696, 1402, 1655, 1685,
	6, 1683, 5, 1611, 51, 1, 1130, 614, 1634, 341,
	297, 1948, 1918, 283, 1649, 277, 1650, 92, 1525, 1858,
	1770, 1853, 1659, 1776, 1657, 1241, 1243, 1007, 1755, 1222,
	67, 1849, 1764, 1460, 1278, 1691, 343, 1296, 1063, 1275,
	1081, 1618, 1796, 1810, 1636, 1672, 1546, 993, 1589, 1708,
	987, 1197, 1682, 488, 64, 1735, 994, 992, 991, 989,
	1699, 1021, 1246, 1024, 722, 1631, 1632, 1633, 1453, 720,
	721, 89, 1723, 725, 235, 1730, 348, 684, 709, 558,
	1310, 1467, 587, 1309, 1471, 1722, 1473, 1077, 1318, 1726,
	824, 1097, 277, 1662, 536, 1475, 1727, 237, 1373, 346,
	599, 1106, 1191, 355, 1376, 547, 1711, 1578, 277, 1609,
	1152, 503, 631, 1478, 933, 1691, 284, 508, 849, 509,
	270, 296, 356, 295, 294, 516, 840, 1161, 277, 277,
	1613, 1614, 1768, 1615, 1616, 1617, 568, 340, 1763, 668,
	676, 1589, 674, 277, 277, 1714, 1715, 1716, 1717, 673,
	1175, 1171, 277, 1793, 1794, 1781, 1784, 339, 1788, 1789,
	1790, 1791, 1792, 783, 1326, 1769, 1509, 1718, 844, 1801,
	25, 1811, 55, 267, 19, 18, 1806, 17, 20, 16,
	1825, 15, 1523, 14, 29, 1523, 1523, 1523, 13, 1537,
	277, 12, 1749, 11, 1827, 1826, 356, 277, 1823, 1824,
	10, 1691, 9, 1690, 1843, 1689, 1688, 1845, 1686, 1859,
	4, 1846, 258, 948, 22, 1691, 2, 0, 1854, 1523,
	1844, 587, 0, 1589, 1241, 0, 1568, 1818, 1819, 1820,
	1821, 1822, 1866, 0, 356, 0, 1856, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1668, 1872, 1669, 0,
	1802, 0, 1590, 0, 0, 1807, 356, 356, 1317, 0,
	0, 0, 0, 0, 518, 0, 1604, 1883, 1884, 0,
	0, 0, 0, 1887, 0, 0, 0, 1608, 0, 0,
	0, 0, 1828, 1888, 1889, 0, 0, 0, 1909, 1691,
	1905, 310, 47, 1901, 1906, 0, 0, 0, 0, 1910,
	1904, 1691, 1691, 1691, 1917, 0, 1908, 0, 0, 1916,
	1922, 0, 1921, 0, 0, 0, 1625, 1626, 0, 1682,
	0, 1927, 0, 1924, 1782, 0, 0, 0, 1873, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 277, 47,
	1929, 1937, 1402, 0, 0, 0, 0, 260, 1691, 1859,
	1691, 1691, 1935, 342, 1658, 1934, 1939, 1936, 0, 92,
	546, 0, 0, 0, 0, 1945, 1956, 1768, 1945, 0,
	0, 1958, 670, 0, 0, 0, 0, 545, 549, 0,
	0, 694, 1590, 1673, 0, 0, 0, 0, 0, 1959,
	1962, 0, 1679, 1960, 567, 90, 0, 1971, 247, 0,
	0, 1700, 1976, 0, 1523, 277, 0, 1691, 1977, 0,
	0, 1691, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 90, 90, 0, 1725, 0, 0, 1945, 0,
	1970, 621, 0, 0, 0, 90, 0, 0, 0, 0,
	632, 90, 0, 90, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 1639, 1954, 0,
	0, 1028, 1029, 1031, 1032, 1033, 0, 1034, 1035, 0,
	1641, 0, 0, 0, 0, 1590, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 1045, 1046, 0, 1047, 0,
	1771, 1773, 1774, 1775, 0, 0, 0, 0, 1787, 1700,
	1700, 1787, 1700, 1700, 1402, 1402, 0, 0, 0, 0,
	1982, 1983, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 1808, 528, 528, 528, 528, 1809, 528, 0,
	0, 1812, 0, 0, 0, 528, 0, 0, 0, 0,
	0, 0, 800, 1640, 801, 1679, 1402, 805, 0, 0,
	808, 0, 47, 0, 0, 0, 0, 1590, 1402, 0,
	0, 0, 0, 1851, 0, 0, 0, 600, 0, 723,
	0, 604, 0, 0, 1861, 827, 0, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1087, 1787, 0, 0, 90, 0,
	616, 0, 0, 0, 846, 0, 1875, 0, 1086, 0,
	0, 1978, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 0, 633, 635, 635, 635, 635, 635, 635, 635,
	635, 0, 664, 665, 666, 667, 1091, 0, 1639, 0,
	0, 0, 0, 0, 687, 1085, 0, 0, 0, 0,
	0, 1641, 0, 0, 0, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1911, 574, 584, 585, 577,
	578, 579, 580, 581, 582, 583, 576, 0, 0, 586,
	0, 0, 0, 0, 1402, 0, 0, 644, 1926, 0,
	847, 848, 0, 0, 0, 0, 0, 0, 1082, 1079,
	1080, 0, 1078, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 90, 692, 90, 945, 0, 0, 723,
	0, 1943, 646, 0, 1640, 0, 0, 0, 0, 0,
	0, 1637, 1089, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 915, 0, 0,
	0, 0, 0, 621, 0, 0, 924, 925, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 356, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 0, 1679, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 0, 890,
	891, 0, 892, 893, 894, 896, 895, 0, 887, 647,
	0, 0, 1344, 0, 0, 0, 0, 662, 645, 0,
	528, 0, 1084, 651, 650, 0, 0, 0, 0, 0,
	0, 528, 528, 528, 528, 528, 528, 528, 528, 0,
	0, 0, 1059, 1060, 0, 528, 528, 1346, 982, 1068,
	0, 1074, 0, 0, 0, 1083, 1076, 0, 0, 1093,
	0, 1094, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 90, 0,
	0, 90, 0, 0, 90, 1088, 0, 0, 812, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 1731, 0, 0, 0, 47, 0, 1348, 90,
	0, 0, 1353, 587, 1347, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 622, 1351, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 1303, 812, 1349, 1350,
	0, 0, 1305, 1298, 1299, 0, 1306, 1301, 1300, 0,
	0, 0, 1308, 1304, 0, 0, 0, 0, 1352, 1354,
	0, 1101, 1102, 1307, 549, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 342, 342, 342, 342, 342, 0,
	1431, 1433, 0, 0, 0, 644, 0, 271, 0, 687,
	0, 968, 0, 0, 271, 271, 0, 0, 342, 930,
	271, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 0, 48, 26, 27, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 1692, 0,
	0, 0, 0, 0, 0, 271, 271, 271, 271, 28,
	90, 0, 930, 90, 90, 90, 90, 90, 0, 0,
	1137, 0, 0, 0, 0, 962, 0, 0, 90, 0,
	0, 0, 692, 1221, 0, 0, 1155, 90, 90, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 0, 1492, 1493, 1981,
	1494, 528, 0, 528, 1496, 0, 1498, 647, 0, 0,
	0, 0, 0, 0, 1271, 662, 645, 0, 0, 0,
	528, 651, 650, 0, 0, 0, 23, 24, 48, 26,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 0, 0, 1698,
	0, 28, 0, 0, 0, 1545, 1548, 0, 0, 1697,
	0, 0, 0, 1325, 0, 0, 90, 90, 0, 1116,
	37, 0, 0, 90, 50, 90, 0, 0, 0, 0,
	90, 0, 0, 90, 0, 90, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 0, 1693, 1694, 1696, 0, 0, 0,
	1695, 0, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 261,
	0, 48, 26, 27, 0, 0, 0, 0, 30, 31,
	33, 32, 35, 1692, 0, 0, 0, 0, 0, 261,
	0, 48, 26, 27, 28, 1165, 1166, 0, 0, 0,
	0, 0, 0, 1692, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 261, 28, 48, 26, 27, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 1692, 0, 0,
	0, 0, 0, 271, 0, 1366, 0, 0, 28, 0,
	0, 0, 0, 0, 1947, 0, 0, 0, 0, 0,
	1381, 1382, 0, 271, 1383, 0, 0, 1385, 38, 39,
	0, 40, 41, 49, 1944, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1397, 1464, 0, 0,
	0, 0, 0, 1545, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 261, 1698, 48, 26, 27, 233, 0,
	0, 0, 0, 0, 1697, 0, 1476, 1692, 0, 0,
	0, 0, 0, 0, 1698, 0, 0, 0, 28, 0,
	0, 0, 243, 0, 1697, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 1698, 0,
	1242, 0, 0, 0, 0, 0, 0, 528, 1697, 1693,
	1694, 1696, 0, 0, 0, 1695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 1693,
	1694, 1696, 0, 0, 0, 1695, 0, 228, 90, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	236, 232, 0, 1693, 1694, 1696, 0, 0, 0, 1695,
	0, 1482, 0, 0, 0, 1867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1374, 0, 47, 1698, 1321,
	1322, 0, 234, 0, 0, 0, 238, 90, 1697, 0,
	0, 0, 0, 0, 1387, 1388, 1389, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 0, 1591, 0, 0, 621, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	812, 1420, 0, 1693, 1694, 1696, 0, 0, 0, 1695,
	0, 0, 0, 930, 0, 1855, 0, 1430, 49, 930,
	0, 0, 0, 616, 0, 0, 0, 0, 229, 0,
	0, 1561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	239, 240, 241, 242, 246, 0, 0, 0, 1242, 245,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 1674, 0, 0, 0, 0, 0, 0,
	90, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 1660,
	0, 0, 0, 0, 1664, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1750, 0, 0, 0, 0, 1242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1374, 0, 0, 1624,
	0, 0, 0, 0, 0, 1242, 90, 0, 0, 1783,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1800, 621, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1661, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 0, 0, 0, 0, 1852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1709,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1374, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1242, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 463,
	0, 424, 476, 394, 412, 484, 414, 415, 450, 374,
	433, 159, 409, 392, 96, 397, 367, 404, 368, 395,
	426, 120, 393, 0, 465, 436, 134, 482, 137, 441,
	0, 181, 147, 0, 0, 428, 467, 431, 458, 423,
	451, 382, 440, 477, 410, 446, 478, 0, 0, 0,
	361, 0, 1541, 1542, 47, 0, 0, 0, 0, 109,
	0, 445, 472, 406, 487, 449, 366, 443, 0, 372,
	375, 483, 470, 401, 402, 0, 0, 0, 0, 1974,
	0, 1933, 427, 432, 455, 420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	439, 0, 0, 0, 379, 373, 0, 425, 0, 90,
	0, 381, 0, 399, 456, 0, 363, 461, 468, 422,
	143, 208, 471, 419, 418, 166, 0, 112, 0, 187,
	124, 411, 135, 453, 485, 475, 429, 466, 396, 405,
	114, 403, 173, 160, 199, 438, 161, 171, 138, 191,
	167, 198, 473, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 371, 364, 400, 459, 462, 386, 448,
	376, 407, 454, 408, 430, 391, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 369,
	0, 182, 201, 218, 219, 370, 390, 469, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 447, 174, 111, 200, 180, 0, 385,
	389, 383, 384, 434, 435, 479, 480, 481, 457, 380,
	0, 387, 388, 0, 464, 129, 437, 95, 103, 136,
	486, 215, 0, 168, 122, 202, 0, 0, 413, 365,
	417, 0, 0, 0, 0, 0, 0, 0, 377, 378,
	175, 421, 416, 442, 444, 452, 460, 474, 463, 108,
	424, 476, 394, 412, 484, 414, 415, 450, 374, 433,
	159, 409, 392, 96, 397, 367, 404, 368, 395, 426,
	120, 393, 0, 465, 436, 134, 482, 137, 441, 0,
	181, 147, 0, 0, 428, 467, 431, 458, 423, 451,
	382, 440, 477, 410, 446, 478, 0, 0, 0, 276,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	445, 472, 406, 487, 449, 366, 443, 0, 372, 375,
	483, 470, 401, 402, 0, 0, 0, 0, 0, 0,
	0, 427, 432, 455, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 0, 398, 0, 439,
	0, 0, 0, 379, 373, 0, 425, 0, 0, 0,
	381, 0, 399, 456, 0, 363, 461, 468, 422, 143,
	208, 471, 419, 418, 166, 0, 112, 0, 187, 124,
	411, 135, 453, 485, 475, 429, 466, 396, 405, 114,
	403, 173, 160, 199, 438, 161, 171, 138, 191, 167,
	198, 473, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 371, 364, 400, 459, 462, 386, 448, 376,
	407, 454, 408, 430, 391, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 369, 0,
	182, 201, 218, 219, 370, 390, 469, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 447, 174, 111, 200, 180, 0, 385, 389,
	383, 384, 434, 435, 479, 480, 481, 457, 380, 0,
	387, 388, 0, 464, 129, 437, 95, 103, 136, 486,
	215, 0, 168, 122, 202, 0, 0, 413, 365, 417,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 175,
	421, 416, 442, 444, 452, 460, 474, 463, 108, 424,
	476, 394, 412, 484, 414, 415, 450, 374, 433, 159,
	409, 392, 96, 397, 367, 404, 368, 395, 426, 120,
	393, 0, 465, 436, 134, 482, 137, 441, 0, 181,
	147, 0, 0, 428, 467, 431, 458, 423, 451, 382,
	440, 477, 410, 446, 478, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 445,
	472, 406, 487, 449, 366, 443, 0, 372, 375, 483,
	470, 401, 402, 1398, 0, 0, 0, 0, 0, 0,
	427, 432, 455, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 398, 0, 439, 0,
	0, 0, 379, 373, 0, 425, 0, 0, 0, 381,
	0, 399, 456, 0, 363, 461, 468, 422, 143, 208,
	471, 419, 418, 166, 0, 112, 0, 187, 124, 411,
	135, 453, 485, 475, 429, 466, 396, 405, 114, 403,
	173, 160, 199, 438, 161, 171, 138, 191, 167, 198,
	473, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 371, 364, 400, 459, 462, 386, 448, 376, 407,
	454, 408, 430, 391, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 369, 0, 182,
	201, 218, 219, 370, 390, 469, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 447, 174, 111, 200, 180, 0, 385, 389, 383,
	384, 434, 435, 479, 480, 481, 457, 380, 0, 387,
	388, 0, 464, 129, 437, 95, 103, 136, 486, 215,
	0, 168, 122, 202, 0, 0, 413, 365, 417, 0,
	0, 0, 0, 0, 0, 0, 377, 378, 175, 421,
	416, 442, 444, 452, 460, 474, 463, 108, 424, 476,
	394, 412, 484, 414, 415, 450, 374, 433, 159, 409,
	392, 96, 397, 367, 404, 368, 395, 426, 120, 393,
	0, 465, 436, 134, 482, 137, 441, 0, 181, 147,
	0, 0, 428, 467, 431, 458, 423, 451, 382, 440,
	477, 410, 446, 478, 0, 0, 0, 276, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 445, 472,
	406, 487, 449, 366, 443, 0, 372, 375, 483, 470,
	401, 402, 0, 0, 0, 0, 0, 0, 0, 427,
	432, 455, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 439, 0, 0,
	0, 379, 373, 0, 425, 0, 0, 0, 381, 0,
	399, 456, 0, 363, 461, 468, 422, 143, 208, 471,
	419, 418, 166, 0, 112, 0, 187, 124, 411, 135,
	453, 485, 475, 429, 466, 396, 405, 114, 403, 173,
	160, 199, 438, 161, 171, 138, 191, 167, 198, 473,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	371, 364, 400, 459, 462, 386, 448, 376, 407, 454,
	408, 430, 391, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 369, 0, 182, 201,
	218, 219, 370, 390, 469, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	447, 174, 111, 200, 180, 0, 385, 389, 383, 384,
	434, 435, 479, 480, 481, 457, 380, 0, 387, 388,
	0, 464, 129, 437, 95, 103, 136, 486, 215, 0,
	168, 122, 202, 0, 0, 413, 365, 417, 0, 0,
	0, 0, 0, 0, 0, 377, 378, 175, 421, 416,
	442, 444, 452, 460, 474, 463, 108, 424, 476, 394,
	412, 484, 414, 415, 450, 374, 433, 159, 409, 392,
	96, 397, 367, 404, 368, 395, 426, 120, 393, 0,
	465, 436, 134, 482, 137, 441, 0, 181, 147, 0,
	0, 428, 467, 431, 458, 423, 451, 382, 440, 477,
	410, 446, 478, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 445, 472, 406,
	487, 449, 366, 443, 0, 372, 375, 483, 470, 401,
	402, 0, 0, 0, 0, 0, 0, 0, 427, 432,
	455, 420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 398, 0, 439, 0, 0, 0,
	379, 373, 0, 425, 0, 0, 0, 381, 0, 399,
	456, 0, 363, 461, 468, 422, 143, 208, 471, 419,
	418, 166, 0, 112, 0, 187, 124, 411, 135, 453,
	485, 475, 429, 466, 396, 405, 114, 403, 173, 160,
	199, 438, 161, 171, 138, 191, 167, 198, 473, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 371,
	364, 400, 459, 462, 386, 448, 376, 407, 454, 408,
	430, 391, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 369, 0, 182, 201, 218,
	219, 370, 390, 469, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 447,
	174, 111, 200, 180, 0, 385, 389, 383, 384, 434,
	435, 479, 480, 481, 457, 380, 0, 387, 388, 0,
	464, 129, 437, 95, 103, 136, 486, 215, 0, 168,
	122, 202, 0, 0, 413, 365, 417, 0, 0, 0,
	0, 0, 0, 0, 377, 378, 175, 421, 416, 442,
	444, 452, 460, 474, 463, 108, 424, 476, 394, 412,
	484, 414, 415, 450, 374, 433, 159, 409, 392, 96,
	397, 367, 404, 368, 395, 426, 120, 393, 0, 465,
	436, 134, 482, 137, 441, 0, 181, 147, 0, 0,
	428, 467, 431, 458, 423, 451, 382, 440, 477, 410,
	446, 478, 50, 0, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 445, 472, 406, 487,
	449, 366, 443, 0, 372, 375, 483, 470, 401, 402,
	0, 0, 0, 0, 0, 0, 0, 427, 432, 455,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 398, 0, 439, 0, 0, 0, 379,
	373, 0, 425, 0, 0, 0, 381, 0, 399, 456,
	0, 363, 461, 468, 422, 143, 208, 471, 419, 418,
	166, 0, 112, 0, 187, 124, 411, 135, 453, 485,
	475, 429, 466, 396, 405, 114, 403, 173, 160, 199,
	438, 161, 171, 138, 191, 167, 198, 473, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 371, 364,
	400, 459, 462, 386, 448, 376, 407, 454, 408, 430,
	391, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 369, 0, 182, 201, 218, 219,
	370, 390, 469, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 447, 174,
	111, 200, 180, 0, 385, 389, 383, 384, 434, 435,
	479, 480, 481, 457, 380, 0, 387, 388, 0, 464,
	129, 437, 95, 103, 136, 486, 215, 0, 168, 122,
	202, 0, 0, 413, 365, 417, 0, 0, 0, 0,
	0, 0, 0, 377, 378, 175, 421, 416, 442, 444,
	452, 460, 474, 463, 108, 424, 476, 394, 412, 484,
	414, 415, 450, 374, 433, 159, 409, 392, 96, 397,
	367, 404, 368, 395, 426, 120, 393, 0, 465, 436,
	134, 482, 137, 441, 0, 181, 147, 0, 0, 428,
	467, 431, 458, 423, 451, 382, 440, 477, 410, 446,
	478, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 445, 472, 406, 487, 449,
	366, 443, 0, 372, 375, 483, 470, 401, 402, 0,
	0, 0, 0, 0, 0, 0, 427, 432, 455, 420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 0, 439, 0, 0, 0, 379, 373,
	0, 425, 0, 0, 0, 381, 0, 399, 456, 0,
	363, 461, 468, 422, 143, 208, 471, 419, 418, 166,
	0, 112, 0, 187, 124, 411, 135, 453, 485, 475,
	429, 466, 396, 405, 114, 403, 173, 160, 199, 438,
	161, 171, 138, 191, 167, 198, 473, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 371, 364, 400,
	459, 462, 386, 448, 376, 407, 454, 408, 430, 391,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	359, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 369, 0, 182, 201, 218, 219, 370,
	390, 469, 211, 212, 213, 214, 0, 0, 0, 360,
	358, 128, 178, 132, 139, 169, 216, 447, 174, 111,
	200, 180, 354, 385, 389, 383, 384, 434, 435, 479,
	480, 481, 457, 380, 0, 387, 388, 0, 464, 129,
	437, 95, 103, 136, 486, 215, 0, 168, 122, 202,
	0, 0, 413, 365, 417, 0, 0, 0, 0, 0,
	0, 0, 377, 378, 175, 421, 416, 442, 444, 452,
	460, 474, 463, 108, 424, 476, 394, 412, 484, 414,
	415, 450, 374, 433, 159, 409, 392, 96, 397, 367,
	404, 368, 395, 426, 120, 393, 0, 465, 436, 134,
	482, 137, 441, 0, 181, 147, 0, 0, 428, 467,
	431, 458, 423, 451, 382, 440, 477, 410, 446, 478,
	0, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 445, 472, 406, 487, 449, 366,
	443, 0, 372, 375, 483, 470, 401, 402, 0, 0,
	0, 0, 0, 0, 0, 427, 432, 455, 420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 0, 439, 0, 0, 0, 379, 373, 0,
	425, 0, 0, 0, 381, 0, 399, 456, 0, 363,
	461, 468, 422, 143, 208, 471, 419, 418, 166, 0,
	112, 0, 187, 124, 411, 135, 453, 485, 475, 429,
	466, 396, 405, 114, 403, 173, 160, 199, 438, 161,
	171, 138, 191, 167, 198, 473, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 371, 364, 400, 459,
	462, 386, 448, 376, 407, 454, 408, 430, 391, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 369, 0, 182, 201, 218, 219, 370, 390,
	469, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 447, 174, 111, 200,
	180, 0, 385, 389, 383, 384, 434, 435, 479, 480,
	481, 457, 380, 0, 387, 388, 0, 464, 129, 437,
	95, 103, 136, 486, 215, 0, 168, 122, 202, 0,
	0, 413, 365, 417, 0, 0, 0, 0, 0, 0,
	0, 377, 378, 175, 421, 416, 442, 444, 452, 460,
	474, 463, 108, 424, 476, 394, 412, 484, 414, 415,
	450, 374, 433, 159, 409, 392, 96, 397, 367, 404,
	368, 395, 426, 120, 393, 0, 465, 436, 134, 482,
	137, 441, 0, 181, 147, 0, 0, 428, 467, 431,
	458, 423, 451, 382, 440, 477, 410, 446, 478, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 445, 472, 406, 487, 449, 366, 443,
	0, 372, 375, 483, 470, 401, 402, 0, 0, 0,
	0, 0, 0, 0, 427, 432, 455, 420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 0, 439, 0, 0, 0, 379, 373, 0, 425,
	0, 0, 0, 381, 0, 399, 456, 0, 363, 461,
	468, 422, 143, 208, 471, 419, 418, 166, 0, 112,
	0, 187, 124, 411, 135, 453, 485, 475, 429, 466,
	396, 405, 114, 403, 173, 160, 199, 438, 161, 171,
	138, 191, 167, 198, 473, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 371, 364, 400, 459, 462,
	386, 448, 376, 407, 454, 408, 430, 391, 0, 0,
	0, 0, 0, 97, 188, 702, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 359, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 369, 0, 182, 201, 218, 219, 370, 390, 469,
	211, 212, 213, 214, 0, 0, 0, 360, 358, 128,
	178, 132, 139, 169, 216, 447, 174, 111, 200, 180,
	354, 385, 389, 383, 384, 434, 435, 479, 480, 481,
	457, 380, 0, 387, 388, 0, 464, 129, 437, 95,
	103, 136, 486, 215, 0, 168, 122, 202, 0, 0,
	413, 365, 417, 0, 0, 0, 0, 0, 0, 0,
	377, 378, 175, 421, 416, 442, 444, 452, 460, 474,
	463, 108, 424, 476, 394, 412, 484, 414, 415, 450,
	374, 433, 159, 409, 392, 96, 397, 367, 404, 368,
	395, 426, 120, 393, 0, 465, 436, 134, 482, 137,
	441, 0, 181, 147, 0, 0, 428, 467, 431, 458,
	423, 451, 382, 440, 477, 410, 446, 478, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 445, 472, 406, 487, 449, 366, 443, 0,
	372, 375, 483, 470, 401, 402, 0, 0, 0, 0,
	0, 0, 0, 427, 432, 455, 420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 439, 0, 0, 0, 379, 373, 0, 425, 0,
	0, 0, 381, 0, 399, 456, 0, 363, 461, 468,
	422, 143, 208, 471, 419, 418, 166, 0, 112, 0,
	187, 124, 411, 135, 453, 485, 475, 429, 466, 396,
	405, 114, 403, 173, 160, 199, 438, 161, 171, 138,
	191, 167, 198, 473, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 371, 364, 400, 459, 462, 386,
	448, 376, 407, 454, 408, 430, 391, 0, 0, 0,
	0, 0, 97, 188, 349, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 359, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	369, 0, 182, 201, 218, 219, 370, 390, 469, 211,
	212, 213, 214, 0, 0, 0, 360, 358, 352, 351,
	132, 139, 169, 216, 447, 174, 111, 200, 180, 354,
	385, 389, 383, 384, 434, 435, 479, 480, 481, 457,
	380, 0, 387, 388, 0, 464, 129, 437, 95, 103,
	136, 486, 215, 0, 168, 122, 202, 0, 0, 413,
	365, 417, 0, 0, 0, 0, 0, 0, 0, 377,
	378, 175, 421, 416, 442, 444, 452, 460, 474, 463,
	108, 424, 476, 394, 412, 484, 414, 415, 450, 374,
	433, 159, 409, 392, 96, 397, 367, 404, 368, 395,
	426, 120, 393, 0, 465, 436, 134, 482, 137, 441,
	0, 181, 147, 0, 0, 428, 467, 431, 458, 423,
	451, 382, 440, 477, 410, 446, 478, 0, 0, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 445, 472, 406, 487, 449, 366, 443, 0, 372,
	375, 483, 470, 401, 402, 0, 0, 0, 0, 0,
	0, 0, 427, 432, 455, 420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	439, 0, 0, 0, 379, 373, 0, 425, 0, 0,
	0, 381, 0, 399, 456, 0, 363, 461, 468, 422,
	143, 208, 471, 419, 418, 166, 0, 112, 0, 187,
	124, 411, 135, 453, 485, 475, 429, 466, 396, 405,
	114, 403, 173, 160, 199, 438, 161, 171, 138, 191,
	167, 198, 473, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 371, 364, 400, 459, 462, 386, 448,
	376, 407, 454, 408, 430, 391, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 369,
	0, 182, 201, 218, 219, 370, 390, 469, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 447, 174, 111, 200, 180, 0, 385,
	389, 383, 384, 434, 435, 479, 480, 481, 457, 380,
	0, 387, 388, 0, 464, 129, 437, 95, 103, 136,
	486, 215, 0, 168, 122, 202, 0, 0, 413, 365,
	417, 0, 0, 0, 0, 0, 0, 0, 377, 378,
	175, 421, 416, 442, 444, 452, 460, 159, 0, 108,
	96, 0, 0, 279, 0, 0, 0, 120, 275, 0,
	0, 0, 134, 320, 137, 0, 0, 181, 147, 0,
	0, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 980, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	981, 0, 0, 273, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 912, 0, 279, 0,
	0, 0, 120, 275, 0, 0, 175, 134, 320, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 311, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 276, 299, 278, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 306, 307, 0, 0, 0, 273, 291,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 269, 0, 0,
	0, 332, 0, 290, 0, 0, 286, 287, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 330, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 334, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 308,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	313, 314, 315, 316, 318, 0, 129, 317, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 279, 0, 0, 0, 120, 275, 0,
	0, 175, 134, 320, 137, 0, 0, 181, 147, 329,
	108, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 541, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 273, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 279, 0,
	0, 0, 120, 275, 0, 0, 175, 134, 320, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 311, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 276, 299, 278, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 306, 307, 0, 0, 0, 273, 291,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 269, 0, 0,
	0, 332, 0, 290, 0, 0, 286, 287, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 330, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 334, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 308,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	313, 314, 315, 316, 318, 23, 129, 317, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 279, 0, 0, 0, 120, 275, 0,
	0, 175, 134, 320, 137, 0, 0, 181, 147, 329,
	108, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 273, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 279, 0,
	0, 0, 120, 275, 0, 0, 175, 134, 320, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 311, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 276, 299, 278, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 306, 307, 0, 0, 0, 273, 291,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 0, 0, 0,
	0, 332, 0, 290, 0, 0, 286, 287, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 330, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 334, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 308,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	313, 314, 315, 316, 318, 0, 129, 317, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 320, 137, 0, 0, 181, 147, 329,
	108, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 0, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 1979, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 279, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 320, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 311, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 276, 299, 278, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 306, 307, 0, 0, 0, 0, 291,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 0, 0, 0,
	0, 332, 0, 290, 0, 0, 286, 287, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 330, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 334, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 308,
	321, 331, 327, 328, 325, 326, 324, 323, 322, 333,
	313, 314, 315, 316, 318, 0, 129, 317, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 320, 137, 0, 0, 181, 147, 329,
	108, 0, 0, 311, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 276, 299, 278, 301,
	302, 303, 304, 0, 0, 109, 300, 305, 306, 307,
	0, 0, 0, 0, 291, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 332, 0, 290, 0,
	0, 286, 287, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	330, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 334, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 308, 321, 331, 327, 328, 325,
	326, 324, 323, 322, 333, 313, 314, 315, 316, 318,
	0, 129, 317, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 329, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 276, 0, 1228, 1229, 1230, 0, 0, 0, 0,
	109, 1233, 1231, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 1235, 1240, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	1237, 0, 1239, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 276, 0, 1228, 1229,
	1230, 0, 0, 0, 0, 109, 1233, 1231, 306, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	1235, 1240, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 1237, 0, 1239, 1238, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 276, 0, 1228, 1229, 1230, 0, 0, 0, 0,
	109, 1233, 1231, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 1235, 1240, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	1237, 0, 1239, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	749, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1705, 0, 361, 0, 1703, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1701, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 0, 776, 777, 164, 778, 779, 780, 782,
	781, 751, 752, 753, 757, 755, 754, 756, 728, 730,
	206, 726, 729, 735, 731, 732, 733, 747, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 748,
	758, 759, 760, 761, 762, 763, 764, 765, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 727, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 299, 906, 301, 302, 303, 304, 0, 0,
	109, 300, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	749, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 1860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 0, 776, 777, 164, 778, 779, 780, 782,
	781, 751, 752, 753, 757, 755, 754, 756, 728, 730,
	206, 726, 729, 735, 731, 732, 733, 747, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 748,
	758, 759, 760, 761, 762, 763, 764, 765, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 727, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 563, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 565, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	749, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 0, 776, 777, 164, 778, 779, 780, 782,
	781, 751, 752, 753, 757, 755, 754, 756, 728, 730,
	206, 726, 729, 735, 731, 732, 733, 747, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 748,
	758, 759, 760, 761, 762, 763, 764, 765, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 727, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1705,
	0, 361, 0, 1703, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 491, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 143, 208, 0, 0,
	0, 996, 0, 995, 0, 997, 998, 0, 135, 0,
	0, 999, 1002, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 1570, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 1569, 204, 153,
	158, 156, 203, 1571, 196, 146, 142, 0, 101, 194,
	144, 141, 1572, 904, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 900, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 91, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 93, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 1932, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 1403, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 691, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 693, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 91, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 0, 842, 0, 0, 843, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 802,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 712, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 711, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 159, 0, 0,
	96, 0, 691, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 0, 137, 0, 0, 181, 147, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 693, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 689, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 669, 120, 0, 0, 0, 175, 134, 0, 137,
	0, 0, 181, 147, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 93, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 344, 215, 0, 168, 122, 202, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 0, 134, 0, 137, 0, 0, 181, 147,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 175, 134, 0,
	137, 0, 0, 181, 147, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 0, 137, 0, 0, 181, 147,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 175, 134, 0,
	137, 0, 0, 181, 147, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 1403, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 0, 137, 0, 0, 181, 147,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 1524, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 175, 134, 0,
	137, 0, 0, 181, 147, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 0, 137, 0, 0, 181, 147,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 693,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 175, 134, 0,
	137, 0, 0, 181, 147, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 0, 137, 0, 0, 181, 147,
	587, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 361, 0, 565,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 175, 134, 0,
	137, 0, 0, 181, 147, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 0, 491, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 0, 137, 0, 0, 181, 147,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 108,
}

var yyPact = [...]int16{
	2670, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1458, 1532, -1000, -1000, -1000, -1000, -1000, -1000, 1278,
	1061, 405, 473, 109, 17525, 472, 2875, 17830, -1000, 121,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1178, -1000, -1000,
	-1000, -1000, -1000, 1437, 1456, 1239, 1425, 1337, -1000, 8374,
	382, 14779, 17220, 6794, -1000, 19965, -187, 413, 412, 20270,
	376, 376, 20270, 20270, 17830, 471, 376, -1000, -74, 470,
	17830, -1000, 17830, 379, 1049, 379, 379, 379, 17830, -1000,
	540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17830, 1029, 1364,
	434, 5438, 5438, 5438, 5438, 266, 5438, -36, 1304, -1000,
	-1000, -1000, -1000, 5438, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 891, 1401, 8984, 8984, 1458, -1000,
	1178, -1000, -1000, -1000, 1381, -1000, -1000, 718, 1510, -1000,
	12034, 536, -1000, 8984, 70, 1173, -1000, -1000, -204, 1173,
	-1000, -1000, 490, -1000, -1000, -1000, 9899, 9899, 9899, 9899,
	9899, 9899, 9899, -1000, -1000, -1000, -1000, -4, 881, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 534, -1000,
	8679, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 8984,
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 2433,
	1173, 1173, 1173, 1173, -1000, 16914, 1159, 1281, -1000, -1000,
	-1000, 1420, 13559, 16609, 17830, 1109, -1000, 1188, 6455, -48,
	-1000, -1000, -1000, 625, 533, 16304, -1000, -1000, -1000, 1363,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1063, -1000,
	12339, 12339, 444, -1000, -1000, 376, 376, 1248, 1027, 679,
	1009, 1302, 335, 1419, 376, 17830, -1000, 15999, 5438, 409,
	17830, 1411, 1301, 17830, 989, 972, -1000, 6116, -1000, 5438,
	5438, 5438, 5438, 5438, 5438, 5438, 5438, -1000, -1000, -1000,
	-1000, -1000, -1000, 5438, 5438, -1000, 20, -1000, 17830, -1000,
	-1000, -1000, -1000, 1522, 568, 825, 521, 1189, -1000, 789,
	1437, 891, 1337, 15694, 1314, -1000, -1000, 17830, -1000, 8984,
	8984, 686, -1000, 19660, -1000, -1000, 4082, 582, 9899, 772,
	634, 9899, 9899, 9899, 9899, 9899, 9899, 9899, 9899, 9899,
	9899, 9899, 9899, 9899, 9899, 9899, 873, 2135, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	955, -1000, 589, -1000, 1178, 11424, 11424, 75, 75, 75,
	75, 75, 75, 19355, -1000, -229, 7764, -1000, 7133, 891,
	1047, 639, 8679, 8374, 8374, 8984, 8984, 9899, 18745, 8374,
	1422, 652, 639, 18745, -1000, 891, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 78, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8374, 8374, 8374, 8374, 252, 17830,
	-1000, 18745, 14779, 14779, 14779, 14779, 14779, -1000, 1334, 1331,
	-1000, 1318, 1317, 1327, 17830, -1000, 1059, 13559, 486, 1173,
	-1000, 19050, -1000, -1000, 252, 1136, 14779, 17830, -1000, -1000,
	5777, 1188, -48, 1184, -1000, -45, -30, 7459, 7133, 545,
	-1000, -1000, -1000, -1000, -1000, 12949, 173, -125, 11, -1000,
	-1000, -1000, -1000, -1000, 1225, -1000, -1000, -1000, 1225, 264,
	1225, 1225, 1225, -1000, 1225, 1225, 64, 64, 64, 64,
	64, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1268, 1260,
	-1000, 1225, 1225, 1225, -1000, 1225, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1249, 263, 1249, 1226,
	1226, -1000, -1000, 173, 15389, 17830, 17830, -101, 943, 5438,
	1400, 5438, 17830, 1504, 17830, -1000, -1000, -1000, 12339, 17830,
	-1000, 2139, 17830, -1000, 17830, -1000, -1000, 17830, 5438, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 648, -1000, -1000, -1000, -1000, 1347,
	8984, 8984, 4760, 8984, -1000, -1000, -1000, 1401, -1000, 1422,
	1442, -1000, 1356, 1354, 8374, -1000, -1000, 582, 591, -1000,
	-1000, 839, -1000, -1000, -1000, -1000, 518, 1173, -1000, 1446,
	-1000, -1000, -1000, -1000, 772, 9899, 9899, 9899, 445, 1446,
	1307, 903, 2128, 75, 305, 305, 74, 74, 74, 74,
	74, 421, 421, -1000, -1000, -1000, -1000, -95, -1000, 1225,
	1249, 263, 1249, 1226, 1226, -1000, -1000, 891, 72, -117,
	-1000, -1000, -1000, -1000, -1000, -1000, -204, 883, -1000, -1000,
	864, 891, 8374, 1047, 1187, 12034, -1000, -1000, -1000, 8984,
	-1000, 891, 1022, 1022, 774, 959, 603, 990, 1170, -1000,
	517, 1022, 8374, 656, -1000, 8984, 891, -1000, -1000, 1022,
	891, 1022, 1022, 1148, 1173, -1000, 1149, -1000, 624, 1281,
	1265, 1300, 1263, -1000, -1000, -1000, -1000, 1324, -1000, 1319,
	-1000, -1000, -1000, -1000, -96, 431, 429, 428, 20270, -1000,
	1481, 14779, 1139, -1000, -1000, 1184, -48, -15, -1000, -1000,
	-1000, -1000, 639, 622, -1000, -1000, 934, 7133, -1000, -1000,
	-1000, -1000, -1000, 1259, 710, 20270, 322, 320, 511, 509,
	928, -1000, -1000, -1000, 804, -1000, 20270, -1000, 1518, -1000,
	-1000, 315, -1000, 301, 664, 882, 17830, 134, 1250, 10509,
	862, -1000, -239, -1000, -18, -1000, -1000, 843, 64, 64,
	1225, 64, 64, 64, -1000, -1000, 545, 1362, 545, 545,
	545, 545, 879, 879, -117, -117, -1000, -1000, -1000, 859,
	1249, -1000, -1000, -1000, 858, -1000, 1247, 17830, 20270, 1417,
	1416, -1000, 7133, -1000, -1000, -1000, -1000, -1000, 1414, 1120,
	-1000, -1000, -1000, -1000, 408, -1000, 1284, -1000, 1332, 2370,
	391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 239, 482, -1000, 5438, -1000, 667, 17830, 17830,
	1343, 639, 639, 516, -1000, -1000, 17830, -1000, -1000, -1000,
	-1000, 1157, -1000, -1000, -1000, 5099, 8374, -1000, 445, 1446,
	370, -1000, 9899, 9899, 90, -1000, -1000, -1000, 88, 84,
	69, -1000, -204, -1000, 1022, -1000, 8374, 639, -1000, -1000,
	-1000, 2250, 873, 2250, 9899, 9899, 9899, 9899, 9899, 4760,
	-87, 1150, 646, -1000, 8984, 827, -1000, -1000, -1000, -1000,
	-1000, 1299, 18745, 1173, -1000, 15084, 20270, 1458, 18745, 8984,
	8984, -1000, -1000, 8984, 1243, -1000, 8984, -1000, -1000, -1000,
	-1000, 1242, 1173, 1173, 1173, 999, -1000, 1458, 1139, -1000,
	-1000, -1000, -56, -38, -1000, 8984, -1000, 4421, -1000, 18135,
	-1000, 1509, 1433, 355, 6, -1000, 923, 911, -1000, 892,
	-1000, -1000, 37, -1000, -157, 108, -13, -1000, -1000, 1173,
	-1000, 1240, 1413, -1000, 1367, 857, -1000, 10204, -203, -1000,
	-1000, -204, -1000, -1000, -1000, 1173, -1000, 1236, 1235, -1000,
	1220, 1173, 504, -1000, -1000, -1000, -1000, -1000, 1083, 545,
	545, 64, 545, 545, 545, -1000, 606, -1000, -1000, -1000,
	-1000, 1016, -1000, 1014, -1000, -1000, 1174, -1000, 1004, 17830,
	20270, 1234, 1298, 1178, 1178, 1163, -1000, 620, 1432, 221,
	17830, 1504, 1504, 20270, -1000, 310, 20270, -1000, 20270, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 20270, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17830,
	-1000, -1000, -1000, -1000, -1000, 20270, 363, -1000, -1000, 870,
	8984, -1000, -1000, -1000, 7133, -1000, 1481, 14779, -1000, -1000,
	891, -1000, 9899, 1446, 1446, -21, -23, -25, -1000, 864,
	-1000, -1000, -1000, 891, 1225, 1225, -1000, 1225, 1226, -1000,
	-1000, 1225, 110, 1225, 105, 891, 891, 226, 277, 296,
	164, 258, -1000, 1173, -81, -1000, 639, 8984, -1000, 1369,
	1089, 1125, -1000, -1000, 8069, 891, 1001, 503, 999, 1437,
	-1000, 639, 639, 639, 18440, 639, -214, 18440, 18440, 18440,
	14474, 20270, 1437, -1000, -1000, -1000, -1000, 639, 3743, -1000,
	996, -1000, 241, 1225, 399, 399, -186, 292, 291, 1173,
	-1000, -1000, -1000, -1000, -187, -1000, -1000, 664, -1000, 1220,
	8984, 18440, 129, -1000, 1160, 1078, 10814, -1000, 13254, -1000,
	891, -1000, 821, -1000, 794, 1071, 7133, -1000, -1000, -1000,
	545, -1000, -1000, -1000, -1000, -1000, 64, 826, 64, 855,
	-1000, 851, 1180, 1297, 14169, 17830, -1000, -1000, 7133, 3743,
	401, 1490, -1000, -1000, 1431, -1000, 1112, 1218, 20270, -1000,
	-1000, 340, -1000, 1217, -1000, -1000, -1000, -1000, 1398, 20270,
	-1000, -1000, 639, 1469, 1152, -1000, 1446, -1000, -1000, -1000,
	-1000, -1000, -1000, 224, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9899, 9899, -1000, 9899, 9899, 9899, 891,
	805, 639, 289, -1000, 1173, -1000, -1000, 1172, 20270, 20270,
	-1000, -1000, 994, -1000, -1000, 981, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 979, 979, 979, 486, -1000, -1000, -1000,
	-1000, -1000, -1000, 1974, 18135, 1397, -1000, -1000, -1000, 689,
	-1000, -1000, 699, 183, 687, -1000, 20270, -187, 8984, -1000,
	1173, 784, 966, 8984, 1215, 844, -1000, 1066, -1000, 72,
	-117, -1000, -1000, -1000, -1000, -1000, -1000, 1173, -1000, 545,
	-1000, 545, 1065, 1054, 14169, 20270, 17830, 1048, 1143, -1000,
	230, 1214, -1000, -1000, 20270, -1000, -1000, -1000, -1000, -1000,
	165, 944, -1000, 12644, 1211, 1210, 18440, 1173, 367, 1461,
	1455, -1000, -1000, 226, 226, 226, 226, 107, -1000, -1000,
	1516, -1000, 1173, -1000, 1178, 495, -1000, 20270, -1000, -1000,
	-214, -1000, -1000, -1000, -96, 1282, 2145, 143, -1000, 886,
	612, 785, 611, 609, 605, 604, 601, 600, 599, -1000,
	-1000, -1000, 1511, -1000, -1000, -1000, 1513, 1209, -1000, 1208,
	784, 8984, 187, 1286, 823, -1000, 1023, 1017, -1000, -1000,
	-1000, -1000, 1005, 1206, 1197, -191, 843, 14169, 1085, -1000,
	166, 944, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1458, 20270, 20270, 20270, 20270, 312, 9594, 8984, 960,
	11119, 12644, 12644, 11119, 12644, 12644, 18135, 18135, 963, 233,
	283, -1000, 8984, 8984, -1000, -1000, -1000, -1000, 891, 177,
	-128, 18745, 1125, 891, 20270, -1000, -1000, -1000, -1000, 20270,
	-1000, -124, 2145, 20270, -1000, 814, -1000, -1000, 764, 811,
	764, 764, 764, 764, 764, 399, 399, 20270, 18135, 187,
	784, -1000, -83, 1506, -134, 314, -1000, -1000, -191, 14169,
	18135, 1481, 1196, 939, -100, 20270, 8984, 2897, -1000, 1437,
	1118, 11729, -1000, -1000, -1000, -1000, 20270, 1495, 1486, 1484,
	1483, 2817, 70, 776, 137, -1000, -1000, 11119, -1000, -1000,
	-1000, -1000, -1000, 942, 938, 1248, 932, -1000, 20270, 1192,
	639, 1098, -1000, 1342, -92, -130, 1088, -1000, -1000, 1173,
	922, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 664, 664, 915, 907, -1000, 187, -1000,
	399, 399, -1000, -1000, -1000, 138, 782, 800, 793, 791,
	93, -1000, 1451, 1481, 933, 904, 1974, 18440, -191, -1000,
	-206, -1000, 639, -1000, -1000, 944, 1401, 20270, 161, -1000,
	-1000, 1372, -1000, -1000, -1000, -1000, -1000, 944, 944, 944,
	-1000, 268, -101, -1000, 233, 1352, 18135, -1000, 1340, -1000,
	20270, -1000, 2145, -1000, -1000, 361, 1974, -1000, -1000, -1000,
	781, -1000, 725, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13864, 1974, 1481, 1974, 1282, 902, 1481, 8984, -224, -1000,
	-1000, 12339, 1429, 20270, 2793, -1000, 112, 2773, 147, -1000,
	145, -1000, -1000, 216, 900, -123, 891, -1000, 17830, 1282,
	-1000, -1000, -1000, 493, 1282, 1974, -1000, -1000, -1000, 1974,
	639, 636, 1178, -1000, -1000, -1000, 628, 649, -1000, 144,
	-1000, 212, -1000, -133, -1000, 1181, -1000, 7133, -1000, -1000,
	1282, -1000, -1000, 373, 124, -1000, -1000, 1173, -137, 20270,
	-1000, -1000, -1000, 944, 9289, -1000, 890, 2568, 226, 891,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1786, 17, 3, 1784, 1782, 1780, 1571, 1569, 1555,
	1538, 1778, 1776, 1775, 1773, 1772, 1770, 1763, 1761, 1758,
	1754, 1753, 1751, 1749, 1748, 1747, 1745, 1744, 422, 1743,
	1742, 1740, 104, 1738, 109, 1737, 1736, 78, 134, 76,
	73, 1690, 1734, 55, 131, 136, 1727, 87, 1721, 1720,
	145, 1719, 105, 1712, 1710, 1606, 1709, 1707, 41, 19,
	27, 54, 1706, 1697, 107, 196, 1696, 1694, 1693, 33,
	1691, 1688, 86, 25, 32, 45, 46, 1686, 251, 61,
	1684, 92, 1682, 1680, 1679, 1676, 43, 1675, 103, 40,
	36, 1, 1674, 12, 15, 99, 71, 48, 24, 115,
	94, 1673, 68, 90, 88, 1672, 1671, 825, 1670, 1667,
	1664, 1661, 1660, 1658, 796, 116, 1657, 1653, 1650, 72,
	0, 367, 42, 114, 1649, 77, 1648, 1930, 102, 100,
	47, 1647, 51, 732, 74, 1646, 1644, 69, 113, 7,
	112, 108, 1643, 111, 1640, 1639, 1634, 1302, 67, 79,
	236, 1633, 1632, 1631, 80, 91, 49, 84, 93, 29,
	1629, 1628, 1627, 53, 1626, 22, 37, 2, 82, 1625,
	1624, 1623, 1621, 50, 1620, 1617, 39, 1616, 30, 16,
	6, 23, 8, 1614, 1613, 1612, 5, 1610, 44, 1609,
	9, 1608, 21, 1607, 1604, 1603, 66, 1602, 1601, 1600,
	14, 1599, 1598, 34, 13, 70, 57, 1597, 1596, 56,
	85, 58, 1593, 64, 10, 4, 20, 1591, 11, 1590,
	1589, 1588, 31, 28, 1583, 1582, 1581, 1580, 1577, 1576,
	52, 1575, 1574, 1861, 101, 1566, 1562, 26, 1558, 1542,
	1540, 421,
}

var yyR1 = [...]uint8{
	0, 231, 232, 232, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 235,
	235, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 219, 219, 218, 220, 220, 12, 12, 12, 12,
	12, 212, 212, 212, 212, 212, 13, 13, 215, 215,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	236, 236, 237, 237, 237, 237, 237, 237, 237, 210,
	210, 210, 211, 211, 211, 213, 213, 214, 214, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 217, 217,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 158, 139, 139, 139, 139,
	139, 139, 139, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 205,
	205, 205, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 207, 208, 201, 201, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	148, 148, 148, 148, 148, 148, 200, 200, 196, 196,
	196, 196, 196, 196, 196, 196, 143, 143, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 144, 140, 140, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 157, 157, 147,
	147, 155, 155, 156, 156, 156, 154, 154, 154, 151,
	151, 152, 152, 153, 153, 153, 149, 149, 149, 150,
	150, 150, 160, 181, 181, 181, 183, 183, 184, 184,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 169, 169, 209, 209, 180, 180, 180, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 168, 168, 178,
	178, 179, 179, 176, 176, 176, 177, 163, 163, 163,
	163, 163, 164, 165, 165, 165, 165, 161, 162, 203,
	203, 203, 204, 204, 166, 166, 167, 167, 174, 174,
	172, 172, 173, 173, 173, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 238,
	238, 239, 239, 239, 239, 239, 239, 239, 187, 185,
	185, 186, 186, 17, 18, 18, 18, 18, 18, 19,
	19, 21, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 112, 112, 109, 109, 110,
	110, 111, 111, 111, 113, 113, 113, 136, 136, 136,
	23, 23, 25, 25, 26, 27, 24, 24, 24, 24,
	24, 240, 28, 29, 29, 30, 30, 30, 34, 34,
	34, 32, 32, 33, 33, 39, 39, 38, 38, 40,
	40, 40, 40, 124, 124, 124, 123, 123, 42, 42,
	43, 43, 44, 44, 45, 45, 45, 222, 222, 221,
	221, 223, 223, 223, 223, 223, 223, 57, 57, 93,
	93, 93, 96, 96, 46, 46, 46, 46, 47, 47,
	48, 48, 49, 49, 131, 131, 130, 130, 130, 129,
	129, 51, 51, 51, 53, 52, 52, 52, 52, 54,
	54, 56, 56, 55, 55, 58, 58, 58, 58, 59,
	59, 94, 94, 41, 41, 41, 41, 41, 41, 41,
	108, 108, 61, 61, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 71, 71, 71, 71, 71, 71,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 37, 37, 72, 72, 72, 78, 73, 73, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 69, 69, 69, 69,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 241, 241, 70, 70, 70, 70,
	35, 35, 35, 35, 35, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 138, 138, 138, 138, 138, 138, 138, 138, 82,
	82, 36, 36, 80, 80, 81, 83, 83, 79, 79,
	79, 224, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 66, 66, 66, 84, 84, 85, 85, 86,
	86, 87, 87, 88, 89, 89, 89, 90, 90, 90,
	90, 91, 91, 91, 63, 63, 63, 63, 63, 63,
	92, 92, 92, 92, 97, 97, 74, 74, 76, 76,
	75, 77, 98, 98, 102, 99, 99, 103, 103, 103,
	103, 103, 101, 101, 101, 126, 126, 126, 106, 106,
	114, 114, 115, 115, 107, 107, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 117, 117, 117, 118,
	118, 121, 121, 122, 122, 127, 127, 127, 128, 128,
	225, 225, 225, 226, 226, 226, 227, 227, 228, 229,
	229, 230, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	233, 234, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 8,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 8, 8, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 2, 1, 1, 1, 3,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 2,
	1, 2, 1, 1, 1, 1, 4, 4, 4, 4,
	4, 1, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 3, 0, 1, 1, 3, 0, 4,
	1, 2, 1, 1, 1, 6, 11, 13, 13, 7,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 6, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 0, 4, 1,
	3, 1, 1, 1, 1, 1, 1, 4, 8, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 4, 5, 6, 4,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 3, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 2, 0, 2, 2, 0, 1, 4, 1,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -231, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	118, 119, 121, 120, 151, 122, 144, 50, 198, 199,
	201, 202, 26, 145, 146, 149, 150, -233, 8, 305,
	54, -232, 347, -86, 15, -30, 5, -28, -240, -28,
	-28, -28, -28, -28, -170, 54, -125, -199, 127, 160,
	297, 124, 140, 158, 159, 323, 125, 142, 72, -107,
	128, 130, 125, 125, 126, 128, 297, 124, 125, -55,
	-127, 57, -120, 59, 167, 314, 21, 198, 211, 212,
	203, 244, 232, 315, 165, 229, 233, 283, 346, 66,
	201, 292, 134, 171, 147, 224, 227, 226, 218, 215,
	28, 250, 321, 217, 137, 251, 255, 262, 284, 312,
	208, 209, 286, 248, 33, 139, 316, 35, 155, 287,
	253, 247, 242, 127, 246, 207, 241, 39, 221, 257,
	256, 258, 282, 235, 166, 261, 237, 219, 236, 18,
	150, 153, 252, 254, 216, 168, 132, 157, 320, 288,
	214, 154, 169, 149, 291, 337, 164, 202, 285, 210,
	294, 38, 268, 228, 205, 220, 206, 136, 199, 162,
	239, 156, 222, 223, 245, 204, 240, 200, 158, 151,
	293, 269, 322, 238, 234, 230, 231, 163, 128, 160,
	161, 275, 276, 277, 278, 318, 289, 225, 270, 271,
	173, 174, 175, 176, 177, 178, 179, 125, 112, 233,
	118, 273, 126, 33, 157, -136, 125, -109, 161, 275,
	276, 277, 278, 57, 285, 284, 279, -127, 200, -132,
	-132, -132, -132, -132, -2, -90, 17, 16, -5, -3,
	-233, 6, 21, 22, -34, 40, 41, -29, -40, 103,
	-41, -127, -60, 74, -65, 29, 57, -120, 59, 24,
	-64, -61, -79, -224, -77, -78, 112, 113, 101, 102,
	109, 75, 114, -69, -67, -68, -70, -227, -121, 58,
	67, 60, 61, 62, 63, 68, 69, 70, 295, -75,
	-233, 44, 45, 306, 307, 308, 309, 313, 310, 77,
	34, 296, 304, 303, 302, 300, 301, 298, 299, 345,
	131, 297, 107, 305, 259, -107, -43, -44, -45, -46,
	-57, -78, -233, -55, 11, -50, -55, -99, -135, 200,
	-103, 285, 284, -122, 295, -101, -121, -119, 283, 233,
	282, 57, -120, 123, 181, 326, 73, 23, 25, 266,
	272, 180, 76, 112, 16, 77, 187, 335, 336, 111,
	306, 118, 48, 298, 299, 296, 185, 308, 309, 297,
	273, 192, 20, 29, 10, 26, 145, 22, 105, 120,
	182, 80, 81, 148, 24, 146, 70, 188, 190, 19,
	51, 138, 11, 325, 13, 14, 339, 327, 131, 130,
	92, 338, 126, 46, 8, 114, 27, 89, 42, 143,
	191, 44, 90, 17, 300, 301, 32, 313, 152, 107,
	49, 36, 340, 74, 341, 68, 52, 290, 186, 72,
	15, 47, 342, 140, 189, 91, 121, 305, 45, 183,
	343, 124, 184, 6, 311, 31, 144, 43, 125, 274,
	79, 129, 69, 159, 5, 142, 9, 50, 53, 302,
	303, 304, 34, 78, 12, 141, 317, 71, -171, -158,
	-121, 59, -203, 335, 336, 128, 128, -121, -115, 131,
	-115, -121, -121, -55, 125, -115, 305, 125, -55, -55,
	-114, 131, 57, -114, -114, -114, -55, 115, -55, 57,
	31, 297, 57, 157, 125, 158, 128, -133, -233, -122,
	-133, -133, -133, 162, 163, -133, -110, 280, 52, -133,
	-234, 56, -91, 19, 32, -41, -127, -87, -88, -41,
	-86, -2, -28, 36, -32, 22, 65, 11, -124, 73,
	72, 89, -123, 23, -121, 59, 115, -41, -62, 92,
	74, 90, 91, 76, 98, 97, 108, 101, 102, 103,
	104, 105, 106, 107, 99, 100, 111, 345, 82, 83,
	84, 85, 86, 87, 88, 93, 94, 95, 96, -108,
	-233, -196, 345, -78, -233, 116, 117, -65, -65, -65,
	-65, -65, -65, -65, -228, 260, -233, 59, 115, -2,
	-73, -41, -233, -233, -233, -233, -233, -233, -233, -233,
	-233, -82, -41, -233, -241, -233, -241, -241, -241, -241,
	-241, -241, -241, -138, 112, 233, 147, 224, -141, -140,
	239, 238, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 232, 315, -233, -233, -233, -233, -56, 27,
	-55, 31, 55, -51, -53, -52, -54, 42, 46, 48,
	43, 44, 45, 49, -131, 23, -43, -233, -130, 153,
	-129, 23, -127, 59, -55, -50, -235, 55, 11, 53,
	55, -99, 200, -100, -104, 286, 288, 82, 115, -126,
	-121, 59, 29, 31, 56, 55, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 232, 315, 229, 233,
	230, 235, 236, 237, 112, 234, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 238, 250, 31,
	147, 222, 223, 224, 227, 226, 228, 225, 251, 252,
	253, 254, 255, 256, 257, 258, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 217, 218,
	219, 221, 220, -159, 126, -115, -115, -192, 53, 57,
	74, 57, 52, -210, 52, 19, 180, 181, 23, -115,
	-55, -55, 290, -133, 129, -55, 24, 52, -55, 57,
	57, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 274, 281, -55, 9, 92,
	55, 18, 115, 55, -89, 25, 26, -90, -234, -34,
	-66, -121, 60, 63, -33, 43, -55, -41, -41, -71,
	68, 74, 69, 70, -123, 103, -128, -122, -119, -65,
	-72, -75, -78, 64, 92, 90, 91, 76, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 57, 59, -143, 223, -138, -141,
	214, 215, 217, 218, 219, 221, 220, 57, 233, 223,
	263, 114, 239, 248, 249, -64, 59, -121, -64, -121,
	348, -39, 22, -73, -38, -41, -40, -122, -234, 55,
	-234, -2, -38, -38, -41, -41, -79, -65, -79, -121,
	-127, -38, -32, -80, -81, 78, -79, -234, 231, -38,
	-39, -38, -38, -95, 153, -55, -98, -102, -79, -44,
	-45, -45, -44, -45, 42, 42, 42, 47, 42, 47,
	42, -52, -127, -234, -58, 50, 130, 51, -233, -129,
	-95, 53, -43, -55, -103, -100, 55, 287, 289, 290,
	52, 71, -41, -122, -150, 112, 111, -174, -158, -160,
	-163, -161, -162, -175, -164, 134, 132, 136, 137, 142,
	-168, 126, 143, 68, 74, -205, 134, -207, 52, 266,
	272, 132, 143, 142, 346, 66, 135, 325, 327, 29,
	30, -153, 348, 260, -151, 269, -147, 54, -147, -147,
	231, -147, -147, -147, -147, -147, -149, 233, -149, -149,
	-149, -149, 54, 54, -147, -147, -147, -147, -155, 54,
	216, -155, -155, -156, 54, -156, -121, 52, 197, -55,
	-55, -190, 317, -191, 57, -133, 24, -133, -55, -213,
	-211, 8, 9, 10, -55, -139, -55, -116, 123, 120,
	121, -187, 119, 266, 233, 66, 29, 15, 306, 153,
	322, 57, 154, -55, -55, -55, -133, -111, 11, 92,
	38, -41, -41, -128, -88, -91, -106, 19, 11, 34,
	34, -38, 68, 69, 70, 115, -233, -72, -65, -65,
	-65, -37, 148, 73, 317, -234, 231, -154, 317, 318,
	-229, -230, 59, -234, -38, -234, 55, -41, -234, -234,
	-234, 55, 53, 23, 55, 11, 55, 55, 11, 115,
	-234, -38, -83, -81, 80, -41, -234, -234, -234, -234,
	-234, -63, 31, 34, -2, -233, -233, -59, 55, 12,
	82, -48, -47, 52, 53, -49, 52, -47, 42, 42,
	-222, 317, 126, 126, 126, -96, -121, -59, -43, -59,
	-104, -105, 291, 288, 294, 82, 57, -172, -122, 54,
	-204, 52, 74, -166, -121, 143, -168, -168, 57, -168,
	57, 126, 57, 68, 19, -121, 9, 143, 143, -204,
	59, -55, -201, 326, 16, 54, -206, 54, 59, 60,
	61, 68, -148, 67, -61, 261, -69, 296, 299, 298,
	262, -121, -127, -208, 60, 349, -152, 270, 60, -149,
	-149, -147, -149, -149, -149, -150, 31, -150, -150, -150,
	-150, -157, 59, -157, -154, -154, 60, -155, 60, 52,
	53, -55, -121, 23, 23, -189, -188, -122, -194, 23,
	52, 55, -210, 53, -132, -125, 134, -239, 160, 133,
	138, 137, 57, 132, 136, 153, -193, 160, 133, 134,
	138, 137, 57, 126, 143, 132, 136, 153, 142, -117,
	-118, 129, 23, 126, 143, 153, 123, -133, -113, 90,
	12, -127, -127, 39, 115, -55, -42, 11, 103, -122,
	-39, -37, 73, -65, -65, 222, 222, 222, 349, 55,
	-196, -234, -40, -137, 112, 229, 147, 224, 218, 248,
	249, 235, 268, 222, 269, -134, -137, -65, -65, -65,
	-65, -65, -122, 314, -86, 81, -41, 79, -97, 52,
	-98, -74, -76, -75, -233, -2, -92, -121, -96, -86,
	-102, -41, -41, -41, 54, -41, 54, -233, -233, -233,
	-234, 55, -86, -59, 288, 292, 293, -41, 82, -122,
	-179, -176, -121, 143, 10, 9, 19, 138, 132, 346,
	57, 57, 57, -203, 142, 337, -205, 346, -148, 262,
	-233, 54, 23, 29, 60, -206, 54, -196, 345, -196,
	-233, -147, 54, -147, 54, 54, 115, 56, -150, -150,
	-149, -150, -150, -150, 57, 112, 56, 55, 56, 55,
	56, 55, -55, -121, 54, 52, -2, -2, 55, 82,
	-195, 19, 168, 169, -55, -211, -213, -121, -238, 126,
	143, -121, -132, -121, -132, -121, -55, -132, -121, 134,
	-163, 59, -41, -59, -43, -234, -65, 271, 271, 271,
	-230, -234, -147, -147, -147, -156, -147, 209, -147, 209,
	-234, -234, -234, 19, 55, -234, 55, 19, -233, -36,
	311, -41, 28, -97, 55, -234, -234, -234, 55, 115,
	-234, -90, -93, -121, 143, -221, -223, 339, 340, 341,
	342, 343, 344, -93, -93, -93, -130, -121, -90, -173,
	-122, 59, 60, 56, 55, -147, -177, 264, -147, -165,
	164, 165, 31, 166, -165, 337, 143, 143, -233, -203,
	-204, -41, -93, 54, 327, 55, 56, -206, -121, 233,
	223, 239, 248, -234, 56, 56, 56, -122, -150, -149,
	59, -149, 60, 60, 54, 53, 52, -178, -179, -69,
	-121, -55, -188, -173, 129, 21, 6, 8, 9, 10,
	19, 23, -236, 54, -121, 142, 54, 27, -121, -84,
	13, -149, 57, -65, -65, -65, -65, -65, -234, 59,
	143, -76, 34, -2, -233, -121, -121, 55, 56, 56,
	55, -234, -234, -234, -58, -181, -183, 317, -182, 53,
	139, 66, 173, 174, 175, 176, 177, 178, 179, -176,
	-89, -204, 52, 68, 167, -204, 52, -166, -121, -203,
	-41, -233, -234, 56, -41, 54, 60, 56, -150, -150,
	56, 56, -178, -121, -55, 56, 54, 54, -167, -121,
	182, -214, -216, -7, -9, -8, -11, -10, -12, -13,
	-14, -3, 20, 186, 187, 192, 188, 141, 131, -237,
	-121, 101, 82, 59, -158, 55, 54, 54, -93, -233,
	132, -85, 14, 16, -234, -234, -234, -234, -35, 92,
	317, 9, -74, -2, 115, -121, -223, -222, -180, 52,
	-182, 317, 54, 319, 57, -169, 82, 59, 82, 82,
	82, 82, 82, 82, 82, 9, 10, 54, 54, -234,
	-41, -200, 166, 52, 56, -202, 56, 56, 56, 54,
	54, -94, 338, -178, -197, 55, 53, 183, -216, -86,
	-219, -121, -218, -121, -121, -121, -212, 36, 189, 190,
	191, -60, -65, -41, -60, 56, -237, -121, -237, -237,
	-237, -237, -237, -179, -179, 56, -185, -186, 153, 143,
	-41, -73, -234, 315, 49, 320, -98, -234, -121, -121,
	-184, -182, -121, 60, -209, 52, 71, 60, -209, -209,
	-209, -209, -209, -165, -165, -167, -179, -200, -234, 312,
	10, 9, 323, 324, 56, 199, 329, 330, 152, 331,
	166, 332, 333, -94, -178, -179, -59, 54, 56, -198,
	317, -121, -41, -217, -216, 198, -90, 55, -220, -139,
	184, -121, 11, 11, 11, 11, -216, 198, 79, 198,
	56, 56, -192, -234, 55, -121, 54, 39, 316, 321,
	-233, 56, 55, -204, -204, 56, 56, -200, -165, -165,
	317, 60, 16, 60, 60, 60, 60, 330, 152, 332,
	16, -59, 56, 56, -181, -93, -94, 346, -216, -91,
	-218, -121, 185, 27, -215, -216, -214, -215, -225, 193,
	74, -190, -186, 34, -179, 39, -121, -182, 135, -181,
	60, 60, 334, -127, -181, -59, -181, -180, 56, -59,
	-41, 347, 19, -121, 81, -216, 347, 81, -226, 194,
	193, 155, 56, 317, -234, -55, -180, 115, -180, -181,
	-181, 81, -2, 81, 80, 196, 195, 156, 320, 54,
	-122, -180, 131, 198, -233, 321, -167, -215, -65, 152,
	56, 81, -234, -234,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 769, 0, 501, 501, 501, 501, 501, 501, 0,
	-2, 824, 0, 0, 0, 0, -2, 491, 492, 0,
	494, 495, 1122, 1122, 1122, 1122, 1122, 0, 33, 34,
	1120, 1, 3, 777, 0, 0, 505, 508, 503, 856,
	824, 0, 0, 0, 84, 157, 389, 0, 0, 0,
	822, 822, 0, 0, 0, 0, 822, 144, 0, 0,
	0, 825, 0, 820, 0, 820, 820, 820, 0, 450,
	583, 845, 846, 847, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 0, 0, 0,
	0, 1123, 1123, 1123, 1123, 0, 1123, 479, 468, 470,
	471, 472, 473, 1123, 488, 489, 478, 490, 493, 496,
	497, 498, 499, 500, 27, 781, 856, 856, 769, 29,
	0, 501, 506, 507, 511, 509, 510, 502, 0, 519,
	523, 0, 593, 856, 598, 600, -2, -2, -2, 0,
	639, 640, 641, 642, 643, 644, 856, 856, 856, 856,
	856, 856, 856, 671, 672, 673, 674, 0, 748, 755,
	756, 757, 758, 759, 760, 761, 602, 603, 0, 801,
	856, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 704, 704, 704, 704, 704, 704, 704, 704, 0,
	0, 0, 0, 0, 857, 0, 0, 530, 532, 533,
	534, 564, 0, 566, 0, 0, 41, 45, 0, 1090,
	805, -2, -2, 0, 0, 0, 843, 844, -2, 999,
	-2, 841, 842, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 0, 158,
	172, 172, 0, 390, 391, 822, 822, 145, 0, 0,
	0, 0, 0, 0, 822, 0, 154, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 449, 0, 451, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 460, 1124, 1125,
	461, 462, 463, 1123, 1123, 465, 0, 480, 0, 474,
	28, 1121, 22, 0, 0, 778, 0, 770, 771, 774,
	777, 27, 508, 0, 513, 512, 504, 0, 520, 856,
	856, 0, 524, 0, 526, 527, 0, 596, 856, 0,
	0, 856, 856, 856, 856, 856, 856, 856, 856, 856,
	856, 856, 856, 856, 856, 856, 0, 0, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 599,
	0, 753, 0, 613, 0, 0, 0, 662, 663, 664,
	665, 666, 667, 668, 675, 0, -2, 754, 0, 27,
	0, 637, 856, 856, 856, 856, 856, 856, 0, 856,
	511, 0, 740, 0, 695, 0, 696, 697, 698, 699,
	700, 701, 702, 703, 731, 0, 733, 734, 735, 736,
	737, 738, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 274, 275, 856, -2, 856, 856, 43, 0,
	582, 0, 0, 0, 0, 0, 0, 571, 0, 0,
	574, 0, 0, 0, 0, 565, 0, 0, 585, 1054,
	567, 0, 569, 570, -2, 0, 0, 0, 39, 40,
	0, 46, 1090, 48, 73, 0, 0, 856, 0, 329,
	815, 816, 817, 813, 398, 0, 164, 323, 319, 167,
	168, 169, 170, 171, 309, 247, -2, -2, -2, -2,
	-2, -2, -2, -2, 309, -2, -2, -2, -2, -2,
	326, -2, -2, -2, -2, -2, 295, -2, 1014, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 165, 0, 0, 0, 148, 0, 1123,
	0, 1123, 0, 0, 0, 109, 110, 111, 172, 0,
	155, 0, 0, 416, 0, 444, 821, 0, 1123, 447,
	448, 584, 848, 849, 452, 453, 454, 455, 456, 457,
	458, 459, 464, 467, 481, 475, 476, 469, 782, 0,
	856, 856, 0, 856, 773, 775, 776, 781, 30, 511,
	0, 762, 0, 0, 856, 514, 25, 594, 595, 597,
	614, 0, 616, 618, 525, 521, 0, 749, -2, 604,
	605, 633, 634, 635, 0, 856, 856, 856, 631, 609,
	0, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 659, 715, 716, 660, 0, 670, 309,
	311, 311, 311, 313, 313, 264, 265, 0, 0, 316,
	241, 242, 243, 244, 245, 657, 238, 0, 658, 669,
	0, 0, 856, 0, 516, 523, 517, 751, 636, 856,
	800, 27, 0, 0, 0, 0, 641, 0, 0, 748,
	0, 0, 856, 746, 743, 856, 0, 705, 732, 0,
	0, 0, 0, 0, 0, 581, 589, 802, 0, 531,
	560, 562, 0, 557, 572, 573, 575, 0, 577, 0,
	579, 580, 535, 536, 537, 0, 0, 0, 0, 568,
	589, 0, 589, 42, 806, 47, 0, 0, 76, 77,
	807, 808, 809, 0, 811, 330, 0, 156, 159, 160,
	161, 162, 163, 0, 392, -2, 1059, 1080, 1017, 0,
	0, 367, 368, 174, 0, 176, 0, 178, 0, 180,
	181, 0, 183, 185, 392, 0, 0, 0, 0, 0,
	0, 173, 0, 325, 321, 320, 246, 0, 326, 326,
	309, 326, 326, 326, 283, 284, 329, 0, 329, 329,
	329, 329, 0, 0, 316, 316, 269, 271, 258, 0,
	311, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	0, 92, 0, 146, 147, 93, 823, 94, 130, 0,
	115, 112, 113, 114, 0, 98, 0, 1122, 143, 0,
	836, 417, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 0, 0, 443, 1123, 446, 484, 0, 0,
	0, 779, 780, 0, 772, 23, 0, 818, 819, 763,
	764, 528, 615, 617, 619, 0, -2, 606, 631, 610,
	0, 607, 856, 856, 0, 601, 239, 240, 0, 0,
	0, 859, 238, 676, 0, 679, 856, 638, -2, 680,
	681, 0, 0, 0, 856, 856, 856, 856, 856, 0,
	0, 769, 0, 744, 856, 0, 694, 706, 707, 708,
	709, 794, 0, 0, -2, 0, 0, 769, 0, 856,
	856, 554, 561, 856, 0, 555, 856, 556, 576, 578,
	547, 0, 0, 0, 0, 0, 552, 769, 589, 38,
	74, 75, 0, 0, 81, 856, 331, 0, 400, 0,
	377, 0, 0, 0, 395, 358, 0, 0, 361, 0,
	363, -2, 389, 175, 0, 0, 0, 182, 184, 0,
	188, 189, 0, 214, 0, 0, 199, 0, -2, 203,
	204, 238, 206, 207, 208, 1048, 211, 309, 309, 234,
	1020, 0, 0, 212, 213, 324, 166, 322, 0, 329,
	329, 326, 329, 329, 329, 285, 0, 286, 287, 288,
	289, 0, 307, 0, 267, 268, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 149, 150, 0, 133, 0,
	0, 0, 0, 0, 405, 0, 0, 1122, 0, 431,
	432, 433, 434, 435, 436, 437, 1122, 0, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 0,
	1122, 837, 838, 839, 840, 0, 0, 445, 466, 0,
	856, 482, 483, 783, 0, 24, 589, 0, 522, 750,
	0, 608, 856, 632, 611, 0, 0, 0, 858, 0,
	861, 677, 518, 0, 309, 309, 720, 309, 313, 723,
	724, 309, 726, 309, 729, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 741, 693, 747, 856, 31, 0,
	794, 784, 796, 798, 856, 27, 0, 790, 0, 777,
	803, 590, 804, 558, 0, 563, 0, 0, 0, 0,
	566, 0, 777, 37, 78, 79, 80, 810, 0, 401,
	0, 371, 309, 309, 0, 0, 0, 0, 0, 0,
	359, 360, 362, 365, 389, 198, 177, 392, 179, 0,
	856, 0, 0, 215, 0, 0, 0, 202, 0, 205,
	0, 230, 0, 232, 0, 0, 0, 310, 276, 277,
	329, 278, 279, 280, 327, 328, 326, 0, 326, 0,
	314, 0, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 0, 131, 132, 0, 116, 0, 100, 0, 429,
	430, 0, 410, 0, 411, 413, 414, 415, 0, 394,
	409, 485, 486, 765, 529, 678, 612, 661, 317, 318,
	860, 682, 717, 326, 721, 722, 725, 727, 728, 730,
	684, 683, 685, 856, 856, 688, 856, 856, 856, 0,
	0, 745, 0, 32, 0, 799, -2, 0, 0, 0,
	44, 35, 0, 549, 550, 0, 539, 541, 542, 543,
	544, 545, 546, 0, 0, 0, 585, 553, 36, 399,
	402, 403, 404, 333, 0, 774, 375, 376, 374, 392,
	383, 384, 0, 0, 392, 393, 394, 389, 856, 366,
	0, 0, 0, 856, 195, 0, 200, 0, 210, 999,
	316, 243, 244, 209, 231, 233, 235, 0, 282, 329,
	308, 329, 0, 0, 0, 0, 0, 0, 369, 370,
	309, 0, 151, 152, 0, 134, 135, 136, 137, 138,
	0, 0, 99, 102, 0, 0, 0, 0, 395, 767,
	0, 718, 719, 0, 0, 0, 0, 710, 692, 742,
	0, 797, 0, -2, 0, 792, 791, 0, 559, 538,
	0, 586, 587, 588, 537, 355, 334, 0, 336, 0,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	373, 378, 0, 385, 386, 379, 0, 0, 395, 0,
	0, 856, 236, 190, 0, 216, 0, 0, 297, 298,
	312, 315, 0, 0, 0, 591, 1120, 0, 139, 396,
	0, 97, 117, 119, 120, 121, 122, 123, 124, 125,
	126, 769, 0, 0, 0, 0, 61, 856, 856, 0,
	-2, 102, 102, -2, 102, 102, 0, 0, 0, 0,
	0, 26, 856, 856, 687, 686, 689, 690, 0, 0,
	0, 0, 787, 27, 0, 551, 540, 548, 332, 0,
	337, 0, 0, 0, 340, 0, 352, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 186, 0, 0, 0, 0, 197, 201, 591, 0,
	0, 589, 0, 0, 141, 0, 856, 0, 118, 777,
	49, -2, 51, 56, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 593, 101, 103, -2, 104, 105,
	106, 107, 108, 0, 0, 145, 0, 439, 0, 0,
	768, 766, 691, 0, 0, 0, 795, -2, 793, 356,
	0, 338, 343, 341, 344, 353, 354, 345, 346, 347,
	348, 349, 350, 392, 392, 0, 0, 388, 236, 237,
	0, 0, 193, 194, 196, 0, 0, 0, 0, 0,
	0, 227, 0, 589, 0, 0, 333, 0, 591, 95,
	0, 397, 140, 96, 128, 0, 781, 0, 0, 53,
	55, 59, 62, 63, 64, 65, 66, 0, 0, 0,
	406, 850, 148, 438, 0, 0, 0, 711, 0, 714,
	0, 335, 0, 380, 381, 0, 333, 187, 191, 192,
	0, 218, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 333, 589, 333, 355, 0, 589, 856, 0, 127,
	52, 172, 0, 0, 0, 68, 0, 0, 853, 851,
	0, 412, 440, 0, 0, 712, 0, 339, 0, 355,
	217, 219, 228, 0, 355, 333, 88, 86, 592, 333,
	142, 0, 0, 60, 67, 69, 0, 71, 408, 0,
	852, 0, 407, 0, 357, 0, 387, 0, 85, 89,
	355, 129, -2, 0, 0, 854, 855, 0, 0, 0,
	229, 87, 70, 0, 856, 713, 0, 0, 0, 0,
	382, 72, 441, 442,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 106, 98, 3,
	54, 56, 103, 101, 55, 102, 115, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 347,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 348, 3, 349, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:386
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:391
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:392
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:396
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:419
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:427
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:431
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:437
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:444
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:450
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:454
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:460
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:464
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:471
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:483
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:495
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:499
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:505
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:511
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:515
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:519
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:525
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:529
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:533
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:538
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:542
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:560
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:566
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:570
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:583
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:587
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:598
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:602
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:608
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:629
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:637
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:647
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:669
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:676
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:686
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:697
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:706
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:714
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:735
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:739
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:743
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:753
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:757
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:761
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:767
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:771
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:777
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:782
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:802
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:822
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:843
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:859
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:875
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:883
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:891
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:899
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:903
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:907
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:919
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:930
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:941
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:952
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:957
		{
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:958
		{
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:962
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:963
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:976
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:980
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:986
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1004
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1010
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1014
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1031
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1043
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1050
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1054
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1058
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1063
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1067
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1071
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1075
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1079
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1083
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1088
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1092
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1097
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1106
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1110
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1115
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1119
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1125
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1130
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1135
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1141
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1146
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1152
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1157
		{
			yyVAL.bytes = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1161
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1167
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1174
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1180
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1184
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1189
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1193
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1197
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1201
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1205
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1211
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1216
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1233
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1238
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1244
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1257
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1262
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1267
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1272
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1278
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1283
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1288
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1293
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1298
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1303
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1308
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1313
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1318
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1327
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1337
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1342
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1347
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1354
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1361
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1369
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1374
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1380
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1392
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1398
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1405
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1409
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1413
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1419
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1423
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1427
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1431
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1435
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1439
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1443
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1447
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1451
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1455
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1461
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1467
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1473
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1477
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1482
		{
			yyVAL.sequence = &Sequence{}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1486
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1491
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1496
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1501
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1511
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1516
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1521
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1526
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1536
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1541
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1546
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1553
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1557
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1561
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1565
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1569
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1573
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1578
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1582
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1587
		{
			yyVAL.bytes = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1600
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1605
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1872
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1877
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1882
		{
			yyVAL.optVal = nil
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1886
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1891
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1895
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1903
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1907
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1921
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1925
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1929
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1934
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1938
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1943
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1965
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1969
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1978
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1992
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1997
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2001
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2005
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2011
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2015
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2021
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2025
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2031
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2035
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2040
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2044
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2048
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2052
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2056
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2060
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2064
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2068
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2072
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2078
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2082
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2088
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2092
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2098
		{
			yyVAL.indexPartition = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2102
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2106
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2150
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2160
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2165
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2171
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2175
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2181
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2186
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2190
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2200
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2205
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2212
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2219
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2226
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2235
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2247
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2251
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2255
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2259
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 387:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2265
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2276
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2286
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2290
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2300
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2304
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2309
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2316
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2320
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2327
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2331
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2338
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2342
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2348
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2352
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2356
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2362
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2366
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 407:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2380
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 408:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2394
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 409:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2413
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2422
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2426
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2430
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2443
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2453
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2458
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2463
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2467
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2499
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2505
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2509
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2515
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2519
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2525
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2531
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2539
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2544
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2552
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2556
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2562
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2566
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2571
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2626
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2630
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2634
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2644
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2694
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2698
		{
			yyVAL.str = "extended "
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2704
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2708
		{
			yyVAL.str = "full "
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2714
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2718
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2722
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2728
		{
			yyVAL.showFilter = nil
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2732
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2742
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2746
		{
			yyVAL.str = SessionStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2750
		{
			yyVAL.str = GlobalStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2756
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2760
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2766
		{
			yyVAL.statement = &Begin{}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.statement = &Begin{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2776
		{
			yyVAL.statement = &Commit{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2782
		{
			yyVAL.statement = &Rollback{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2788
		{
			yyVAL.statement = &OtherRead{}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2792
		{
			yyVAL.statement = &OtherRead{}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2796
		{
			yyVAL.statement = &OtherRead{}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2800
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2804
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2809
		{
			setAllowComments(yylex, true)
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2813
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2819
		{
			yyVAL.bytes2 = nil
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2823
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.str = UnionStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2833
		{
			yyVAL.str = UnionAllStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2837
		{
			yyVAL.str = UnionDistinctStr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2842
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2846
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2850
		{
			yyVAL.str = SQLCacheStr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2855
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2859
		{
			yyVAL.str = DistinctStr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2864
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2868
		{
			yyVAL.str = StraightJoinHint
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2873
		{
			yyVAL.selectExprs = nil
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2877
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2883
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2887
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2893
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2897
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2901
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2905
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2910
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2914
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2918
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2925
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2930
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2934
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2940
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2944
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2958
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2962
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2967
		{
			yyVAL.strs = []string{}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2971
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2977
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2981
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3013
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3017
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3023
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3032
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3038
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3042
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3055
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3059
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3063
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3067
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3073
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3075
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3079
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3085
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3087
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3092
		{
			yyVAL.empty = struct{}{}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3095
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3103
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3116
		{
			yyVAL.str = JoinStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3120
		{
			yyVAL.str = JoinStr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3124
		{
			yyVAL.str = JoinStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.str = StraightJoinStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3136
		{
			yyVAL.str = LeftJoinStr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3140
		{
			yyVAL.str = LeftJoinStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3144
		{
			yyVAL.str = RightJoinStr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3148
		{
			yyVAL.str = RightJoinStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3154
		{
			yyVAL.str = NaturalJoinStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3158
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3168
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3178
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3182
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3187
		{
			yyVAL.indexHints = nil
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3191
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3195
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3199
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3204
		{
			yyVAL.expr = nil
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3208
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3213
		{
			yyVAL.columns = nil
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3217
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3223
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3227
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3231
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3235
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3239
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3247
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3253
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3257
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3263
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3267
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3273
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3277
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3281
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3285
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3289
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3293
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3297
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3301
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3305
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3309
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3315
		{
			yyVAL.str = IsNullStr
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3319
		{
			yyVAL.str = IsNotNullStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3323
		{
			yyVAL.str = IsTrueStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3327
		{
			yyVAL.str = IsNotTrueStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3331
		{
			yyVAL.str = IsFalseStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3335
		{
			yyVAL.str = IsNotFalseStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3341
		{
			yyVAL.str = EqualStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.str = LessThanStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3349
		{
			yyVAL.str = GreaterThanStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3353
		{
			yyVAL.str = LessEqualStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3357
		{
			yyVAL.str = GreaterEqualStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3361
		{
			yyVAL.str = NotEqualStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3365
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3369
		{
			yyVAL.str = PosixRegexStr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3373
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3377
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3381
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = nil
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3390
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3396
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3400
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3404
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3410
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3416
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3420
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3430
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3434
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3438
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3442
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3446
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3494
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3498
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3502
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3510
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3514
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3518
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3522
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3526
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3534
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3548
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3552
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3556
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3564
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3572
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3580
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3590
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3594
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3598
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3602
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3620
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 683:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3624
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3628
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 685:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3632
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 686:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3636
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 687:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3640
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3644
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 689:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3648
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3652
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 691:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3656
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 692:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3660
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3664
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3668
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3714
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3746
		{
			yyVAL.str = ""
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3750
		{
			yyVAL.str = BooleanModeStr
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3754
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 713:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3758
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3762
		{
			yyVAL.str = QueryExpansionStr
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3768
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3854
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3858
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3866
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3871
		{
			yyVAL.expr = nil
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3875
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3880
		{
			yyVAL.str = string("")
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3884
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3890
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3894
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3900
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3905
		{
			yyVAL.expr = nil
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3909
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3915
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3919
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3923
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3929
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3935
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3939
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3944
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3949
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3957
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3961
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3965
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3969
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3973
		{
			yyVAL.expr = &NullVal{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3979
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3988
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3992
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3997
		{
			yyVAL.exprs = nil
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4001
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4006
		{
			yyVAL.expr = nil
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4010
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4015
		{
			yyVAL.orderBy = nil
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4019
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4025
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4029
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4035
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4040
		{
			yyVAL.str = AscScr
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4044
		{
			yyVAL.str = AscScr
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4048
		{
			yyVAL.str = DescScr
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4053
		{
			yyVAL.limit = nil
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4057
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4061
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4065
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4070
		{
			yyVAL.str = ""
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4074
		{
			yyVAL.str = ForUpdateStr
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4078
		{
			yyVAL.str = ShareModeStr
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4091
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4095
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4099
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4104
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4108
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 789:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4112
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4119
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4123
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4127
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4131
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4136
		{
			yyVAL.updateExprs = nil
		}
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4140
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4146
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4150
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4156
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4160
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4166
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4172
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4182
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4186
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4192
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4198
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4202
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4208
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4212
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4216
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4221
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4225
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4232
		{
			yyVAL.bytes = []byte("charset")
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4239
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4243
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4247
		{
			yyVAL.expr = &Default{}
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4256
		{
			yyVAL.byt = 0
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4258
		{
			yyVAL.byt = 1
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4261
		{
			yyVAL.empty = struct{}{}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4263
		{
			yyVAL.empty = struct{}{}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4266
		{
			yyVAL.str = ""
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4268
		{
			yyVAL.str = IgnoreStr
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4272
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4274
		{
			yyVAL.empty = struct{}{}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4276
		{
			yyVAL.empty = struct{}{}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4278
		{
			yyVAL.empty = struct{}{}
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4280
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4282
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4284
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4286
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4288
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4290
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4293
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4295
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4297
		{
			yyVAL.empty = struct{}{}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4301
		{
			yyVAL.empty = struct{}{}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4303
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4307
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4311
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4318
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4324
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4328
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4333
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4340
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4346
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4350
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4354
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4360
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4364
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4374
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4378
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4385
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4392
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4396
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4403
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4687
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4696
		{
			decNesting(yylex)
		}
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4701
		{
			forceEOF(yylex)
		}
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4706
		{
			forceEOF(yylex)
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4710
		{
			forceEOF(yylex)
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4714
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
