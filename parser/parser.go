// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXTENSION = 57479
const EXCLUDE = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const STATUS = 57502
const VARIABLES = 57503
const RESTRICT = 57504
const CASCADE = 57505
const NO = 57506
const ACTION = 57507
const PERMISSIVE = 57508
const RESTRICTIVE = 57509
const PUBLIC = 57510
const CURRENT_USER = 57511
const SESSION_USER = 57512
const PAD_INDEX = 57513
const FILLFACTOR = 57514
const IGNORE_DUP_KEY = 57515
const STATISTICS_NORECOMPUTE = 57516
const STATISTICS_INCREMENTAL = 57517
const ALLOW_ROW_LOCKS = 57518
const ALLOW_PAGE_LOCKS = 57519
const DISTANCE = 57520
const M = 57521
const EUCLIDEAN = 57522
const COSINE = 57523
const BEFORE = 57524
const AFTER = 57525
const EACH = 57526
const ROW = 57527
const SCROLL = 57528
const CURSOR = 57529
const OPEN = 57530
const CLOSE = 57531
const FETCH = 57532
const PRIOR = 57533
const FIRST = 57534
const LAST = 57535
const DEALLOCATE = 57536
const INSTEAD = 57537
const OF = 57538
const OUTPUT = 57539
const HANDLER = 57540
const CONTINUE = 57541
const EXIT = 57542
const SQLEXCEPTION = 57543
const SQLWARNING = 57544
const SQLSTATE = 57545
const FOUND = 57546
const DEFERRABLE = 57547
const INITIALLY = 57548
const IMMEDIATE = 57549
const DEFERRED = 57550
const CONCURRENTLY = 57551
const ASYNC = 57552
const SQL = 57553
const SECURITY = 57554
const BEGIN = 57555
const START = 57556
const TRANSACTION = 57557
const COMMIT = 57558
const ROLLBACK = 57559
const BIT = 57560
const TINYINT = 57561
const SMALLINT = 57562
const SMALLSERIAL = 57563
const MEDIUMINT = 57564
const INT = 57565
const INTEGER = 57566
const SERIAL = 57567
const BIGINT = 57568
const BIGSERIAL = 57569
const INTNUM = 57570
const REAL = 57571
const DOUBLE = 57572
const PRECISION = 57573
const FLOAT_TYPE = 57574
const DECIMAL = 57575
const NUMERIC = 57576
const SMALLMONEY = 57577
const MONEY = 57578
const TIME = 57579
const TIMESTAMP = 57580
const DATETIME = 57581
const YEAR = 57582
const DATETIMEOFFSET = 57583
const DATETIME2 = 57584
const SMALLDATETIME = 57585
const CHAR = 57586
const VARCHAR = 57587
const VARYING = 57588
const BOOL = 57589
const CHARACTER = 57590
const VARBINARY = 57591
const NCHAR = 57592
const NVARCHAR = 57593
const NTEXT = 57594
const UUID = 57595
const TEXT = 57596
const TINYTEXT = 57597
const MEDIUMTEXT = 57598
const LONGTEXT = 57599
const CITEXT = 57600
const TSTZRANGE = 57601
const TSRANGE = 57602
const INT4RANGE = 57603
const INT8RANGE = 57604
const NUMRANGE = 57605
const DATERANGE = 57606
const BLOB = 57607
const TINYBLOB = 57608
const MEDIUMBLOB = 57609
const LONGBLOB = 57610
const JSON = 57611
const JSONB = 57612
const ENUM = 57613
const GEOMETRY = 57614
const POINT = 57615
const LINESTRING = 57616
const POLYGON = 57617
const GEOMETRYCOLLECTION = 57618
const MULTIPOINT = 57619
const MULTILINESTRING = 57620
const MULTIPOLYGON = 57621
const VECTOR = 57622
const VARIADIC = 57623
const ARRAY = 57624
const NOW = 57625
const GETDATE = 57626
const BPCHAR = 57627
const TEXT_PATTERN_OPS = 57628
const NULLX = 57629
const AUTO_INCREMENT = 57630
const APPROXNUM = 57631
const SIGNED = 57632
const UNSIGNED = 57633
const ZEROFILL = 57634
const ZONE = 57635
const AUTOINCREMENT = 57636
const DATABASES = 57637
const TABLES = 57638
const VSCHEMA_TABLES = 57639
const EXTENDED = 57640
const FULL = 57641
const PROCESSLIST = 57642
const NAMES = 57643
const CHARSET = 57644
const GLOBAL = 57645
const SESSION = 57646
const ISOLATION = 57647
const LEVEL = 57648
const READ = 57649
const WRITE = 57650
const ONLY = 57651
const REPEATABLE = 57652
const COMMITTED = 57653
const UNCOMMITTED = 57654
const SERIALIZABLE = 57655
const NEW = 57656
const CONCAT_NULL_YIELDS_NULL = 57657
const CURSOR_CLOSE_ON_COMMIT = 57658
const QUOTED_IDENTIFIER = 57659
const ARITHABORT = 57660
const FMTONLY = 57661
const NOCOUNT = 57662
const NOEXEC = 57663
const NUMERIC_ROUNDABORT = 57664
const ANSI_DEFAULTS = 57665
const ANSI_NULL_DFLT_OFF = 57666
const ANSI_NULL_DFLT_ON = 57667
const ANSI_NULLS = 57668
const ANSI_PADDING = 57669
const ANSI_WARNINGS = 57670
const FORCEPLAN = 57671
const SHOWPLAN_ALL = 57672
const SHOWPLAN_TEXT = 57673
const SHOWPLAN_XML = 57674
const IMPLICIT_TRANSACTIONS = 57675
const REMOTE_PROC_TRANSACTIONS = 57676
const XACT_ABORT = 57677
const CURRENT_TIMESTAMP = 57678
const DATABASE = 57679
const CURRENT_DATE = 57680
const CURRENT_TIME = 57681
const LOCALTIME = 57682
const LOCALTIMESTAMP = 57683
const UTC_DATE = 57684
const UTC_TIME = 57685
const UTC_TIMESTAMP = 57686
const REPLACE = 57687
const CONVERT = 57688
const CAST = 57689
const SUBSTR = 57690
const SUBSTRING = 57691
const GROUP_CONCAT = 57692
const SEPARATOR = 57693
const INHERIT = 57694
const LEAD = 57695
const LAG = 57696
const MATCH = 57697
const AGAINST = 57698
const BOOLEAN = 57699
const LANGUAGE = 57700
const WITH = 57701
const WITHOUT = 57702
const PARSER = 57703
const QUERY = 57704
const EXPANSION = 57705
const UNUSED = 57706
const VIRTUAL = 57707
const STORED = 57708
const GENERATED = 57709
const ALWAYS = 57710
const IDENTITY = 57711
const SEQUENCE = 57712
const INCREMENT = 57713
const MINVALUE = 57714
const CACHE = 57715
const CYCLE = 57716
const OWNED = 57717
const NONE = 57718
const CLUSTERED = 57719
const NONCLUSTERED = 57720
const REPLICATION = 57721
const COLUMNSTORE = 57722
const INCLUDE = 57723
const HOLDLOCK = 57724
const NOLOCK = 57725
const NOWAIT = 57726
const PAGLOCK = 57727
const ROWLOCK = 57728
const TABLOCK = 57729
const UPDLOCK = 57730
const READUNCOMMITTED = 57731
const DEFINER = 57732
const INVOKER = 57733
const TYPECAST = 57734
const CHECK = 57735
const OVER = 57736

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"TSTZRANGE",
	"TSRANGE",
	"INT4RANGE",
	"INT8RANGE",
	"NUMRANGE",
	"DATERANGE",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 8,
	138, 562,
	-2, 260,
	-1, 209,
	123, 983,
	-2, 977,
	-1, 210,
	123, 984,
	-2, 897,
	-1, 477,
	123, 987,
	-2, 981,
	-1, 478,
	123, 984,
	-2, 982,
	-1, 515,
	61, 529,
	-2, 526,
	-1, 545,
	123, 985,
	-2, 376,
	-1, 697,
	123, 985,
	-2, 376,
	-1, 718,
	299, 994,
	-2, 885,
	-1, 775,
	299, 994,
	-2, 611,
	-1, 806,
	123, 984,
	-2, 464,
	-1, 812,
	5, 62,
	-2, 23,
	-1, 818,
	5, 62,
	-2, 25,
	-1, 983,
	299, 994,
	-2, 611,
	-1, 1163,
	299, 994,
	-2, 464,
	-1, 1240,
	299, 994,
	-2, 611,
	-1, 1304,
	299, 994,
	-2, 885,
	-1, 1428,
	5, 63,
	-2, 744,
	-1, 1522,
	5, 62,
	-2, 24,
	-1, 1538,
	204, 90,
	-2, 667,
	-1, 1576,
	299, 994,
	-2, 240,
	-1, 1577,
	299, 994,
	-2, 240,
	-1, 1801,
	90, 979,
	-2, 967,
	-1, 1904,
	57, 76,
	59, 76,
	-2, 78,
	-1, 2090,
	5, 62,
	-2, 936,
	-1, 2115,
	5, 62,
	-2, 85,
	-1, 2160,
	59, 1130,
	60, 1130,
	-2, 597,
	-1, 2202,
	5, 63,
	-2, 937,
	-1, 2236,
	5, 62,
	-2, 939,
	-1, 2258,
	5, 63,
	-2, 940,
}

const yyPrivate = 57344

const yyLast = 13312

var yyAct = [...]int16{
	699, 2009, 677, 2108, 918, 2211, 2159, 2153, 2027, 2154,
	39, 39, 709, 42, 2150, 825, 1925, 1034, 195, 2077,
	1255, 2035, 2010, 2113, 205, 206, 1216, 207, 218, 220,
	2100, 1762, 1291, 1990, 1278, 1938, 1937, 919, 1779, 37,
	1795, 1289, 1377, 1913, 1923, 1277, 1292, 680, 803, 1271,
	2003, 1066, 1545, 245, 1770, 1780, 1788, 1333, 1792, 1516,
	1511, 357, 584, 1102, 1336, 1049, 1430, 1540, 1813, 858,
	1335, 1650, 1162, 1138, 507, 1334, 1421, 1092, 761, 1213,
	1093, 1659, 188, 949, 431, 447, 1193, 449, 451, 1115,
	414, 1081, 247, 965, 667, 1038, 650, 516, 511, 1274,
	675, 628, 852, 377, 676, 467, 542, 341, 1190, 627,
	223, 468, 544, 397, 372, 381, 595, 1503, 957, 755,
	551, 592, 416, 571, 1156, 15, 1493, 1275, 888, 1248,
	659, 898, 1687, 1891, 691, 412, 1006, 898, 762, 802,
	476, 658, 660, 1249, 882, 1492, 225, 885, 743, 1009,
	463, 464, 1233, 900, 901, 902, 903, 904, 905, 906,
	44, 883, 884, 881, 907, 908, 909, 910, 887, 886,
	896, 897, 889, 890, 891, 892, 893, 894, 895, 888,
	864, 654, 898, 1373, 209, 746, 212, 517, 518, 226,
	227, 234, 236, 992, 1869, 2259, 251, 251, 251, 251,
	331, 335, 336, 2256, 540, 2191, 2138, 2072, 1724, 1725,
	391, 1382, 887, 886, 896, 897, 889, 890, 891, 892,
	893, 894, 895, 888, 1221, 1222, 898, 596, 597, 1381,
	2109, 39, 1209, 2249, 834, 834, 415, 1759, 2190, 1703,
	374, 369, 370, 368, 195, 2212, 2213, 2214, 2215, 2216,
	2217, 2218, 2219, 307, 307, 307, 307, 186, 183, 1410,
	311, 311, 311, 311, 1852, 756, 310, 310, 310, 310,
	228, 308, 308, 308, 308, 178, 2183, 875, 874, 815,
	653, 1306, 1295, 1294, 891, 892, 893, 894, 895, 888,
	2137, 1682, 898, 1296, 361, 876, 2184, 2185, 179, 2045,
	180, 2126, 184, 185, 2125, 1835, 1297, 2127, 2046, 2047,
	757, 1021, 1939, 337, 1940, 339, 887, 886, 896, 897,
	889, 890, 891, 892, 893, 894, 895, 888, 351, 1020,
	898, 573, 418, 936, 456, 457, 1696, 889, 890, 891,
	892, 893, 894, 895, 888, 409, 425, 898, 432, 39,
	251, 412, 413, 1203, 562, 433, 434, 435, 436, 422,
	1028, 2225, 477, 424, 482, 1685, 495, 496, 794, 793,
	450, 1447, 39, 1445, 2055, 514, 400, 194, 815, 1526,
	1306, 1295, 1294, 36, 338, 510, 517, 518, 475, 2131,
	2130, 407, 1296, 395, 202, 2058, 661, 1791, 2122, 530,
	2059, 396, 1957, 480, 618, 1297, 559, 307, 561, 560,
	472, 503, 877, 565, 311, 1868, 1290, 1870, 487, 874,
	310, 899, 490, 1931, 2056, 308, 1302, 899, 876, 1790,
	44, 1525, 1953, 181, 1270, 1089, 876, 1660, 1661, 1308,
	1309, 821, 822, 1103, 839, 2004, 182, 2233, 1644, 1304,
	44, 524, 515, 870, 393, 604, 851, 867, 635, 662,
	1894, 533, 392, 840, 403, 532, 398, 408, 638, 1966,
	525, 394, 899, 394, 527, 620, 405, 404, 1298, 1299,
	1301, 534, 203, 2073, 1300, 623, 624, 1686, 1719, 629,
	512, 481, 629, 567, 566, 190, 588, 589, 590, 591,
	658, 1061, 39, 1530, 44, 842, 576, 651, 899, 392,
	579, 191, 582, 583, 748, 1290, 899, 553, 1376, 1374,
	1375, 993, 2250, 2146, 2000, 1302, 224, 1063, 745, 332,
	176, 177, 1665, 189, 44, 601, 1423, 834, 1308, 1309,
	432, 647, 1571, 1956, 565, 877, 827, 555, 1304, 1382,
	1424, 1055, 833, 877, 630, 649, 1042, 598, 1202, 612,
	594, 887, 886, 896, 897, 889, 890, 891, 892, 893,
	894, 895, 888, 539, 1402, 898, 1861, 1298, 1299, 1301,
	373, 619, 899, 1300, 887, 886, 896, 897, 889, 890,
	891, 892, 893, 894, 895, 888, 637, 513, 898, 521,
	522, 633, 1530, 204, 853, 853, 805, 1789, 636, 244,
	663, 2136, 428, 2112, 359, 430, 812, 648, 818, 826,
	899, 375, 39, 831, 742, 401, 744, 629, 2111, 765,
	2110, 402, 201, 629, 44, 1307, 841, 899, 2036, 779,
	44, 1422, 782, 200, 747, 785, 786, 39, 553, 342,
	758, 44, 749, 813, 2039, 813, 760, 1059, 1058, 1541,
	1542, 830, 834, 781, 1660, 1661, 651, 886, 896, 897,
	889, 890, 891, 892, 893, 894, 895, 888, 555, 523,
	898, 199, 1840, 878, 233, 2226, 846, 887, 886, 896,
	897, 889, 890, 891, 892, 893, 894, 895, 888, 333,
	334, 898, 875, 874, 410, 217, 411, 1726, 517, 518,
	1572, 1573, 1574, 489, 872, 861, 813, 489, 421, 913,
	876, 427, 235, 817, 429, 828, 863, 231, 829, 824,
	406, 1639, 1234, 219, 1307, 1371, 832, 239, 241, 1370,
	804, 1056, 835, 843, 639, 240, 492, 439, 440, 441,
	442, 443, 826, 1749, 444, 855, 393, 2205, 868, 922,
	923, 1082, 1083, 251, 446, 2028, 2030, 990, 44, 917,
	1236, 198, 1035, 2075, 1942, 394, 937, 788, 1736, 39,
	1237, 500, 837, 836, 1528, 940, 875, 874, 939, 778,
	970, 2040, 2038, 2037, 621, 626, 44, 420, 197, 488,
	805, 1025, 419, 350, 876, 499, 328, 329, 330, 348,
	805, 826, 651, 875, 874, 1730, 1001, 878, 1015, 1863,
	307, 1040, 498, 988, 1705, 971, 1032, 311, 1732, 343,
	344, 876, 2128, 310, 2098, 629, 789, 877, 308, 1060,
	1941, 986, 345, 1062, 1016, 959, 960, 961, 962, 963,
	964, 651, 878, 2029, 1396, 1008, 1013, 1014, 813, 1395,
	1033, 859, 860, 862, 553, 899, 997, 1095, 756, 186,
	183, 745, 651, 393, 756, 1017, 674, 1019, 1727, 385,
	578, 384, 1898, 388, 389, 392, 1394, 178, 899, 1751,
	1393, 386, 394, 44, 1116, 238, 1392, 887, 886, 896,
	897, 889, 890, 891, 892, 893, 894, 895, 888, 855,
	179, 898, 180, 757, 184, 185, 369, 1455, 1144, 757,
	1100, 877, 1899, 1153, 1153, 1150, 1873, 586, 585, 1117,
	1750, 1391, 1155, 1086, 804, 1052, 1057, 1390, 1090, 1024,
	39, 39, 875, 874, 804, 1389, 1084, 1080, 877, 1031,
	875, 874, 369, 477, 1195, 1388, 813, 970, 875, 874,
	876, 1194, 813, 878, 1464, 1096, 1707, 813, 876, 1099,
	899, 875, 874, 1387, 1385, 237, 876, 1272, 1091, 1157,
	1158, 1194, 875, 874, 44, 1087, 222, 509, 1217, 876,
	355, 899, 971, 1142, 353, 998, 546, 547, 549, 352,
	876, 1176, 347, 509, 552, 550, 563, 564, 1169, 1486,
	509, 1088, 1235, 1521, 1167, 917, 770, 772, 1867, 1168,
	1651, 1159, 1160, 1151, 1154, 529, 1856, 1189, 875, 874,
	805, 805, 390, 1855, 508, 1728, 1729, 1731, 1733, 1734,
	1708, 1652, 548, 1217, 643, 181, 876, 641, 1437, 2182,
	1436, 1273, 520, 1085, 644, 1312, 44, 642, 182, 509,
	1122, 1849, 1211, 1118, 1214, 1215, 221, 13, 1662, 1269,
	875, 874, 875, 874, 1120, 1121, 1119, 877, 1259, 528,
	1241, 1431, 1242, 1432, 1433, 877, 44, 1229, 876, 1653,
	876, 1651, 1227, 877, 1805, 1187, 1188, 581, 651, 991,
	1974, 580, 878, 1004, 1672, 1671, 877, 932, 577, 854,
	856, 1649, 1652, 1476, 1225, 1670, 1379, 877, 875, 874,
	1212, 815, 8, 11, 12, 1845, 763, 764, 9, 10,
	1946, 1475, 1116, 1474, 1847, 878, 876, 1411, 1412, 1413,
	938, 1473, 176, 177, 1472, 387, 1405, 887, 886, 896,
	897, 889, 890, 891, 892, 893, 894, 895, 888, 1471,
	44, 898, 1945, 877, 804, 804, 878, 1117, 1470, 1250,
	1251, 1386, 1469, 520, 1003, 577, 215, 1397, 212, 577,
	887, 886, 896, 897, 889, 890, 891, 892, 893, 894,
	895, 888, 1023, 1022, 898, 1107, 1109, 1110, 995, 602,
	600, 899, 599, 1108, 570, 877, 2121, 877, 1139, 1417,
	1140, 887, 886, 896, 897, 889, 890, 891, 892, 893,
	894, 895, 888, 1018, 44, 898, 1236, 934, 2120, 422,
	933, 937, 554, 562, 933, 1235, 520, 44, 39, 625,
	44, 938, 497, 769, 768, 767, 645, 805, 651, 186,
	183, 477, 593, 877, 1443, 574, 1442, 535, 1444, 520,
	1383, 1035, 44, 854, 519, 1519, 458, 178, 1050, 878,
	1461, 44, 1143, 1522, 2243, 2242, 1518, 1157, 787, 1463,
	1050, 2241, 878, 1484, 741, 559, 740, 561, 560, 739,
	179, 738, 180, 664, 184, 185, 1502, 1538, 575, 1567,
	1568, 1569, 813, 526, 1576, 2143, 878, 1532, 1482, 2228,
	813, 2178, 878, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
	1312, 1509, 1520, 651, 651, 1500, 1531, 1499, 1496, 1645,
	1491, 804, 1508, 1648, 1497, 1498, 1501, 1494, 1578, 1534,
	1535, 1536, 1976, 1543, 2204, 878, 1482, 2139, 850, 2062,
	1910, 878, 1529, 1673, 1975, 651, 850, 1959, 1217, 850,
	1958, 750, 44, 700, 1152, 698, 702, 703, 704, 705,
	1854, 1640, 1641, 701, 706, 181, 1907, 1818, 815, 1050,
	1880, 766, 1739, 1647, 1678, 1482, 1832, 1718, 182, 850,
	1830, 815, 775, 776, 777, 1401, 1829, 1826, 1825, 850,
	1820, 899, 1680, 1675, 1717, 2088, 850, 1819, 850, 1740,
	2089, 1654, 1655, 1656, 1657, 1658, 1712, 1713, 1666, 1667,
	1677, 1991, 1908, 2235, 489, 1710, 1711, 1716, 1664, 1704,
	520, 1674, 1669, 1720, 899, 850, 1676, 2007, 816, 489,
	816, 1230, 878, 520, 1176, 1681, 1482, 1481, 850, 1408,
	1715, 1169, 1401, 1400, 850, 1254, 826, 1167, 1714, 1689,
	1688, 1693, 1168, 1176, 1709, 899, 1050, 1253, 1668, 2097,
	1169, 1743, 176, 177, 2151, 1695, 1167, 2097, 1698, 1991,
	1697, 1168, 1050, 1220, 1148, 878, 850, 1101, 869, 1754,
	850, 849, 798, 797, 39, 791, 792, 912, 914, 915,
	916, 920, 1909, 1768, 791, 790, 243, 242, 925, 925,
	925, 925, 925, 925, 925, 1580, 1772, 1524, 1771, 1482,
	2097, 1806, 1504, 1507, 1506, 1489, 775, 1230, 1910, 1773,
	1035, 1778, 1488, 1798, 1783, 1252, 1245, 941, 942, 943,
	944, 945, 946, 947, 948, 1244, 951, 1777, 953, 954,
	955, 956, 958, 958, 958, 958, 958, 958, 958, 1753,
	982, 983, 984, 985, 1814, 1814, 1804, 1775, 1738, 1910,
	1439, 1440, 1243, 1441, 1230, 1761, 1746, 1459, 1457, 1409,
	1765, 1446, 1226, 1448, 1449, 1450, 1744, 1745, 1451, 1452,
	1027, 1453, 1454, 651, 651, 1816, 1815, 1310, 1005, 999,
	617, 1051, 996, 795, 1763, 784, 1764, 783, 780, 1529,
	1843, 878, 896, 897, 889, 890, 891, 892, 893, 894,
	895, 888, 2200, 632, 898, 1458, 1456, 1915, 1918, 1919,
	1920, 1916, 775, 1917, 1921, 617, 616, 2101, 2102, 617,
	491, 1821, 1822, 816, 232, 229, 815, 230, 230, 1148,
	1910, 1482, 2044, 1811, 1934, 1786, 887, 886, 896, 897,
	889, 890, 891, 892, 893, 894, 895, 888, 1752, 1230,
	898, 489, 1833, 1915, 1918, 1919, 1920, 1916, 1438, 1917,
	1921, 1050, 850, 994, 796, 866, 865, 39, 489, 800,
	799, 1827, 1828, 520, 2173, 2171, 2134, 1977, 520, 2101,
	2102, 2151, 422, 1874, 1836, 1823, 448, 925, 925, 1643,
	925, 925, 925, 925, 925, 925, 925, 925, 925, 925,
	925, 925, 925, 925, 925, 1642, 830, 1505, 1468, 452,
	1407, 1404, 1510, 1403, 1879, 1858, 1372, 1930, 1247, 251,
	1884, 816, 1859, 1860, 39, 1246, 1224, 920, 1210, 1209,
	1208, 1944, 920, 1207, 1206, 1205, 1900, 1204, 1097, 1054,
	1030, 1029, 1888, 987, 871, 1889, 811, 210, 810, 1312,
	809, 774, 773, 771, 651, 1961, 813, 43, 43, 1896,
	751, 665, 1783, 1798, 605, 196, 1890, 541, 1905, 537,
	1922, 506, 1932, 216, 1950, 445, 307, 1862, 1864, 1865,
	1866, 438, 1935, 311, 1929, 453, 454, 1877, 1948, 310,
	437, 426, 1881, 1882, 308, 1218, 1952, 17, 622, 1897,
	1378, 2104, 1960, 1485, 1965, 801, 640, 607, 1962, 606,
	460, 459, 364, 346, 340, 192, 2021, 2229, 1757, 1529,
	1893, 2022, 1240, 1529, 1764, 2019, 2023, 2107, 1919, 1920,
	2020, 2106, 1763, 2018, 2017, 1264, 1265, 2189, 1989, 1885,
	369, 952, 2011, 1260, 505, 1512, 1947, 587, 754, 1984,
	2198, 1949, 1082, 1083, 486, 485, 1988, 484, 474, 1150,
	1513, 1996, 366, 365, 2041, 39, 1679, 1790, 1268, 1261,
	1763, 753, 1262, 39, 1773, 615, 1999, 1963, 613, 2012,
	1217, 2008, 2015, 1997, 1783, 2006, 611, 349, 1783, 1783,
	1783, 1783, 1783, 1191, 899, 2024, 813, 2013, 2014, 2033,
	2016, 1933, 1783, 2043, 1798, 2042, 2053, 1817, 1217, 1196,
	1048, 1978, 2051, 1979, 820, 657, 1256, 2196, 1982, 925,
	925, 925, 1871, 1257, 1035, 2195, 925, 925, 925, 925,
	2145, 1504, 1810, 1809, 2074, 1808, 2052, 2064, 2090, 1044,
	899, 1045, 1046, 1047, 469, 470, 471, 2251, 1807, 1399,
	1994, 1723, 1722, 1748, 1043, 1529, 656, 655, 1893, 2079,
	2080, 1741, 2114, 35, 1240, 1398, 2082, 1747, 2115, 1783,
	925, 216, 531, 2096, 187, 813, 2105, 216, 43, 1037,
	216, 216, 2094, 1039, 1906, 1783, 838, 216, 1053, 14,
	1, 196, 1544, 19, 18, 2076, 462, 1429, 935, 695,
	2057, 1955, 678, 2210, 2116, 813, 39, 2034, 1893, 1539,
	2123, 1787, 1537, 1570, 1663, 569, 399, 2129, 1785, 369,
	2152, 2011, 2161, 2114, 2142, 1487, 2157, 538, 369, 21,
	2011, 1758, 2155, 2132, 2133, 2162, 1928, 1523, 2081, 819,
	614, 2165, 1646, 1064, 213, 2140, 2164, 382, 2041, 1772,
	2168, 1771, 371, 1764, 2093, 1011, 2095, 845, 501, 1994,
	193, 1773, 1773, 813, 16, 1217, 1384, 816, 383, 2179,
	2148, 2149, 215, 380, 212, 816, 379, 1439, 378, 1446,
	216, 376, 572, 417, 423, 216, 256, 216, 216, 258,
	257, 2188, 2118, 2193, 216, 255, 478, 2199, 216, 216,
	254, 250, 826, 248, 216, 826, 826, 826, 216, 2224,
	1577, 216, 216, 1763, 2147, 2208, 2207, 2209, 249, 43,
	2220, 2221, 2222, 246, 2223, 815, 1793, 1306, 1295, 1294,
	1943, 634, 1232, 911, 1831, 2161, 2239, 2124, 2236, 1296,
	2234, 2238, 2166, 2155, 2167, 186, 183, 1800, 2162, 2181,
	2158, 1515, 1297, 2194, 2144, 1462, 216, 1192, 679, 2240,
	216, 1106, 2247, 178, 2231, 694, 693, 692, 2087, 880,
	1782, 1901, 2253, 2252, 1914, 813, 1912, 1911, 2155, 2254,
	1926, 2255, 369, 2257, 2011, 2103, 179, 1893, 180, 2099,
	184, 185, 1781, 1851, 2071, 1263, 1876, 1756, 1878, 1303,
	1293, 216, 1036, 1266, 1883, 1529, 216, 216, 216, 813,
	7, 1305, 1288, 6, 5, 707, 4, 873, 3, 1287,
	1286, 1285, 1284, 1282, 1283, 1280, 1281, 1279, 1258, 925,
	925, 814, 2, 0, 0, 1928, 0, 216, 0, 1529,
	211, 214, 354, 0, 0, 1994, 0, 0, 358, 43,
	0, 358, 362, 0, 652, 1764, 0, 0, 367, 0,
	0, 0, 1290, 925, 925, 925, 925, 0, 0, 0,
	0, 215, 1302, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1764, 1308, 1309, 0, 1964, 0,
	0, 216, 0, 0, 0, 1304, 0, 0, 0, 0,
	1735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 0, 0, 44,
	0, 181, 0, 0, 1298, 1299, 1301, 0, 0, 0,
	1300, 0, 0, 0, 182, 1985, 0, 0, 0, 1986,
	1987, 0, 0, 1784, 186, 183, 0, 520, 0, 1530,
	215, 455, 212, 806, 216, 216, 461, 0, 465, 466,
	0, 0, 178, 0, 216, 473, 0, 0, 0, 43,
	483, 0, 0, 0, 0, 358, 0, 0, 0, 358,
	0, 0, 493, 494, 0, 179, 0, 180, 216, 184,
	185, 0, 186, 183, 43, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 652, 0, 653, 2060, 2061, 176, 177,
	0, 0, 0, 186, 183, 0, 0, 536, 0, 0,
	0, 0, 0, 179, 0, 180, 0, 184, 185, 214,
	815, 178, 1306, 1295, 1294, 214, 0, 0, 214, 214,
	0, 0, 1824, 0, 1296, 214, 211, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 180, 1297, 184, 185,
	0, 0, 603, 0, 0, 0, 0, 608, 609, 610,
	0, 1307, 0, 0, 0, 0, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 815, 0, 1306, 1295, 1294, 0, 0, 631, 0,
	1850, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	181, 0, 1767, 0, 0, 0, 43, 1311, 1297, 0,
	0, 2197, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 806, 214, 216,
	0, 0, 0, 214, 0, 214, 214, 806, 0, 652,
	0, 0, 214, 0, 479, 216, 479, 214, 181, 0,
	0, 0, 214, 0, 0, 666, 214, 1290, 0, 214,
	214, 182, 0, 2054, 669, 0, 0, 1302, 0, 0,
	0, 1924, 0, 752, 0, 0, 0, 0, 652, 181,
	1308, 1309, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 182, 0, 0, 0, 0, 176, 177, 652,
	0, 0, 0, 0, 214, 807, 808, 0, 568, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 1290, 1298,
	1299, 1301, 0, 0, 0, 1300, 0, 925, 1302, 0,
	925, 0, 925, 0, 925, 0, 925, 925, 0, 844,
	0, 1308, 1309, 0, 1530, 176, 177, 0, 0, 214,
	0, 1304, 0, 0, 214, 214, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 43, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 0,
	1298, 1299, 1301, 0, 0, 214, 1300, 0, 0, 0,
	857, 0, 0, 1784, 0, 0, 0, 1784, 1784, 1784,
	1784, 1784, 0, 0, 879, 0, 0, 0, 0, 0,
	921, 1924, 0, 2031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 815, 0, 1306, 1295, 1294, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 1296, 806, 806, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1307, 0, 1784, 0,
	0, 0, 1332, 1067, 0, 0, 989, 1079, 0, 0,
	2091, 2092, 0, 0, 1784, 0, 0, 1069, 0, 0,
	1026, 568, 214, 214, 0, 0, 0, 815, 0, 1306,
	1295, 1294, 214, 0, 0, 0, 1041, 0, 0, 0,
	816, 1296, 0, 0, 2002, 652, 1766, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 214, 1307, 0, 978,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	0, 0, 0, 0, 975, 974, 0, 0, 980, 1141,
	969, 0, 0, 0, 0, 977, 976, 0, 259, 967,
	0, 0, 0, 0, 973, 972, 2156, 1068, 816, 1290,
	0, 0, 0, 0, 0, 0, 0, 2001, 0, 1302,
	0, 0, 0, 0, 0, 0, 0, 2174, 2175, 2176,
	0, 1094, 1308, 1309, 0, 1098, 0, 0, 0, 0,
	1104, 1105, 1304, 0, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 1299, 1301, 1290, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 1302, 0, 921, 0, 0, 0,
	0, 921, 0, 0, 1002, 478, 0, 1308, 1309, 0,
	0, 1012, 1012, 1012, 806, 652, 0, 1304, 260, 1161,
	1186, 0, 0, 0, 0, 0, 0, 2156, 0, 815,
	2237, 1306, 1295, 1294, 0, 568, 0, 214, 0, 0,
	0, 0, 0, 1296, 0, 568, 1298, 1299, 1301, 0,
	0, 0, 1300, 214, 0, 0, 1297, 0, 0, 0,
	0, 0, 2156, 0, 816, 0, 0, 0, 1223, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 216, 0,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1307, 0,
	652, 652, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 1145, 1146, 1147, 1149, 0, 815,
	0, 1306, 1295, 1294, 0, 0, 1290, 0, 0, 0,
	0, 0, 652, 1296, 0, 479, 1302, 1012, 1012, 0,
	0, 1012, 1012, 1012, 0, 0, 1297, 211, 2001, 1308,
	1309, 1197, 1198, 1199, 1200, 0, 1201, 0, 0, 1304,
	0, 0, 0, 1307, 0, 0, 0, 0, 1067, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 1012, 1012,
	1012, 1012, 1069, 0, 1427, 0, 0, 1219, 1298, 1299,
	1301, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 1228, 0, 1231, 0, 0, 0,
	0, 1238, 1239, 1995, 0, 815, 0, 1306, 1295, 1294,
	0, 0, 0, 0, 0, 568, 568, 0, 0, 1296,
	1465, 0, 0, 0, 0, 0, 0, 215, 1267, 212,
	0, 0, 1297, 0, 0, 0, 924, 926, 927, 928,
	929, 930, 931, 0, 1483, 0, 1290, 0, 0, 0,
	0, 0, 1068, 216, 216, 0, 1302, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 1308,
	1309, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 1514, 1517, 0, 0, 1406, 0, 0, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1527, 1579,
	186, 183, 0, 0, 0, 0, 0, 0, 1298, 1299,
	1301, 0, 0, 0, 1300, 0, 1533, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1575, 0,
	950, 1425, 1426, 1530, 0, 1307, 0, 0, 1428, 0,
	0, 179, 1290, 180, 0, 184, 185, 1434, 1435, 0,
	0, 0, 1302, 0, 0, 0, 0, 0, 0, 0,
	652, 652, 1902, 0, 0, 1308, 1309, 0, 0, 0,
	0, 0, 0, 0, 0, 1304, 1012, 1460, 0, 0,
	0, 0, 1467, 1466, 0, 2187, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 212, 0, 0, 1477,
	1478, 0, 1479, 1480, 1298, 1299, 1301, 0, 0, 0,
	1300, 1776, 0, 0, 0, 0, 1012, 1490, 0, 0,
	0, 0, 0, 479, 0, 0, 1012, 1094, 0, 1094,
	0, 0, 568, 0, 0, 1111, 0, 216, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 215, 43, 212, 0, 0, 0, 0,
	0, 215, 0, 212, 1694, 1307, 0, 186, 183, 0,
	0, 0, 0, 0, 0, 0, 181, 1380, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 182,
	1706, 0, 0, 216, 216, 0, 214, 0, 0, 0,
	0, 0, 216, 216, 0, 0, 0, 0, 179, 0,
	180, 43, 184, 185, 0, 1528, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 186, 183, 0, 360,
	1742, 0, 0, 0, 186, 183, 1332, 0, 0, 0,
	0, 652, 0, 0, 178, 0, 0, 0, 0, 0,
	1760, 0, 178, 0, 0, 0, 0, 0, 0, 1980,
	0, 1307, 0, 0, 0, 0, 0, 179, 0, 180,
	0, 184, 185, 176, 177, 179, 0, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 921, 0, 0, 0, 0, 0, 0,
	0, 1892, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 216, 0, 0, 0, 216, 216,
	216, 216, 216, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 216, 181, 0, 0, 216, 0, 0, 0,
	0, 0, 43, 215, 0, 212, 182, 0, 0, 0,
	43, 0, 0, 0, 0, 0, 0, 1414, 1415, 1416,
	0, 1721, 0, 0, 0, 1418, 1419, 1420, 0, 34,
	0, 0, 0, 0, 216, 0, 0, 1737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 1755, 1857, 216,
	181, 0, 0, 0, 0, 182, 0, 0, 924, 0,
	0, 214, 214, 182, 0, 216, 186, 183, 0, 0,
	0, 0, 0, 1853, 0, 0, 27, 29, 0, 22,
	176, 177, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 23, 0, 28, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 1903, 1904, 0, 179, 0, 180,
	0, 184, 185, 0, 24, 25, 1886, 1887, 1517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 176,
	177, 0, 0, 0, 0, 0, 0, 176, 177, 2163,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1837, 0, 0,
	0, 1838, 1839, 0, 0, 0, 1841, 1842, 1844, 1846,
	1848, 2005, 0, 0, 0, 216, 0, 20, 0, 0,
	0, 0, 181, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 1992, 363, 0,
	0, 0, 2163, 1872, 0, 0, 0, 0, 0, 759,
	0, 0, 209, 0, 545, 546, 547, 549, 0, 0,
	0, 0, 1012, 552, 550, 563, 564, 209, 0, 212,
	0, 0, 0, 0, 0, 2065, 0, 0, 0, 0,
	0, 214, 214, 0, 0, 0, 0, 2050, 0, 0,
	214, 1927, 0, 0, 0, 0, 0, 1683, 1684, 0,
	0, 548, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 31, 0, 33, 0, 176,
	177, 0, 0, 1951, 0, 186, 183, 0, 2078, 0,
	0, 1699, 1700, 1701, 1702, 0, 0, 0, 0, 0,
	186, 183, 0, 178, 2085, 0, 2086, 0, 0, 208,
	0, 0, 556, 0, 0, 0, 0, 0, 178, 1973,
	0, 0, 0, 0, 0, 0, 179, 215, 180, 212,
	184, 185, 0, 0, 0, 0, 0, 1981, 0, 0,
	0, 179, 1983, 180, 0, 184, 185, 0, 0, 0,
	543, 0, 0, 209, 0, 545, 546, 547, 549, 0,
	0, 0, 0, 0, 552, 550, 563, 564, 214, 0,
	0, 0, 214, 0, 0, 211, 214, 214, 214, 214,
	214, 0, 0, 0, 0, 0, 0, 0, 2025, 0,
	214, 2026, 198, 0, 2032, 0, 0, 0, 0, 0,
	186, 183, 548, 356, 2169, 557, 558, 2170, 0, 0,
	2172, 0, 0, 0, 0, 0, 0, 44, 178, 197,
	0, 0, 0, 0, 0, 0, 186, 183, 0, 2063,
	0, 0, 214, 0, 2186, 2066, 2067, 2068, 2069, 2070,
	0, 179, 0, 180, 178, 184, 185, 0, 0, 2078,
	0, 554, 562, 556, 0, 0, 0, 214, 0, 0,
	0, 181, 921, 0, 0, 0, 0, 179, 0, 180,
	0, 184, 185, 214, 182, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	186, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2230, 921, 0, 559, 0, 561, 560, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 1834, 0, 0,
	0, 567, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 180, 0, 184, 185, 0, 0, 2135,
	209, 0, 212, 0, 2141, 0, 557, 558, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 176, 177,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 181, 215, 0, 212,
	0, 2177, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 554, 562, 0, 0, 1954, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	2192, 0, 0, 186, 183, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 2201, 2202, 2203, 0, 0, 0,
	0, 178, 2206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1927, 0, 559, 0, 561, 560, 0,
	186, 183, 0, 0, 179, 0, 180, 0, 184, 185,
	0, 0, 567, 566, 0, 0, 181, 0, 178, 0,
	0, 0, 0, 176, 177, 1967, 0, 0, 1968, 182,
	1969, 0, 1970, 0, 1971, 1972, 0, 0, 2244, 2245,
	2246, 179, 0, 180, 0, 184, 185, 0, 0, 176,
	177, 0, 0, 0, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 211, 94, 75,
	0, 2258, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 0, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 0, 0,
	44, 0, 0, 176, 177, 0, 0, 0, 0, 0,
	0, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 181,
	815, 0, 1306, 1295, 1294, 0, 112, 117, 141, 105,
	0, 0, 182, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 0, 1297, 61, 55,
	0, 110, 0, 0, 0, 64, 181, 82, 142, 0,
	45, 0, 0, 186, 183, 148, 155, 107, 0, 182,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 875, 874, 87, 88, 123, 137, 0,
	0, 1769, 0, 0, 179, 144, 180, 0, 184, 185,
	0, 876, 0, 0, 0, 0, 176, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 0, 1290, 0, 0,
	0, 1794, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 1309, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 1802, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 0, 0, 0, 1298,
	1299, 1301, 0, 0, 0, 1300, 0, 0, 877, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 1774, 0, 0, 1803, 1801, 1797,
	1796, 0, 182, 0, 0, 132, 0, 0, 0, 0,
	1799, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 0, 1307, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 815, 0, 1306, 1295, 1294, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	1297, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 186, 183, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 41, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 875, 874, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 184, 185, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 1936, 0, 0, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 0, 0, 0, 1802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1298, 1299, 1301, 0, 0, 0, 1300, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 1774, 0, 0,
	0, 1803, 1801, 0, 0, 0, 182, 0, 0, 132,
	0, 0, 0, 0, 1799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 1307,
	0, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 815, 0, 1306,
	1295, 1294, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 1297, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 186, 183, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	875, 874, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 0, 179, 144, 180, 0, 184, 185, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 1802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 1299, 1301, 0,
	0, 0, 1300, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 1812, 0, 0, 0, 1803, 1801, 0, 0, 0,
	182, 0, 0, 132, 0, 0, 0, 0, 1799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 288, 0, 170,
	0, 126, 0, 1307, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 209, 0, 212, 253, 0, 252, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	141, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 81, 0, 124, 0, 0, 0,
	61, 55, 0, 110, 267, 0, 297, 64, 0, 82,
	142, 0, 45, 0, 0, 186, 183, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 41, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 289, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 0, 179, 144, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 309, 0, 323, 324, 325, 327, 326, 290, 291,
	292, 296, 294, 293, 295, 261, 263, 0, 259, 262,
	268, 264, 265, 266, 280, 269, 270, 271, 272, 273,
	282, 281, 283, 284, 285, 286, 274, 275, 276, 277,
	278, 279, 287, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 182, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 260, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 0, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 0, 0, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 44, 0, 847, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 815, 0, 1306, 1295, 1294,
	0, 0, 112, 117, 141, 105, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	124, 0, 1297, 0, 61, 55, 0, 110, 966, 0,
	981, 64, 0, 82, 142, 0, 45, 0, 0, 186,
	183, 148, 155, 107, 0, 0, 159, 104, 103, 0,
	0, 0, 0, 0, 0, 96, 41, 178, 173, 0,
	0, 162, 114, 153, 79, 90, 0, 86, 0, 968,
	0, 87, 88, 123, 137, 0, 0, 2180, 0, 0,
	179, 144, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 46, 83, 146, 149, 69,
	133, 58, 92, 139, 93, 115, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 978, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 0, 0, 1308, 1309, 0, 975, 974,
	0, 0, 980, 979, 969, 1304, 0, 0, 0, 977,
	976, 0, 259, 967, 0, 0, 0, 0, 973, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 1299, 1301, 0, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 181, 52, 73, 156, 1276,
	0, 0, 0, 0, 40, 0, 0, 0, 182, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 72,
	66, 67, 119, 120, 167, 168, 169, 143, 63, 0,
	70, 71, 0, 151, 0, 0, 0, 122, 0, 0,
	0, 174, 260, 0, 0, 0, 0, 0, 0, 98,
	47, 102, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 106, 101, 127, 129, 138, 147, 157,
	164, 140, 176, 177, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 1307, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 502, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	504, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 815,
	0, 1306, 1295, 1294, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 1297, 0, 61, 55,
	0, 110, 0, 0, 0, 64, 0, 82, 142, 0,
	45, 0, 0, 186, 183, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 875, 874, 0, 87, 88, 123, 137, 0,
	0, 0, 0, 0, 179, 144, 180, 0, 184, 185,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	1309, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1298, 1299,
	1301, 0, 0, 0, 1300, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 1774, 0, 0, 0, 0, 40, 0,
	0, 0, 182, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 1307, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 0, 815, 0, 1306, 1295, 1294, 0,
	112, 117, 141, 105, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 0, 1875, 0, 81, 0, 124, 0,
	0, 1297, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 186, 183, 148,
	155, 107, 0, 0, 159, 104, 103, 2117, 0, 0,
	0, 0, 0, 96, 41, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 0, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1309, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 1299, 1301, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 0, 2119, 0,
	0, 0, 40, 0, 0, 0, 182, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 0,
	1307, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 209, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 815, 0, 1306,
	1295, 1294, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 1297, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 186, 183, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 2083,
	2084, 0, 179, 144, 180, 0, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 1299, 1301, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	182, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 1307, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 646, 815, 0, 1306, 1295, 1294, 0, 112, 117,
	141, 105, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 124, 0, 0, 1297,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 186, 183, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 41, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 2248, 0, 179, 144, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 1299, 1301, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 182, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 38, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 0, 1307, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 815, 0, 1306, 1295, 1294,
	0, 0, 112, 117, 141, 105, 0, 0, 0, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	124, 0, 1297, 0, 61, 55, 0, 110, 0, 0,
	0, 64, 0, 82, 142, 0, 45, 0, 0, 186,
	183, 148, 155, 107, 0, 0, 159, 104, 103, 0,
	0, 0, 0, 0, 0, 96, 41, 178, 173, 0,
	0, 162, 114, 153, 79, 90, 0, 86, 0, 0,
	0, 87, 88, 123, 137, 0, 0, 2232, 0, 0,
	179, 144, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 46, 83, 146, 149, 69,
	133, 58, 92, 139, 93, 115, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 0, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 1299, 1301, 0, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 181, 52, 73, 156, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 182, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 72,
	66, 67, 119, 120, 167, 168, 169, 143, 63, 0,
	70, 71, 0, 151, 0, 0, 0, 122, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 98,
	47, 102, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 106, 101, 127, 129, 138, 147, 157,
	164, 140, 176, 177, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 1307, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 815,
	0, 1306, 1295, 1294, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 1296, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 1297, 0, 61, 55,
	0, 110, 0, 0, 0, 64, 0, 82, 142, 0,
	45, 0, 0, 186, 183, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 0, 0, 87, 88, 123, 137, 0,
	0, 2227, 0, 0, 179, 144, 180, 0, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	1309, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1298, 1299,
	1301, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 182, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 2160,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 1307, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 520, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 815, 0, 1306, 1295, 1294, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	1297, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 186, 183, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 0, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 0, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1298, 1299, 1301, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 1276, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 1307,
	0, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 215, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 815, 0, 1306,
	1295, 1294, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 1296, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 1297, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 186, 183, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 0, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 0, 179, 144, 180, 0, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 1299, 1301, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 1774, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 1307, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	141, 105, 0, 0, 1690, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 124, 0, 0, 0,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 186, 183, 148, 155, 107,
	0, 0, 159, 104, 103, 1691, 0, 0, 0, 0,
	0, 96, 0, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 0, 179, 144, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 1170, 0, 323, 324, 325, 327, 326, 1692, 0,
	1166, 0, 1178, 1177, 1179, 1164, 1181, 0, 0, 0,
	1185, 1182, 1184, 1183, 0, 1180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1171, 1172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1173, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 815, 0, 1306, 1295,
	1294, 0, 0, 0, 182, 0, 0, 132, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 672, 0, 59, 60, 0, 1993, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	671, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 719, 0, 720, 0, 0, 0, 0, 0,
	0, 0, 710, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 520, 0, 0, 209, 700, 697, 698, 702,
	703, 704, 705, 1290, 0, 0, 701, 706, 563, 564,
	673, 0, 0, 1302, 0, 668, 686, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 1308, 1309, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 683, 684, 0, 0, 0, 0, 735,
	0, 685, 0, 0, 1163, 682, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 1299, 1301, 186, 183,
	815, 1300, 1306, 1295, 1294, 0, 0, 733, 815, 0,
	1306, 1295, 1294, 0, 1296, 0, 178, 0, 0, 0,
	0, 0, 1296, 0, 0, 1165, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 179,
	0, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1895, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 0,
	322, 1170, 0, 323, 324, 325, 327, 326, 1174, 690,
	1166, 0, 1178, 1177, 1179, 1164, 1181, 0, 0, 0,
	1185, 1182, 1184, 1183, 721, 1180, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 1302, 0, 0,
	1171, 1172, 1307, 0, 0, 1302, 0, 0, 0, 0,
	1308, 1309, 737, 0, 722, 723, 0, 0, 1308, 1309,
	1304, 1173, 1175, 0, 181, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 1298,
	1299, 1301, 0, 0, 0, 1300, 0, 1298, 1299, 1301,
	0, 0, 0, 1300, 0, 0, 0, 724, 734, 730,
	731, 728, 729, 727, 726, 725, 736, 712, 713, 714,
	715, 717, 1364, 0, 567, 566, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	1326, 0, 44, 0, 1325, 0, 1328, 1329, 1330, 1331,
	0, 176, 177, 732, 1347, 0, 0, 0, 0, 0,
	1350, 1349, 1348, 0, 0, 1354, 1355, 1356, 1357, 1359,
	1358, 1322, 1323, 1324, 0, 0, 0, 0, 1352, 1353,
	0, 1351, 0, 0, 0, 0, 1319, 1318, 0, 0,
	1313, 1314, 1315, 1316, 0, 1317, 0, 1320, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 1366, 0, 1365, 1369, 0,
	0, 0, 0, 178, 0, 0, 1307, 1367, 0, 0,
	0, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 0, 322, 0, 672,
	323, 324, 325, 327, 326, 0, 0, 0, 0, 0,
	0, 0, 1343, 1342, 0, 0, 671, 0, 0, 0,
	0, 670, 1337, 1344, 1345, 1346, 0, 0, 719, 0,
	720, 0, 0, 1338, 1339, 1340, 1341, 0, 710, 711,
	0, 0, 0, 0, 0, 0, 2048, 0, 520, 0,
	0, 209, 700, 697, 698, 702, 703, 704, 705, 0,
	0, 181, 701, 706, 563, 564, 673, 2049, 0, 0,
	0, 668, 686, 0, 182, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	684, 0, 0, 0, 0, 735, 0, 685, 0, 0,
	681, 682, 687, 0, 1361, 1360, 1362, 1363, 0, 0,
	0, 0, 0, 0, 186, 183, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 1368, 0, 0, 0, 179, 0, 180, 0, 184,
	185, 0, 0, 0, 0, 0, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 690, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	722, 723, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 734, 730, 731, 728, 729, 727,
	726, 725, 736, 712, 713, 714, 715, 717, 0, 0,
	567, 566, 716, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 0,
	671, 0, 0, 0, 0, 670, 0, 0, 0, 0,
	0, 0, 719, 0, 720, 0, 0, 176, 177, 732,
	0, 0, 710, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 520, 0, 0, 209, 700, 697, 698, 702,
	703, 704, 705, 0, 0, 0, 701, 706, 563, 564,
	673, 0, 0, 0, 0, 668, 686, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 684, 1010, 0, 0, 0, 735,
	0, 685, 0, 0, 681, 682, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 183,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	672, 0, 0, 0, 0, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 0, 179,
	0, 180, 670, 184, 185, 0, 0, 0, 0, 719,
	696, 720, 0, 0, 0, 0, 0, 0, 0, 710,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 520,
	0, 878, 209, 700, 697, 698, 702, 703, 704, 705,
	0, 0, 0, 701, 706, 563, 564, 673, 0, 0,
	0, 0, 668, 686, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 690,
	683, 684, 0, 0, 0, 0, 735, 0, 685, 0,
	0, 681, 682, 687, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 183, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 737, 178, 722, 723, 0, 0, 0, 0,
	0, 0, 688, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 182, 180, 0,
	184, 185, 0, 0, 0, 708, 0, 696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 734, 730,
	731, 728, 729, 727, 726, 725, 736, 712, 713, 714,
	715, 717, 0, 0, 567, 566, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 690, 0, 0, 0,
	0, 176, 177, 732, 0, 0, 0, 0, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 722, 723, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 734, 730, 731, 728, 729,
	727, 726, 725, 736, 712, 713, 714, 715, 717, 0,
	0, 567, 566, 716, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 0, 719, 0, 720, 0, 0, 176, 177,
	732, 0, 0, 710, 711, 0, 0, 0, 0, 0,
	0, 0, 0, 520, 0, 0, 209, 700, 697, 698,
	702, 703, 704, 705, 0, 0, 0, 701, 706, 563,
	564, 673, 0, 0, 0, 0, 668, 686, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 684, 1010, 0, 0, 0,
	735, 0, 685, 0, 0, 681, 682, 687, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	183, 0, 0, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 815, 0,
	0, 672, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	179, 0, 180, 670, 184, 185, 0, 0, 0, 0,
	719, 696, 720, 0, 0, 0, 0, 0, 0, 0,
	710, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 0, 0, 209, 700, 697, 698, 702, 703, 704,
	705, 0, 0, 0, 701, 706, 563, 564, 673, 0,
	0, 0, 0, 668, 686, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	690, 683, 684, 0, 0, 0, 0, 735, 0, 685,
	0, 0, 681, 682, 687, 721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 183, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 0, 0,
	0, 0, 0, 737, 178, 722, 723, 0, 0, 0,
	0, 0, 0, 688, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 182, 180,
	0, 184, 185, 0, 0, 0, 708, 0, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 734,
	730, 731, 728, 729, 727, 726, 725, 736, 712, 713,
	714, 715, 717, 0, 0, 567, 566, 716, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 690, 0, 0,
	0, 0, 176, 177, 732, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 722, 723, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 734, 730, 731, 728,
	729, 727, 726, 725, 736, 712, 713, 714, 715, 717,
	0, 0, 567, 566, 716, 672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 719, 0, 720, 0, 0, 176,
	177, 732, 0, 0, 710, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 520, 0, 0, 209, 700, 697,
	698, 702, 703, 704, 705, 0, 0, 0, 701, 706,
	563, 564, 673, 0, 0, 0, 0, 668, 686, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 684, 0, 0, 0,
	0, 735, 0, 685, 0, 0, 681, 682, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 183, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 1112, 1113, 1114, 0, 0, 0,
	0, 179, 0, 180, 0, 184, 185, 0, 0, 0,
	0, 719, 696, 720, 0, 0, 0, 0, 0, 0,
	0, 710, 711, 0, 0, 0, 0, 0, 0, 0,
	0, 520, 0, 0, 209, 700, 697, 698, 702, 703,
	704, 705, 0, 0, 0, 701, 706, 563, 564, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	689, 690, 683, 684, 0, 0, 0, 0, 735, 0,
	685, 0, 0, 681, 682, 687, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 183, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 0, 0, 0, 737, 178, 722, 723, 0, 0,
	0, 0, 0, 0, 688, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 182,
	180, 0, 184, 185, 0, 0, 0, 708, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	734, 730, 731, 728, 729, 727, 726, 725, 736, 712,
	713, 714, 715, 717, 0, 0, 567, 566, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 689, 690, 0,
	0, 0, 0, 176, 177, 732, 0, 0, 0, 0,
	0, 0, 0, 721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 722, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 734, 730, 731,
	728, 729, 727, 726, 725, 736, 712, 713, 714, 715,
	717, 0, 0, 567, 566, 716, 0, 0, 0, 719,
	0, 720, 0, 0, 0, 0, 0, 0, 0, 710,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 520,
	0, 0, 209, 700, 697, 698, 702, 703, 704, 705,
	176, 177, 732, 701, 706, 563, 564, 0, 0, 0,
	0, 0, 0, 686, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	683, 684, 0, 0, 0, 0, 735, 0, 685, 0,
	0, 681, 682, 687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 183, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	184, 185, 0, 0, 0, 0, 719, 696, 720, 0,
	0, 0, 0, 0, 0, 0, 710, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 1028, 0, 0, 209,
	700, 697, 698, 702, 703, 704, 705, 0, 0, 0,
	701, 706, 563, 564, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 690, 683, 684, 0,
	0, 0, 0, 735, 0, 685, 0, 0, 681, 682,
	687, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 737,
	178, 722, 723, 0, 0, 0, 0, 0, 0, 688,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 182, 180, 0, 184, 185, 0,
	0, 0, 708, 0, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 734, 730, 731, 728, 729,
	727, 726, 725, 736, 712, 713, 714, 715, 717, 0,
	288, 567, 566, 716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	252, 0, 689, 690, 0, 0, 0, 0, 176, 177,
	732, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 722, 723,
	0, 0, 0, 0, 0, 0, 0, 267, 181, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 724, 734, 730, 731, 728, 729, 727, 726, 725,
	736, 712, 713, 714, 715, 717, 0, 0, 567, 566,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 0, 322, 309, 0, 323, 324, 325, 327,
	326, 290, 291, 292, 296, 294, 293, 295, 261, 263,
	0, 259, 262, 268, 264, 265, 266, 280, 269, 270,
	271, 272, 273, 282, 281, 283, 284, 285, 286, 274,
	275, 276, 277, 278, 279, 287, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 0, 0, 0, 0, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260,
}

var yyPact = [...]int16{
	996, -1000, -287, -1000, -1000, -1000, -1000, 1809, 3700, 8155,
	8155, 391, 357, 1829, -1000, -1000, -1000, 4176, 543, 505,
	494, 254, 463, 995, 3986, 4336, 568, 590, 923, 383,
	-1000, -251, -205, -1000, -92, 1639, -1000, -1000, 592, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1638, 547, -1000,
	579, 832, 600, 1497, -1000, 5734, 5734, 5734, 5734, 473,
	995, 995, 383, 155, 383, 1828, 630, 1827, 921, -1000,
	-1000, 686, -1000, 1932, 680, -1000, -1000, 383, -1000, 918,
	-1000, 913, -1000, 4336, 909, -1000, -1000, -1000, -1000, 4086,
	8155, -1000, 3492, 3692, 1826, 1907, -1000, 1906, -1000, 4336,
	4299, 995, 203, 735, 320, -177, 24, -1000, -1000, -1000,
	-1000, -1000, 679, 674, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1694, 100, 1803, 1694, 1803, -1000, 1694, 1803, 83,
	83, 83, 83, 83, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1802, 1793, -1000,
	1694, 1694, 1694, 1694, 1694, -1000, -1000, 1694, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1787, 1694, 1698, 122,
	1721, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 320, 320,
	320, 1799, 4336, 995, 1210, 1825, 1824, 4336, -257, 4336,
	4336, 2006, -1000, -1000, -1000, 197, 4336, 1902, 7347, 5734,
	9367, 4336, 1901, 1899, -1000, 1898, 4336, 658, -1000, -1000,
	4336, 1679, 615, 4336, 4336, 995, 1179, 725, 708, -1000,
	684, 6539, -1000, 1878, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1783, 978, 995, 333, 314, 1685, 316, 618,
	313, 1242, 317, -1000, -1000, -1000, 1006, -1000, 995, -1000,
	2033, -1000, -1000, 308, -1000, 304, 906, 1194, 4336, 1781,
	188, 1779, 4112, 1139, -1000, -291, -1000, 22, -1000, 1192,
	1237, 83, 1110, 1694, -1000, 83, 1036, 83, 83, -1000,
	-1000, 808, 1884, 808, 808, 808, 808, 1189, 1189, -149,
	-149, -1000, -1000, -1000, -1000, 1137, -1000, -1000, 1135, 1698,
	-1000, -1000, 1134, 4336, 995, 1776, 1823, 1821, 4336, 4336,
	4336, 1931, 419, -1000, -1000, 1923, 1920, 1630, -1000, -1000,
	191, -1000, -1000, 630, 995, -1000, 671, -1000, -1000, -1000,
	-1000, -1000, -1000, 1811, 995, 1176, -1000, 654, 369, 4336,
	1662, 369, 312, 613, -1000, 1820, -1000, -1000, 984, 981,
	1183, 7751, 203, -1000, -1000, -1000, 2328, -1000, 2017, 1966,
	-14, 309, -207, 1232, -1000, -1000, 1773, -1000, -1000, 12116,
	-1000, 1230, 1228, -1000, 1225, 1223, -8, 995, -1000, -211,
	104, 53, -1000, -1000, 1685, -1000, 1772, 12116, 1916, -1000,
	1887, 809, -1000, 3971, -1000, -271, -1000, -1000, 1061, -1000,
	-271, -1000, -1000, -1000, 1685, -1000, 1182, 1181, 1180, 1765,
	1764, -1000, 1763, -1000, -1000, 1685, 1685, 1685, 666, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 808, 1598, 83, 808,
	1597, 1595, 808, 808, -1000, -1000, 1217, 716, -1000, -1000,
	-1000, -1000, 1495, -1000, 1486, -1000, 115, 114, -1000, 1593,
	1675, -1000, 1483, 1682, 1819, 123, 4336, 4336, 1762, 1760,
	1758, 1690, 383, 1690, 1965, 258, 4336, 2006, 389, 2006,
	630, 8559, 995, -1000, -1000, -1000, 369, 176, -1000, -1000,
	-1000, -1000, 369, 603, 306, 995, -1000, -1000, -1000, 359,
	4336, -1000, -1000, -1000, -1000, -1000, 6135, -1000, -1000, 1481,
	-1000, 301, 301, 1694, 12116, 682, 682, -216, 1678, 300,
	-207, 1685, 296, 1756, -1000, 2328, 903, -1000, 12116, 63,
	1685, 1685, 1685, 1685, 11752, -1000, -1000, 635, -1000, -1000,
	-1000, 12601, 12601, 12601, 12601, 12601, 12601, 12601, 1044, 1167,
	1164, -1000, -1000, -1000, -1000, 34, -1000, -271, -1000, 1178,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 665, 662, -1000,
	1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 12116, 1685,
	1870, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
	1685, 1685, 6138, 1685, 1685, 1685, 1685, -1000, -1000, -1000,
	-1000, -1000, -1000, -207, 1755, -1000, -1000, -1000, 906, -1000,
	12116, 389, 1039, 135, -1000, 1674, -1000, 1133, 1592, 932,
	1589, -1000, 12937, -1000, -1000, -1000, 1222, -1000, -1000, -1000,
	-1000, 1114, -1000, 1043, 1588, 11094, 11605, 11605, 8559, -1000,
	-1000, 808, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	83, 1160, 83, 19, 1, -1000, 1128, -1000, 1127, 123,
	995, 4336, 1580, 1673, -1000, 302, 301, 1753, 1752, 123,
	389, 2328, -1000, 1979, 2044, -1000, 1690, 4336, -1000, 415,
	2003, -1000, -1000, 1961, -1000, 1672, -1000, -1000, 1626, 2006,
	-1000, 1751, 175, 609, 369, 478, -1000, -1000, 995, -1000,
	-1000, 345, 995, -1000, -1000, -1000, -1000, -1000, -1000, 2816,
	2328, 1895, -1000, -1000, 1895, -1000, -1000, 993, 929, -1000,
	-1000, 938, 253, 922, -1000, 12116, 995, -207, 1750, 12116,
	995, 2328, 1477, 262, 12116, 12116, 1122, -1000, -1000, 331,
	12263, 994, 976, 12601, 12601, 12601, 12601, 12601, 12601, 12601,
	12601, 12601, 12601, 12601, 12601, 12601, 12601, 12601, 1147, 2694,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1211, -1000, 1690, 4299, 1222, 1222, 1222, 1475,
	11752, 863, 1351, 1351, 18, 11752, 18, 18, 18, 18,
	18, 99, -1000, -1000, -1000, -1000, -289, -1000, -1000, 7347,
	8559, 11605, 11605, 10154, 12116, 11605, 11605, 11605, 1939, 895,
	863, 4299, 1960, 1222, 1222, 1222, 1222, -1000, 1222, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 295, -1000, -1000,
	-1000, -1000, -1000, -1000, 1749, 1747, 1746, 1745, 1742, 1741,
	1740, -1000, 11605, 11605, 11605, 11605, -1000, 995, 1685, 903,
	1473, -158, 12116, 1738, 809, -1000, -1000, 1572, -271, -1000,
	-1000, -177, -1000, -1000, -1000, -1000, 1222, 11605, 1432, -1000,
	-1000, 707, 657, 1432, 1432, 1685, -1000, 808, -1000, 808,
	-1000, -1000, 1562, 1535, 1526, 1737, 1730, -255, 1110, 123,
	123, 1525, 1457, 1445, 1969, 1977, 1690, 1918, 1861, -1000,
	1222, 1913, 995, -1000, -1000, -1000, -1000, -1000, 233, 891,
	995, 9047, 1591, -1000, 10491, 607, 601, -1000, -1000, -1000,
	1728, 125, 374, 1814, 3201, 171, -1000, 1199, 884, 1108,
	883, 865, 855, 847, 841, 806, 800, 796, 769, 764,
	-1000, -1000, -1000, -1000, -1000, 1895, -1000, 2026, -1000, -1000,
	-1000, 2009, 1443, -1000, 198, 1725, 1723, 2328, 903, 1722,
	1439, 2816, -1000, -110, 331, 339, -1000, -1000, 1064, -1000,
	-1000, 582, 12601, 12601, 12601, -1000, -1000, -1000, -1000, 994,
	12601, 12601, 12601, 479, 582, 456, 1555, 561, 18, 173,
	173, 12, 12, 12, 12, 12, 228, 228, -1000, -1000,
	-1000, 174, -1000, 1222, 1222, -1000, -1000, -1000, 12116, -1000,
	1222, -1000, -271, 1077, -1000, -1000, 1018, 1685, -1000, 1432,
	1432, 991, 1669, 12748, 1694, 1044, 1694, 1721, 1698, -1000,
	122, -1000, -1000, 132, 1171, 130, 1694, 1694, 1694, -1000,
	-1000, 1694, 1694, -1000, 1694, 1694, 892, 1617, 1616, 1432,
	11605, -1000, 875, -1000, 12116, 1222, 4336, -1000, -1000, -1000,
	-1000, -1000, 1720, 1107, 1103, 1094, 1079, 1076, 1068, 1066,
	1048, 1432, 1222, 1660, 1432, 1432, 1437, -1000, 12116, 262,
	1817, -1000, -1000, 949, -1000, 1522, 1515, -1000, -1000, 1432,
	11605, -285, -1000, -1000, 1163, -1000, -1000, 5731, -285, -285,
	11605, -1000, -1000, -1000, -1000, -255, 123, 2328, 1989, 1719,
	1514, 1513, -255, 1989, 2816, 1896, 12116, 12116, 1979, -1000,
	1690, -1000, -1000, 1939, -1000, -1000, 943, -1000, 1690, 1510,
	229, 149, 12116, -1000, 3203, -1000, 9047, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1979,
	12116, -1000, -1000, -1000, -1000, -1000, 443, 4453, 995, 995,
	995, 502, 12116, 1201, 12116, -1000, -1000, -1000, -1000, -1000,
	4336, 1505, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491,
	10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491,
	10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491,
	10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491,
	10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491,
	10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491, 10491,
	597, -1000, 2328, 2328, 1717, 1701, 291, -1000, 995, -1000,
	-167, 3201, 995, -1000, 1046, -1000, -1000, 964, 1024, 964,
	964, 964, 964, 964, 240, 1003, 467, -1000, 682, 682,
	1989, 12116, 1025, 12116, 2328, 1426, 262, 995, 2816, 1814,
	-1000, -1000, -1000, -1000, 582, 582, 582, -1000, 479, 582,
	211, -1000, 12601, 12601, 111, -1000, -1000, 863, -1000, 73,
	-1000, -271, -1000, -1000, -1000, -1000, 9754, 1147, 12116, -1000,
	275, -1000, -1000, -1000, 1698, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9754, 12601, 12601, 12601, 12601,
	-134, 1565, 736, -1000, 12116, 879, -1000, -1000, 975, 1454,
	1416, 1407, 1448, 1440, 1417, 1394, 1377, -1000, -1000, -1000,
	-1000, 341, 995, 903, -1000, 2012, -174, 647, -1000, -1000,
	-1000, -1000, -1000, 1685, -1000, -1000, 655, -1000, -1000, 1222,
	1989, 1372, 1399, 2816, 12116, 389, -255, -255, 1989, 2816,
	-1000, -1000, 2014, 653, 871, 1659, -1000, 734, 1969, 1222,
	1841, -1000, -1000, -139, 12116, 9047, 10292, 863, 10292, -1000,
	9047, 2504, 1969, 4604, 391, 3500, 2359, 1646, 404, 182,
	-1000, -1000, -1000, 4519, 1035, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	995, 2007, 1994, 1992, 1991, 5411, 12116, 12116, -1000, 1958,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1367, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1397, 1390, 2328, 2328, 1697, 1685, 1388, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 906, 906, -1000, -1000,
	-1000, -1000, -1000, -1000, 1386, 1380, 2816, -1000, 1376, 1814,
	-1000, -1000, 12601, 582, 582, -5, -1000, 1018, -1000, 1222,
	1694, -1000, 1694, 1222, 623, -1000, -1000, -1000, 1222, 1601,
	1106, 1075, 1042, 1685, -104, -1000, 863, 12116, 1360, -1000,
	968, -1000, 961, -1000, -1000, -1000, -1000, -1000, -1000, 4336,
	-1000, 262, 682, 682, -1000, -1000, -1000, 200, 803, 809,
	809, 953, 26, -1000, 1976, 757, 6943, -1000, 2816, 1989,
	2816, 1814, 863, 1370, 1989, 1989, 2816, 1814, -1000, 1867,
	12116, 12116, 12116, -1000, 1896, -1000, 11605, -1000, -1000, -277,
	863, 3203, 3299, -1000, -1000, 372, 10284, -1000, 1896, 9047,
	793, -1000, 833, -1000, 10292, 3433, 4336, 1415, 1519, 1677,
	-1000, -1000, -1000, 1912, 1115, 2081, 995, 219, 5734, -1000,
	-1000, 1952, 1645, 4923, -10, -1000, -1000, -1000, 750, 651,
	1099, -1000, 1883, -1000, -1000, 4453, 1892, -1000, -1000, -1000,
	-1000, -1000, 10292, -1000, 1640, 1222, 891, 231, 10491, -1000,
	321, 1350, 1347, 2328, 995, -1000, 3201, -1000, -1000, 1989,
	2816, 1814, 322, -1000, 582, -1000, -1000, -1000, -1000, -1000,
	12601, -1000, -1000, 12601, -1000, 12601, -1000, 12601, -1000, 12601,
	12601, 1222, 1037, 863, -1000, 1344, 1332, 1689, -1000, -1000,
	-1000, 809, -1000, 809, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3266, -1000, 1972, 1222, -1000, 1814, 2816, -1000, -1000,
	-1000, 2816, 2816, 1814, -1000, 1865, 863, 863, -1000, -1000,
	1518, 12116, 10080, -1000, -1000, -1000, -1000, 2891, 9451, 381,
	2826, 276, 4336, -1000, 276, 1430, 2359, -1000, -1000, 4299,
	2359, 2359, 2359, 2359, 2359, -1000, 1858, 1857, -1000, 1849,
	1840, 1850, 4336, 1341, 1115, 711, 1685, -1000, 4336, -1000,
	1912, 1950, -1000, 573, 5327, 1645, -10, 1643, -1000, -24,
	-17, 10730, 8559, 808, -1000, -1000, -1000, -1000, -1000, 995,
	2565, -1000, 144, 222, -1000, 172, -1000, 178, 2816, 2816,
	1339, 1222, -1000, -1000, 1814, -1000, 4336, 792, 792, 792,
	792, 792, 107, -1000, -1000, -1000, -1000, 995, -1000, -1000,
	-1000, 650, 12116, -1000, -1000, -1000, 1814, 1814, -1000, -1000,
	1989, 2359, 863, -1000, -1000, 7431, -1000, -1000, 12116, -1000,
	12116, 10292, -1000, 1422, 1685, -1000, 1989, 2359, 1560, 1460,
	-1000, 744, 1677, 1693, 1815, 1631, -1000, -1000, -1000, -1000,
	1855, -1000, 1851, -1000, -1000, -1000, -1000, -146, 492, 490,
	475, 995, -1000, 1690, 7028, -1000, -1000, 1165, -1000, 177,
	-1000, -1000, -1000, 1643, -10, -23, -1000, -1000, -1000, -1000,
	863, 742, -1000, 1642, -1000, 10292, -1000, -1000, 165, -1000,
	1814, 1814, -1000, -1000, -1000, 1688, -1000, -1000, -1000, -1000,
	-1000, 1222, 237, -173, 1337, 8559, 1246, -1000, 863, -1000,
	-1000, 1987, 1641, 380, 9047, 6623, 5007, 1695, 4299, 1685,
	-1000, 8963, 995, 1979, 1560, -1000, 1989, 4299, 12116, -1000,
	-1000, 12116, 1687, -1000, 12116, -1000, -1000, -1000, -1000, 1686,
	1685, 1685, 1685, 1252, -1000, -1000, -1000, 573, -1000, 6219,
	-1000, 986, -1000, -1000, -1000, -48, -32, -1000, 12116, 3073,
	-1000, -1000, -1000, -1000, 995, -1000, 1864, -137, -175, -1000,
	-1000, -1000, 1222, 12116, 1981, 1971, -1000, 2189, 793, -1000,
	-1000, 1890, 1468, 1613, -1000, -1000, 11241, 1222, 1335, -1000,
	-1000, 634, -1000, -1000, 1252, 1969, -1000, 1979, -1000, 863,
	863, 389, 863, -154, 389, 389, 389, 2280, 995, -1000,
	-1000, 273, -1000, -1000, -1000, -1000, 863, 8643, 1249, -1000,
	1844, -1000, -1000, -1000, -1000, 12116, 12116, 8239, 290, -1000,
	1685, -1000, -1000, 1435, 9771, 995, -1000, -1000, 1969, 1221,
	1215, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1209, 1209, 1209, 711, -1000, -1000, 7836, -1000, -1000, -143,
	863, 1640, 379, 2008, -1000, 1685, -1000, 1690, -1000, -1000,
	-1000, -1000, -1000, -154, -1000, -1000, -1000, -146, -1000, -176,
	-1000, 4299, 1613, 1222, -1000, -1000, -185, 1511, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2302, 4, 41, 2301, 2298, 2297, 2296, 2295, 2294,
	2293, 2292, 2291, 2290, 2289, 34, 32, 46, 45, 54,
	2288, 2286, 2284, 2283, 2282, 2281, 2280, 95, 2273, 2272,
	2270, 2269, 108, 2267, 2265, 2264, 2263, 76, 79, 136,
	149, 2125, 33, 44, 38, 55, 2262, 30, 2259, 2255,
	61, 2247, 43, 2246, 2244, 2088, 2241, 2240, 8, 117,
	94, 104, 119, 2239, 2238, 100, 2654, 2237, 2236, 134,
	2235, 2231, 89, 37, 68, 7, 12, 9, 2228, 47,
	2, 2227, 86, 83, 2225, 2224, 2223, 17, 2221, 59,
	91, 20, 60, 2220, 15, 6, 129, 50, 23, 14,
	1, 58, 36, 2217, 22, 40, 35, 2207, 82, 2203,
	110, 49, 65, 13, 1817, 0, 39, 152, 2202, 2201,
	2200, 2285, 140, 16, 56, 73, 2196, 72, 93, 53,
	92, 2193, 2188, 2173, 2171, 57, 75, 70, 64, 2170,
	2165, 2160, 2159, 2156, 87, 2154, 456, 346, 120, 84,
	62, 2153, 2152, 90, 116, 85, 88, 121, 377, 609,
	2151, 2148, 2146, 2143, 115, 77, 80, 103, 2138, 69,
	98, 383, 101, 26, 2033, 109, 210, 2136, 2134, 2130,
	2128, 2127, 2122, 2117, 96, 102, 139, 48, 42, 527,
	51, 2113, 2112, 2110, 2109, 78, 2107, 2101, 2099, 63,
	2097, 2095, 97, 74, 113, 106, 112, 2086, 2085, 71,
	81, 2084, 107, 111, 2083, 105, 99, 31, 127, 67,
	2082, 2081, 2079, 21, 2077, 2074, 2073, 3, 5, 2072,
	2071, 2070, 2069, 2068, 2067, 66, 2066, 145, 2065, 19,
	2064, 2063, 52, 2062, 2060, 2059, 2058, 2056, 876, 2287,
	2054, 2597, 114, 2053, 118,
}

var yyR1 = [...]uint8{
	0, 244, 245, 245, 1, 1, 1, 1, 23, 23,
	23, 23, 23, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 247, 247, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 30, 30,
	7, 8, 8, 8, 250, 250, 50, 50, 97, 97,
	9, 9, 9, 9, 10, 10, 10, 220, 220, 219,
	221, 221, 222, 222, 224, 224, 223, 223, 223, 223,
	223, 223, 223, 225, 225, 225, 225, 11, 11, 11,
	11, 11, 214, 214, 214, 214, 214, 12, 12, 217,
	217, 217, 15, 15, 15, 15, 16, 16, 17, 17,
	17, 19, 19, 102, 102, 106, 106, 106, 107, 107,
	107, 107, 236, 236, 126, 126, 246, 246, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 212, 212, 212,
	212, 213, 213, 213, 213, 215, 215, 216, 216, 216,
	216, 216, 216, 218, 218, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 13, 13, 31, 31,
	74, 74, 14, 112, 112, 193, 193, 193, 194, 194,
	194, 194, 194, 194, 196, 196, 197, 197, 119, 119,
	198, 198, 22, 22, 22, 22, 22, 22, 22, 22,
	26, 178, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 164, 164, 165, 165, 166, 166, 166, 166, 158,
	158, 158, 158, 129, 129, 129, 129, 129, 129, 129,
	129, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	204, 204, 204, 204, 204, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 206, 206, 206, 206,
	207, 208, 200, 200, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 148, 148,
	148, 148, 148, 148, 199, 199, 195, 195, 195, 131,
	131, 131, 131, 131, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 139, 136, 136, 140, 137, 137,
	141, 143, 144, 144, 155, 155, 156, 156, 156, 138,
	138, 142, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 130, 130, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 145, 145, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 157, 157, 146, 146, 147, 147, 147, 154,
	154, 154, 151, 151, 152, 152, 153, 153, 153, 149,
	149, 149, 150, 150, 150, 160, 189, 189, 189, 191,
	191, 192, 192, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 177, 177, 209,
	209, 210, 210, 211, 211, 188, 188, 188, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 176,
	176, 186, 186, 187, 187, 184, 184, 184, 184, 184,
	184, 185, 167, 167, 167, 167, 167, 168, 168, 169,
	169, 169, 169, 161, 161, 162, 162, 163, 163, 202,
	202, 202, 240, 240, 240, 240, 240, 240, 241, 241,
	203, 203, 170, 170, 173, 173, 171, 171, 171, 174,
	174, 172, 172, 175, 175, 182, 182, 182, 182, 252,
	252, 180, 180, 180, 181, 181, 181, 253, 27, 28,
	28, 29, 29, 29, 34, 34, 34, 32, 32, 33,
	33, 39, 39, 38, 38, 40, 40, 40, 40, 118,
	118, 118, 117, 117, 237, 237, 237, 237, 237, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 227, 227,
	226, 226, 228, 228, 228, 228, 228, 228, 228, 228,
	57, 57, 94, 94, 94, 98, 98, 46, 46, 46,
	46, 47, 47, 48, 48, 49, 49, 124, 124, 123,
	123, 123, 51, 51, 51, 53, 52, 52, 52, 52,
	54, 54, 56, 56, 55, 55, 58, 58, 58, 58,
	59, 59, 96, 96, 41, 41, 41, 41, 41, 41,
	41, 41, 109, 109, 61, 61, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 71, 71, 71, 71, 71, 71, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 37,
	37, 72, 72, 72, 79, 73, 73, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 69, 69, 69,
	69, 69, 69, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 254, 254, 70, 70,
	70, 70, 35, 35, 35, 35, 35, 125, 125, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 83, 83, 36, 36, 81,
	81, 82, 111, 111, 84, 84, 80, 80, 80, 80,
	229, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 62, 62, 85, 85, 86, 86, 238, 238, 239,
	87, 87, 88, 88, 89, 90, 90, 90, 91, 91,
	91, 91, 92, 92, 92, 64, 64, 64, 64, 64,
	64, 93, 93, 95, 95, 95, 95, 99, 99, 75,
	75, 77, 77, 76, 78, 100, 100, 104, 101, 101,
	105, 105, 105, 105, 105, 24, 25, 103, 103, 103,
	120, 120, 120, 110, 110, 108, 108, 115, 116, 116,
	116, 116, 116, 121, 121, 121, 122, 122, 230, 230,
	230, 231, 231, 231, 232, 232, 233, 234, 234, 235,
	235, 235, 243, 243, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 248, 249,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 6, 6,
	6, 6, 6, 2, 13, 12, 14, 14, 13, 12,
	13, 12, 10, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 7, 10, 6, 9, 7, 8, 8,
	6, 7, 7, 3, 6, 3, 6, 3, 6, 11,
	13, 13, 14, 14, 6, 6, 7, 1, 1, 4,
	6, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 1, 1, 1, 3, 0, 4,
	3, 4, 5, 4, 2, 6, 6, 1, 3, 3,
	0, 1, 1, 1, 1, 3, 1, 2, 3, 1,
	2, 1, 1, 1, 2, 3, 4, 2, 2, 2,
	3, 5, 0, 2, 2, 2, 2, 3, 5, 1,
	2, 3, 7, 10, 1, 1, 5, 5, 3, 5,
	3, 1, 3, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 4,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 4, 1, 1,
	0, 1, 2, 0, 3, 0, 2, 2, 0, 2,
	2, 2, 2, 2, 0, 2, 0, 3, 0, 1,
	0, 2, 3, 5, 5, 7, 3, 5, 3, 5,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 3,
	3, 7, 9, 1, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 3, 2, 4, 2, 4, 2, 2,
	3, 2, 3, 2, 7, 9, 3, 3, 6, 9,
	9, 6, 6, 8, 8, 5, 8, 7, 4, 0,
	2, 4, 6, 2, 4, 2, 1, 1, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 2, 2, 2,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 3, 0, 1, 0, 5, 0, 3, 5, 1,
	1, 1, 1, 3, 3, 2, 2, 2, 1, 1,
	2, 1, 1, 4, 5, 4, 4, 4, 1, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 5, 3, 3,
	2, 3, 2, 3, 3, 2, 2, 3, 4, 1,
	1, 1, 1, 1, 3, 3, 3, 2, 2, 2,
	4, 1, 2, 5, 5, 8, 8, 13, 11, 1,
	1, 2, 2, 10, 8, 9, 7, 7, 5, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 1, 1, 2, 1,
	3, 1, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 2,
	1, 2, 0, 3, 1, 1, 3, 4, 4, 4,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 4,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 2, 2, 2,
	3, 1, 1, 1, 1, 2, 1, 4, 5, 5,
	5, 5, 6, 4, 4, 6, 6, 8, 6, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 9, 7,
	5, 4, 4, 3, 3, 3, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 2, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 2, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 6, 6, 4, 5, 4, 4, 4,
	4, 4, 4, 4, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 0, 2, 1, 1, 3, 5,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 0, 3, 0, 2, 1, 3, 1,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 1, 3, 1, 1, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 3, 1, 2, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 0, 2, 2, 0, 1, 4, 1, 3, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -244, -1, -20, -21, -22, -23, -26, 126, 132,
	133, 127, 128, 71, -245, 412, -178, 58, -240, -241,
	297, -198, 139, 152, 174, 175, 382, 136, 154, 137,
	394, 395, 156, 397, 79, -174, -171, -116, 21, -115,
	319, 151, -113, -114, 61, 131, 200, 385, 80, 25,
	27, 305, 311, 199, 84, 120, 16, 85, 206, 394,
	395, 119, 76, 363, 126, 52, 355, 356, 353, 204,
	365, 366, 354, 312, 211, 20, 31, 10, 28, 159,
	24, 113, 128, 201, 89, 88, 162, 166, 167, 26,
	160, 75, 207, 209, 19, 55, 150, 11, 384, 13,
	14, 399, 386, 143, 142, 100, 398, 138, 50, 8,
	122, 29, 97, 46, 157, 210, 48, 98, 17, 357,
	358, 34, 372, 168, 115, 53, 40, 400, 81, 401,
	73, 56, 326, 205, 79, 15, 51, 169, 402, 208,
	406, 99, 129, 362, 176, 49, 202, 403, 136, 203,
	6, 368, 33, 158, 47, 137, 313, 404, 87, 141,
	74, 5, 156, 9, 405, 54, 57, 359, 360, 361,
	38, 86, 12, 153, 376, 77, 407, 408, 152, 175,
	177, 310, 323, 135, 179, 180, 134, -174, -108, 142,
	138, 154, 56, -179, -158, -115, -114, 63, 36, 138,
	138, 138, 140, 228, 140, -115, -115, -80, 143, 61,
	-114, -121, 63, -55, -121, 61, -114, 137, -115, 143,
	-115, 143, 63, -110, 143, 397, 394, 395, 362, 56,
	59, 135, 56, 137, -115, 143, -115, 143, 63, 137,
	145, 138, 60, 59, -159, -129, -131, -130, -133, -132,
	-134, -115, 63, 61, -139, -140, -143, -141, -142, 264,
	374, 261, 265, 262, 267, 268, 269, 120, 266, 271,
	272, 273, 274, 275, 282, 283, 284, 285, 286, 287,
	270, 277, 276, 278, 279, 280, 281, 288, 33, 161,
	254, 255, 256, 259, 258, 260, 257, 122, 289, 290,
	291, 292, 293, 294, 295, 296, 297, -135, -136, 247,
	-137, -138, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 246, 249, 250, 251, 253, 252, -159, -159,
	-159, -115, 56, 226, 227, -115, -115, -110, 229, -110,
	56, -212, 19, 199, 200, 212, 56, 81, 123, 25,
	123, -110, 81, 81, -55, 81, 137, -50, -55, -171,
	137, -50, -55, 326, 56, 26, 26, -55, -80, -115,
	-115, -182, -252, 377, 37, -158, -160, -167, -161, -162,
	-163, -164, -183, -168, 146, 144, 156, 410, 148, 149,
	297, -176, 150, 138, 157, 73, 81, -204, 146, -207,
	56, 305, 311, 144, 157, 156, 410, 71, 147, 25,
	384, 386, 31, 32, -153, 413, 299, -151, 308, 123,
	123, -146, 58, -145, 263, -147, 58, -146, -147, -146,
	-147, -149, 265, -149, -149, -149, -149, 58, 58, -146,
	-146, -146, -146, -146, -146, 58, -146, -155, 58, -144,
	248, -156, 58, 56, 57, -55, -115, -115, 56, 56,
	56, -55, -236, 407, 408, -55, -55, -215, -213, 8,
	9, 10, 213, -55, 26, -116, -122, -113, -114, -121,
	-129, -122, -113, -55, 26, 26, 26, -50, 141, 59,
	-50, 11, 131, -55, -55, -115, -115, 63, 97, 97,
	97, -180, 59, -116, 71, 36, 58, -203, 56, 81,
	-115, -170, 157, -176, 61, 138, -202, 394, 395, -248,
	58, -176, -176, 61, 138, 157, 61, 157, 73, 19,
	-115, 9, 157, 157, -203, 63, -55, 58, -200, 385,
	16, 58, -205, 58, -206, 63, 64, 65, 110, 66,
	73, -148, 72, -61, 300, -69, 161, 254, 255, 353,
	356, 355, 301, 74, 75, -115, 371, 370, -121, -208,
	65, 414, -152, 309, 63, 61, -149, 65, -146, -149,
	65, 61, -149, -149, -150, 120, 119, 33, -150, -150,
	-150, -150, -157, 63, -157, -154, 376, 377, -154, 65,
	65, -155, 65, -55, -115, 58, 56, 56, -55, -55,
	-55, 25, 140, 25, -193, 25, 56, 59, 213, -212,
	-115, 123, 57, -115, -115, 63, 141, -175, -172, -115,
	185, -55, 11, -175, -119, 146, -164, -167, 156, 131,
	56, 63, 73, 63, 73, 63, 90, -116, -252, -187,
	-184, -115, -114, 157, 58, 10, 9, 19, 155, 144,
	156, 410, 150, -202, 61, 58, -41, -60, 81, -66,
	31, 26, 9, 76, -248, -65, -61, -80, -229, -78,
	-79, 120, 121, 109, 110, 117, 82, 122, 161, 254,
	255, -69, -67, -68, -70, -232, 186, 63, 64, -115,
	62, 72, 65, 66, 67, 68, 73, -121, 331, -76,
	48, 49, 363, 364, 365, 366, 372, 367, 85, 38,
	40, 270, 300, 301, 353, 361, 360, 359, 357, 358,
	355, 356, 409, 143, 354, 115, 362, 298, 61, 61,
	61, 61, -202, 156, -170, -115, 396, -204, 410, -148,
	-248, 58, -41, 25, 31, -62, 65, 110, -205, 58,
	-206, -195, 409, 65, 66, -195, -248, 63, 63, 63,
	-146, 58, -146, 58, 58, -248, -248, -248, 123, -150,
	60, -149, -150, 60, 60, -150, -150, 61, 61, 120,
	60, 59, 60, 254, 254, 60, 59, 60, 59, 58,
	57, 56, -186, -187, -69, -115, -114, -55, -55, 58,
	58, 58, -2, -3, -4, 6, -248, -110, -2, -194,
	19, 183, 184, -55, -213, -94, -115, 157, -215, -212,
	-116, -115, -175, 376, 59, -175, 180, 179, -247, 138,
	157, -115, 146, -167, -55, -181, -116, 63, 65, 60,
	59, -146, -185, 303, -146, -185, -146, -41, -169, 179,
	180, 33, 181, -169, 396, 58, 57, 157, -202, -248,
	157, 58, -187, -249, 80, 79, 97, 214, 60, -41,
	-63, 100, 81, 98, 99, 84, 106, 105, 116, 109,
	110, 111, 112, 113, 114, 115, 107, 108, 119, 409,
	90, 91, 92, 93, 94, 95, 96, 101, 102, 103,
	104, -109, -248, -79, -248, -248, -248, -60, -2, -73,
	-248, -41, 124, 125, -66, -248, -66, -66, -66, -66,
	-66, -66, 63, 63, 63, -233, 299, -195, 63, 123,
	123, -248, -248, -248, -248, -248, -248, -248, -248, -83,
	-41, -248, 41, -248, -248, -248, -248, -254, -248, -254,
	-254, -254, -254, -254, -254, -128, 120, 265, 161, 256,
	-135, -130, 271, 270, 251, 250, 262, 261, 235, 255,
	254, 122, -248, -248, -248, -248, -202, 58, -203, -41,
	-94, 60, 58, 386, 59, 65, 60, -205, 63, 60,
	302, -129, -249, 60, 60, 60, -39, 24, -38, -40,
	111, -41, -121, -38, -38, -116, -150, -149, 63, -149,
	310, 310, 65, 65, -186, -115, -55, 60, 58, 58,
	58, -186, -94, -187, -87, 15, -29, 5, -27, -253,
	-2, -55, 141, 21, 6, 8, 9, 10, 19, -112,
	59, 25, -215, -246, 58, 376, 132, -172, 180, 179,
	-115, 156, -115, -189, -191, 376, -190, 57, 151, 71,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 61,
	-184, -90, 27, 28, -90, 60, -203, 56, 73, 182,
	-203, 56, -165, -166, -41, -115, -202, 58, -41, -170,
	-187, 60, -199, 181, -41, -41, -71, 73, 81, 74,
	75, -66, 21, 22, 23, -72, -76, -79, 69, 100,
	98, 99, 84, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -125, 61,
	63, 255, -128, 61, -80, -249, -249, -249, 59, -249,
	-2, -65, 63, -115, -65, -115, 413, -116, -116, -38,
	-38, -41, -127, 120, 261, 161, 256, -137, -136, -138,
	247, 286, 287, 307, 254, 308, -135, 259, 258, 260,
	271, 262, 267, 269, 268, 266, -41, -40, -40, -38,
	-32, 24, -81, -82, 86, -80, 19, -249, -249, -249,
	-249, -249, 263, 58, 58, 58, 58, 58, 58, 58,
	58, -38, -39, -38, -38, -38, -173, -115, -248, -249,
	60, 382, 383, -41, 58, -62, 60, -153, -249, -38,
	59, -249, -118, -117, 25, -115, 63, 123, -249, -249,
	-248, -150, -150, 60, 60, 60, 58, 58, -96, 398,
	-186, -186, 60, 60, 60, -91, 17, 16, -5, -3,
	-248, 21, 24, -34, 44, 45, -28, -249, 25, -173,
	201, -111, 86, -115, -216, -218, 230, -18, -15, -6,
	-8, -7, -10, -9, -11, -12, -13, -14, -24, -3,
	143, -16, -17, -30, 10, 9, 20, 33, 205, 206,
	211, 207, 153, -31, 176, -25, 8, 362, 166, 167,
	56, -251, -115, 109, 110, 111, 112, 114, 106, 105,
	116, 123, 90, 91, 92, 63, 59, 58, 65, 66,
	67, 68, -114, -135, -136, -137, -138, 271, 282, 283,
	284, 285, 262, 261, 272, 273, 274, 73, 81, 80,
	79, 100, 97, 98, 84, 85, 86, 87, 89, 88,
	364, 363, 365, 366, 31, 146, 144, 156, 410, 147,
	132, 134, 58, 58, 394, 395, 144, -188, 56, -190,
	376, 58, 378, 61, -177, 90, 63, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, -90, 9, 10,
	60, 59, 376, 58, 58, -187, -249, 58, 60, -189,
	369, 73, 74, 75, -66, -66, -66, -72, -66, -66,
	-66, -37, 162, 80, 376, -249, -249, -41, -249, -234,
	-235, 63, 65, 66, -249, -249, 59, 57, 59, -146,
	-146, -146, -156, -155, -144, 241, -146, 241, -146, -146,
	-146, -146, -146, -146, -146, 25, 59, 11, 59, 11,
	-249, -38, -84, -82, 89, -41, -249, -121, 58, 65,
	65, 65, 65, 65, 65, 65, 65, -249, -249, -249,
	-249, 60, 59, -41, -199, 56, 60, -201, 60, 60,
	-249, -40, -237, 411, -117, 111, -122, -237, -237, -39,
	-96, -186, -187, -59, 12, 58, 60, 60, -96, -59,
	-189, -92, 19, 34, -41, -88, -89, -41, -87, -2,
	-32, 70, -2, -196, 57, 202, 230, -41, 412, -218,
	230, -216, -87, -41, -27, -27, -27, -220, -115, -222,
	-219, 216, 217, -27, -243, -242, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 352, -115, -115, -115,
	-214, 40, 208, 209, 210, -41, -115, -248, -83, -55,
	60, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, 134,
	-187, -187, 58, 58, 157, -115, -192, -190, -115, 65,
	-209, 56, 77, 65, -209, -209, -209, -209, -209, -210,
	197, 198, 65, -211, -210, 65, -169, -169, -59, -166,
	90, 80, 79, -115, -165, -187, 60, -199, -173, -189,
	-188, -37, 80, -66, -66, 254, 414, 59, -195, -127,
	120, 161, 254, -125, -41, -149, 61, -155, -127, -66,
	-66, -66, -66, 373, -87, 88, -41, 87, 65, 60,
	59, 60, 59, 60, 60, 60, 60, 60, 60, 147,
	-115, -249, 10, 9, 382, 383, 60, 231, 388, 389,
	168, 390, 181, 391, 392, -248, 123, -249, -59, 60,
	60, -189, -41, -94, -96, -96, -59, -189, 9, 100,
	59, 18, 59, -90, -91, -249, -33, 47, -197, 376,
	-41, -216, -217, -218, -218, -216, 412, 88, -91, 87,
	-19, -15, -16, -18, 230, -108, 11, -50, -43, -44,
	-45, -46, -57, -79, -248, -55, 59, -221, -124, 203,
	25, 215, -101, -126, 232, -105, 321, 320, -116, 331,
	-103, 319, 265, 318, -209, 59, -115, 11, 11, 11,
	11, -218, 230, -74, -73, -74, -112, 19, 60, 60,
	60, -187, -187, 58, -248, 60, 59, -203, -203, 60,
	60, -189, 60, -188, -66, 310, -235, -249, -249, -249,
	59, -249, -249, 59, -249, 19, -249, 59, -249, 19,
	-248, -36, 368, -41, 60, 65, 65, -55, -199, -169,
	-169, 376, -62, 16, -62, -62, -62, 65, 389, 168,
	391, 16, -249, 169, -87, 111, -189, -59, -189, -188,
	60, -59, -59, -189, -188, 42, -41, -41, -89, -92,
	-38, 410, 412, -218, 88, 88, -92, -216, 89, 89,
	-217, -56, 29, -55, -55, -50, -250, 11, 57, 33,
	59, -51, -53, -52, -54, 46, 50, 52, 47, 48,
	49, 53, -124, -43, -248, -123, 169, -121, 25, -219,
	-115, 204, -129, 19, 59, -101, 232, -102, -106, 322,
	324, 90, 123, -120, -115, 63, 31, 33, -242, 29,
	-217, -249, -111, 201, -251, -230, 222, 81, 60, 60,
	-187, -115, -190, -59, -189, -188, 147, -66, -66, -66,
	-66, -66, -66, -249, 63, 60, 60, 58, -62, -62,
	393, -121, 16, -249, -188, -189, -189, -189, -188, 43,
	-42, 11, -41, 88, -218, 412, -16, -19, 143, -17,
	143, 412, 88, -97, 169, -55, -97, 57, -43, -100,
	-104, -80, -44, -45, -45, -44, -45, 46, 46, 46,
	51, 46, 51, 46, -52, -121, -249, -58, 54, 142,
	55, -248, -121, 19, -224, -223, 65, 220, 219, 81,
	218, -115, -105, -102, 59, 323, 325, 326, 56, 77,
	-41, -116, -150, -173, 88, 230, 202, -231, 223, 222,
	-189, -189, 60, -249, -188, -55, -249, -249, -249, -249,
	-249, -35, 100, 376, -173, 123, -238, -239, -41, -188,
	-188, -59, -43, 88, 89, -41, -41, -64, 33, 38,
	-2, -248, -248, -59, -43, -59, -42, 59, 90, -48,
	-47, 56, 57, -49, 56, -47, 46, 46, -227, 376,
	138, 138, 138, -98, -115, -2, -225, 59, -218, 230,
	63, 41, 221, -106, -107, 327, 324, 330, 90, -217,
	225, 224, -188, -188, 58, -249, 374, 53, 379, 60,
	-116, -249, -87, 59, -85, 13, 143, -216, -19, -19,
	-99, 56, -100, -75, -77, -76, -248, -2, -93, -95,
	6, -115, -113, -114, -98, -87, -59, -59, -104, -41,
	-41, 58, -41, 58, -248, -248, -248, -249, 59, -223,
	88, -216, 63, 324, 328, 329, -41, 412, -173, 43,
	375, 380, -249, -239, -86, 14, 16, 412, 30, -99,
	59, -249, -249, -249, 59, 123, -249, -91, -87, -94,
	-226, -228, 399, 400, 401, 402, 403, 404, 405, 406,
	-94, -94, -94, -123, -115, 88, 412, 88, 60, 43,
	-41, -73, 88, 157, -77, 38, -2, -248, -95, -115,
	-91, 60, 60, 59, -249, -249, -249, -58, 88, 376,
	143, 9, -75, -2, -228, -227, 379, -100, -249, 380,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 0, -2, 0,
	0, 975, 0, 0, 1, 3, 13, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	563, 564, 565, 568, 0, 0, 579, 576, 577, 978,
	979, 980, 981, 982, 977, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 0, 0, 976,
	0, 0, 0, 0, 273, 329, 329, 329, 329, 0,
	0, 0, 973, 0, 973, 0, 896, 0, 0, -2,
	-2, 0, 985, 0, 684, 983, 984, 973, 43, 0,
	45, 0, 47, 0, 0, 569, 566, 567, 261, 0,
	0, 578, 0, 0, 262, 0, 266, 0, 268, 0,
	0, 0, 585, 0, 289, 476, 472, 294, 295, 296,
	297, 298, 0, 977, 379, 380, 381, 382, 383, 421,
	422, 464, 451, 466, 464, 466, 428, 464, 466, 479,
	479, 479, 479, 479, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 0, 0, 412,
	464, 464, 464, 464, 464, 418, 419, 464, 453, 454,
	455, 456, 457, 458, 459, 460, 0, 464, 404, 402,
	406, 411, 384, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 395, 396, 398, 399, 409, 410, 290, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 76, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 271, 587, 0, 590, 274, 275, 276, 277, 278,
	279, 280, 0, 570, 572, 0, 559, 0, 0, 0,
	0, 0, 0, 529, 530, 302, 0, 304, 0, 306,
	0, 308, 309, 0, 311, 313, 570, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 478, 474, 473, 0,
	0, 479, 0, 464, 452, 479, 0, 479, 479, 429,
	430, 482, 0, 482, 482, 482, 482, 0, 0, 469,
	469, 415, 416, 417, 420, 0, 394, 397, 0, 404,
	403, 400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 143, 0, 245, 0, 215, 211,
	212, 213, 210, 0, 0, 898, 0, -2, -2, 986,
	31, 685, 987, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 258, 0, 264, 263, 267, 269, 0, 0,
	0, 0, 0, 591, 593, 589, 0, 542, 0, 0,
	573, 0, 559, 0, 525, -2, 0, 560, 561, 994,
	1167, 0, 0, 520, 522, 0, 559, 572, 303, 0,
	0, 0, 310, 312, 0, 316, 317, 994, 0, 352,
	0, 0, 330, 0, 333, -2, 336, 337, 0, 339,
	376, 342, 343, 344, 0, 346, 0, 0, 0, 464,
	464, 372, 0, 704, 705, 0, 0, 0, 0, 350,
	351, 477, 293, 475, 299, 300, 482, 0, 479, 482,
	0, 0, 482, 482, 431, 483, 0, 0, 432, 433,
	434, 435, 0, 462, 0, 413, 0, 0, 414, 0,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 46, 48, 0, 35, 583, 581,
	582, 77, 0, 40, 0, 572, 54, 55, 259, 0,
	0, 8, 9, 10, 11, 12, 0, 592, 588, 0,
	533, 464, 464, 464, 994, 0, 0, 0, 0, 0,
	559, 0, 0, 0, 524, 0, 0, 694, 994, 700,
	702, 0, 0, 0, 994, 747, 748, 749, 750, 751,
	752, 994, 994, 994, 994, 994, 994, 994, 0, 0,
	0, 781, 782, 783, 784, 0, 786, -2, 902, 896,
	904, 905, 906, 907, 908, 909, 910, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 816, 826, 826, 826, 826, 826,
	826, 826, 0, 0, 0, 0, 0, 995, 518, 519,
	521, 523, 527, 559, 0, 573, 328, 305, 570, 307,
	994, 0, 0, 0, 353, 0, 911, 0, 0, 0,
	0, 335, 0, 338, 340, 341, 0, 347, 348, 349,
	368, 0, 370, 0, 0, -2, 994, 994, 0, 423,
	465, 482, 425, 467, 468, 426, 427, 484, 480, 481,
	479, 0, 479, 0, 0, 461, 0, 407, 0, 0,
	0, 0, 0, 531, 532, 464, -2, 0, 0, 0,
	0, 0, -2, 920, 0, 597, 0, 0, -2, 0,
	0, 246, 247, 243, 216, 214, 652, 653, 0, 0,
	899, 146, 33, 0, 0, 37, 41, 42, 0, 57,
	58, 573, 572, 56, 265, 586, 594, 595, 596, 486,
	0, 925, 538, 541, 925, 539, 537, 0, 570, 549,
	550, 0, 0, 570, 571, 994, 0, 559, 0, 994,
	572, 0, 0, 374, 994, 994, 0, 699, 1168, 697,
	994, 0, 0, 994, 994, 994, 994, 994, 994, 994,
	994, 994, 994, 994, 994, 994, 994, 994, 0, 0,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 701, 0, 718, 0, 0, 0, 694, 62, 0,
	994, 745, 0, 0, 769, 994, 770, 771, 772, 773,
	774, 775, 777, 778, 779, 785, 0, 901, 903, 0,
	0, 994, 994, 994, 994, 994, 994, 994, 607, 0,
	886, 0, 0, 0, 0, 0, 0, 818, 0, 819,
	820, 821, 822, 823, 824, 825, 865, 0, 867, 868,
	869, 870, 871, 872, 0, 0, 0, 0, 384, 0,
	0, 884, 994, -2, 994, 994, 528, 0, 0, 0,
	0, 0, 994, 325, 0, 912, 331, 0, 376, 334,
	377, 476, 345, 369, 371, 373, 0, 994, 0, 613,
	615, 619, 0, 0, 0, 0, 424, 482, 463, 482,
	470, 471, 0, 0, 0, 0, 0, 692, 1167, 0,
	0, 0, 0, 0, 928, 0, 0, 601, 604, 599,
	62, 0, 0, 249, 250, 251, 252, 253, 0, 892,
	0, 0, 0, 32, 148, 0, 0, 584, 38, 39,
	0, 0, 573, 515, 487, 0, 489, 0, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	534, 535, 926, 927, 536, 925, 543, 0, 551, 552,
	544, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 486, 558, 0, 695, 696, 698, 722, 0, 724,
	726, 706, 994, 994, 994, 710, 741, 742, 743, 0,
	994, 994, 994, 739, 714, 0, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 767, 837,
	838, 0, 780, 0, 0, 720, 721, 744, 994, 953,
	62, 765, 376, 0, 766, 776, 0, 898, 900, 0,
	0, 0, 0, -2, 464, 842, 464, 406, 404, 846,
	402, 848, 849, 850, 464, 853, 464, 464, 464, 858,
	859, 464, 464, 862, 464, 464, 0, 0, 0, 0,
	994, 608, 894, 889, 994, 0, 0, 813, 814, 815,
	817, 827, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 612, 0, 0, 0, 574, 994, 374,
	318, 321, 322, 0, 354, 0, 0, 378, 787, 0,
	994, 624, 616, 620, 0, 622, 623, 0, 624, 624,
	-2, 449, 450, 405, 408, 692, 0, 0, 690, 0,
	0, 0, 692, 690, 486, 932, 994, 994, 920, 64,
	0, 602, 603, 607, 605, 606, 598, 63, 0, 254,
	0, 0, 994, 654, 28, 217, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 920,
	994, 124, 125, 597, 597, 597, 0, 597, 0, 0,
	0, 112, 994, 0, -2, 965, 68, 69, 238, 239,
	0, 0, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	0, 36, 0, 0, 0, 0, 0, 485, 0, 490,
	0, 0, 0, 493, 0, 508, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 0, 0,
	690, 994, 0, 994, 0, 0, 374, 0, 486, 515,
	375, 723, 725, 727, 707, 708, 709, 711, 739, 715,
	0, 712, 994, 994, 0, 703, 719, 746, -2, 0,
	997, 376, 1000, 1001, 793, 794, 0, 0, 994, 839,
	479, 843, 844, 845, 404, 851, 852, 854, 855, 856,
	857, 860, 861, 863, 864, 0, 994, 994, 994, 994,
	0, 920, 0, 890, 994, 0, 811, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 829, 830,
	831, 0, 0, 0, 314, 0, 0, 0, 327, 332,
	788, 614, 789, 0, 621, 617, 0, 790, 791, 0,
	690, 0, 0, 486, 994, 0, 692, 692, 690, 486,
	22, 59, 0, 0, 929, 921, 922, 925, 928, 62,
	609, 600, -2, 256, 994, 244, 0, 893, 0, 220,
	0, 0, 928, 0, 975, 0, 0, 84, -2, 0,
	87, 92, 93, 0, 0, 1002, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 107, 108, 109,
	0, 0, 0, 0, 0, 0, -2, -2, 242, 243,
	147, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 0, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 34,
	0, 0, 0, 0, 0, 516, 0, 491, 496, 494,
	497, 509, 510, 498, 499, 500, 501, 502, 503, 504,
	511, 512, 505, 506, 513, 514, 570, 570, 281, 284,
	285, 286, 287, 288, 0, 0, 486, 557, 0, 515,
	556, 713, 994, 740, 716, 0, 996, 0, 999, 0,
	464, 842, 464, 0, 0, 840, 841, 847, 0, 0,
	0, 0, 0, 0, 887, 810, 895, 994, 0, 878,
	0, 880, 0, 881, 875, 877, 879, 882, 883, 0,
	575, 374, 0, 0, 323, 324, 326, 0, 0, 0,
	0, 0, 0, 365, 0, 0, 0, 792, 486, 690,
	486, 515, 691, 0, 690, 690, 486, 515, 933, 0,
	994, 994, 994, 924, 932, 65, 994, 610, 26, 0,
	255, 27, 0, 119, 218, 0, 0, 221, 932, 0,
	130, 128, 124, 131, 0, 0, 0, 0, 0, 631,
	633, 634, 635, 667, 0, 669, 0, 0, 0, 91,
	668, 0, 80, 0, 0, 958, 144, 145, 0, 0,
	0, -2, 0, 969, 966, 0, 110, 113, 114, 115,
	116, 117, 0, 236, 241, 0, 892, 0, 148, 49,
	988, 0, 0, 0, 0, 488, 0, 545, 546, 690,
	486, 515, 0, 554, 717, 768, 998, 795, 799, 796,
	994, 798, 800, 994, 802, 994, 804, 994, 806, 994,
	994, 0, 0, 891, 876, 0, 0, 0, 315, 319,
	320, 0, 356, 0, 358, 359, 360, 361, 362, 363,
	364, 0, 625, 0, 0, 618, 515, 486, 19, 15,
	693, 486, 486, 515, 21, 0, 930, 931, 923, 60,
	629, 994, 0, 120, 222, 219, 235, 0, 0, 0,
	0, 78, 0, 683, -2, 0, 0, 74, 75, 0,
	0, 0, 0, 0, 0, 672, 0, 0, 675, 0,
	0, 0, 0, 0, 0, 686, 0, 670, 0, 88,
	667, 0, 89, 0, 0, 81, 0, 83, 133, 0,
	0, 994, 0, 482, 970, 971, 972, 968, 1003, 0,
	0, 237, 0, 0, 164, 991, 989, 0, 486, 486,
	0, 0, 492, 282, 515, 555, 0, 0, 0, 0,
	0, 0, 832, 809, 888, 873, 874, 0, 355, 357,
	366, 0, 994, 627, 14, 20, 515, 515, 18, 934,
	690, 0, 257, 29, 121, 0, 126, 127, 994, 129,
	994, 0, 132, 0, 0, 682, 690, 0, 690, 629,
	955, 0, 632, 663, 665, 0, 660, 673, 674, 676,
	0, 678, 0, 680, 681, 636, 637, 638, 0, 0,
	0, 0, 671, 0, 0, 94, 96, 0, 99, 0,
	101, 102, 959, 82, 0, 0, 136, 137, 960, 961,
	962, 0, 964, 111, 118, 0, 244, 51, 0, 990,
	515, 515, 50, 517, 553, 0, 797, 801, 803, 805,
	807, 0, 0, 0, 0, 0, 0, 917, 919, 16,
	17, 913, 630, 0, 0, 0, 0, 947, 0, 0,
	-2, 0, 0, 920, 690, 73, 690, 0, 994, 657,
	664, 994, 0, 658, 994, 659, 677, 679, 650, 0,
	0, 0, 0, 0, 655, -2, 86, 0, 103, 0,
	97, 0, 100, 134, 135, 0, 0, 141, 994, 0,
	992, 993, 52, 53, 0, 808, 0, 0, 0, 548,
	367, 626, 0, 994, 915, 0, 122, 0, 0, 130,
	66, 0, 947, 935, 949, 951, 994, 62, 0, 941,
	-2, 943, 945, 946, 0, 928, 72, 920, 956, 957,
	661, 0, 666, 0, 0, 0, 0, 669, 0, 95,
	104, 0, 98, 138, 139, 140, 963, 0, 0, 833,
	0, 836, 628, 918, 61, 994, 994, 0, 0, 67,
	0, 952, -2, 0, 0, 0, 79, 71, 928, 0,
	0, 640, 642, 643, 644, 645, 646, 647, 648, 649,
	0, 0, 0, 686, 656, 105, 0, 30, 547, 834,
	916, 914, 0, 0, 950, 0, -2, 0, 942, 944,
	70, 662, 639, 0, 687, 688, 689, 638, 106, 0,
	123, 0, 938, 62, 641, 651, 0, 948, -2, 835,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 412,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 413, 3, 414, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:439
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:444
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:445
		{
		}
	case 8:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:455
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:472
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    "",
				},
			}
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:489
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:508
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:527
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:540
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:545
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:565
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 16:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:585
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 17:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:627
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:649
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 20:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:665
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:682
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:702
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:717
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:728
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:740
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:751
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:767
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:781
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:795
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:808
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:822
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					Type:       yyDollar[5].columnType,
					EnumValues: yyDollar[5].columnType.EnumValues,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:838
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:875
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      privs,
						Grantees:        grantees,
						WithGrantOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:         true,
							Privileges:      privs,
							Grantees:        grantees,
							WithGrantOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:914
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:951
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      privs,
						Grantees:        grantees,
						WithGrantOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:         true,
							Privileges:      privs,
							Grantees:        grantees,
							WithGrantOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:990
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1027
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    privs,
						Grantees:      grantees,
						CascadeOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:       false,
							Privileges:    privs,
							Grantees:      grantees,
							CascadeOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1066
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
						// RESTRICT is the default, no special flag needed
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
							// RESTRICT is the default, no special flag needed
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1105
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1142
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    privs,
						Grantees:      grantees,
						CascadeOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:       false,
							Privileges:    privs,
							Grantees:      grantees,
							CascadeOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1181
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
						// RESTRICT is the default, no special flag needed
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
							// RESTRICT is the default, no special flag needed
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1221
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1230
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1260
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1269
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1309
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 53:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1405
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1451
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1463
		{
			yyVAL.str = InsertStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1467
		{
			yyVAL.str = ReplaceStr
		}
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1492
		{
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1493
		{
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1506
		{
			yyVAL.partitions = nil
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1510
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1562
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1566
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1572
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1577
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1581
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1591
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1597
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1607
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1611
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1615
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1619
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1623
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1627
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1631
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1637
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1664
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1671
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1678
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1685
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1693
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1703
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1707
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1746
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1754
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1761
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1769
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1783
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1811
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1816
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1828
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1843
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1847
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1853
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1895
		{
			yyVAL.str = SessionStr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1899
		{
			yyVAL.str = GlobalStr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1976
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1980
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2019
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2023
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2028
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2066
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2079
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2089
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2094
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2101
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.exprs = nil
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2105
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2109
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2116
		{
			yyVAL.empty = struct{}{}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.bytes = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.bytes = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2136
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2140
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2144
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2157
		{
			yyVAL.expr = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.expr = nil
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.bytes = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.bytes = nil
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2194
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2203
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2213
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2223
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2235
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2254
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2263
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2275
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2282
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2292
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2297
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2301
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2305
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2309
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2313
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2317
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2321
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      NewColIdent(""), // Default index type
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent, // GIST, btree, etc.
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2347
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2351
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2357
		{
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "=",
			}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2364
		{
			// AND token represents && in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "&&",
			}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2372
		{
			// OR token represents || in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "||",
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2380
		{
			// Handle all other operators and GIST-specific operators
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   string(yyDollar[3].colIdent.val),
			}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2390
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2394
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2399
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2421
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2435
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2448
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2453
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2458
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2463
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2469
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2474
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2479
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2484
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2489
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2494
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2499
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2504
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2509
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2518
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2528
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2533
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2538
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2545
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 320:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2552
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2560
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2565
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2570
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2575
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2581
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 326:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2587
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2594
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2601
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2613
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2621
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2629
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2651
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2655
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2659
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2663
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2667
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2671
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2675
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2685
		{
			yyVAL.expr = &TypedLiteral{Type: "date", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.expr = &TypedLiteral{Type: "time", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.expr = &TypedLiteral{Type: "timestamp", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2705
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2715
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.sequence = &Sequence{}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2724
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2729
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2734
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2739
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2744
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2749
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2754
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2759
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2764
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2769
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2774
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2779
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2784
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2795
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2799
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2803
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2807
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2811
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.bytes = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2910
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.optVal = nil
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.optVal = nil
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3176
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3198
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3202
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3224
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3233
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3256
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3261
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3265
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3269
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3285
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3289
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3295
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3299
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3348
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3359
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3363
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3373
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3379
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3383
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3389
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3393
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.indexPartition = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3413
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3429
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3433
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3437
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3441
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3445
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3449
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3453
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3469
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3474
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3490
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3494
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3499
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3503
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3507
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), OperatorClass: string(yyDollar[2].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3521
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3526
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3533
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3540
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3547
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 547:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 548:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3567
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3590
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 553:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 555:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3617
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 556:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3628
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3639
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3661
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3671
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3697
		{
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3698
		{
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3702
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3706
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3711
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3718
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3722
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3728
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3732
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.colIdent = NewColIdent("ALL")
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3742
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3753
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3757
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3774
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3788
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3793
		{
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3794
		{
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3798
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3812
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3825
		{
			setAllowComments(yylex, true)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3835
		{
			yyVAL.bytes2 = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3839
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.str = UnionStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.str = UnionAllStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.str = UnionDistinctStr
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.str = ""
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.str = SQLCacheStr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.str = DistinctStr
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.str = StraightJoinHint
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.selectExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3899
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3909
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3917
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3921
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3926
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3930
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3934
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.overExpr = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3962
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3977
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4004
		{
			yyVAL.strs = []string{}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4014
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4040
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4044
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4048
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 651:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4077
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4083
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4087
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4132
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4137
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4140
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4144
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4154
		{
			yyVAL.str = JoinStr
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.str = JoinStr
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.str = JoinStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.str = StraightJoinStr
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4174
		{
			yyVAL.str = LeftJoinStr
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4178
		{
			yyVAL.str = LeftJoinStr
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4182
		{
			yyVAL.str = RightJoinStr
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.str = RightJoinStr
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.str = NaturalJoinStr
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4196
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4206
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4210
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4216
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.indexHints = nil
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4242
		{
			yyVAL.expr = nil
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4246
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.columns = nil
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4265
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4277
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4281
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.str = ""
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4305
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4319
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4331
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4351
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4355
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4359
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4363
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4372
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.str = IsNullStr
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.str = IsNotNullStr
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.str = IsTrueStr
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.str = IsNotTrueStr
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4398
		{
			yyVAL.str = IsFalseStr
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4402
		{
			yyVAL.str = IsNotFalseStr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.str = EqualStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.str = LessThanStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.str = GreaterThanStr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.str = LessEqualStr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.str = GreaterEqualStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.str = NotEqualStr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.str = PosixRegexStr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4453
		{
			yyVAL.expr = nil
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4457
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4463
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4467
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4477
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4483
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4487
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4493
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4497
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4501
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4513
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4537
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4557
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4561
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4565
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4569
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4573
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 768:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4577
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4581
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4585
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4589
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4597
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4611
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4615
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4619
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4627
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4635
		{
			yyVAL.expr = &TypedLiteral{Type: "date", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4639
		{
			yyVAL.expr = &TypedLiteral{Type: "time", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4643
		{
			yyVAL.expr = &TypedLiteral{Type: "timestamp", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4647
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4655
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4659
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4669
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4673
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4677
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4685
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 792:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4689
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4707
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4712
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 797:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4716
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 798:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4720
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4724
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 801:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 802:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4736
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 803:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4740
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4744
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 805:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4748
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 806:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4752
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 807:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4756
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 808:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4760
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 809:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4764
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4768
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4772
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4777
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4781
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4789
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.str = ""
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4876
		{
			yyVAL.str = BooleanModeStr
		}
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4880
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 835:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4884
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4888
		{
			yyVAL.str = QueryExpansionStr
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4894
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5036
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 873:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 876:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: NewIntVal(yyDollar[4].bytes)}
		}
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 881:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5097
		{
			yyVAL.expr = nil
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5101
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.str = string("")
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5110
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5116
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5120
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5126
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5131
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5133
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.expr = nil
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5140
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5146
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5150
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5154
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 899:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5158
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5164
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5170
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5174
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5179
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5184
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5188
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5192
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5196
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5200
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5204
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5208
		{
			yyVAL.expr = &NullVal{}
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5214
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5218
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5223
		{
			yyVAL.exprs = nil
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5227
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.expr = nil
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5242
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5252
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5257
		{
			yyVAL.orderBy = nil
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5261
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5267
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5271
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5277
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5282
		{
			yyVAL.str = AscScr
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5286
		{
			yyVAL.str = AscScr
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5290
		{
			yyVAL.str = DescScr
		}
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5295
		{
			yyVAL.limit = nil
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5299
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5303
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5312
		{
			yyVAL.str = ""
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5316
		{
			yyVAL.str = ForUpdateStr
		}
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5320
		{
			yyVAL.str = ShareModeStr
		}
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5333
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5337
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5341
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 938:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5346
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5350
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5354
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5361
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5365
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5371
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5375
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5379
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5383
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5388
		{
			yyVAL.updateExprs = nil
		}
	case 948:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5392
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5398
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5402
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5408
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5412
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5418
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5424
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5434
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5438
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5444
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5450
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5454
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5460
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5464
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5468
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 963:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5473
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5477
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5483
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5489
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5496
		{
			yyVAL.bytes = []byte("charset")
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5503
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5507
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5511
		{
			yyVAL.expr = &Default{}
		}
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5516
		{
			yyVAL.empty = struct{}{}
		}
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5518
		{
			yyVAL.empty = struct{}{}
		}
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5521
		{
			yyVAL.str = ""
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5523
		{
			yyVAL.str = IgnoreStr
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5527
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5534
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5538
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5542
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5546
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5552
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5556
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5561
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5568
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5574
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5578
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5582
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5588
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5602
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5606
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 996:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5613
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5620
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5624
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5631
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5635
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5639
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5645
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5649
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5831
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5840
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
