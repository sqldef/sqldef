// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const MAX = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const POSIX_REGEX = 57431
const POSIX_REGEX_CI = 57432
const POSIX_NOT_REGEX = 57433
const POSIX_NOT_REGEX_CI = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const MATERIALIZED = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const CONSTRAINT = 57462
const REFERENCES = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const FOREIGN = 57466
const KEY_BLOCK_SIZE = 57467
const POLICY = 57468
const WHILE = 57469
const UNIQUE = 57470
const KEY = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const TYPE = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const RESTRICT = 57492
const CASCADE = 57493
const NO = 57494
const ACTION = 57495
const PERMISSIVE = 57496
const RESTRICTIVE = 57497
const PUBLIC = 57498
const CURRENT_USER = 57499
const SESSION_USER = 57500
const PAD_INDEX = 57501
const FILLFACTOR = 57502
const IGNORE_DUP_KEY = 57503
const STATISTICS_NORECOMPUTE = 57504
const STATISTICS_INCREMENTAL = 57505
const ALLOW_ROW_LOCKS = 57506
const ALLOW_PAGE_LOCKS = 57507
const BEFORE = 57508
const AFTER = 57509
const EACH = 57510
const ROW = 57511
const SCROLL = 57512
const CURSOR = 57513
const OPEN = 57514
const CLOSE = 57515
const FETCH = 57516
const PRIOR = 57517
const FIRST = 57518
const LAST = 57519
const DEALLOCATE = 57520
const DEFERRABLE = 57521
const INITIALLY = 57522
const IMMEDIATE = 57523
const DEFERRED = 57524
const CONCURRENTLY = 57525
const SQL = 57526
const SECURITY = 57527
const BEGIN = 57528
const START = 57529
const TRANSACTION = 57530
const COMMIT = 57531
const ROLLBACK = 57532
const BIT = 57533
const TINYINT = 57534
const SMALLINT = 57535
const SMALLSERIAL = 57536
const MEDIUMINT = 57537
const INT = 57538
const INTEGER = 57539
const SERIAL = 57540
const BIGINT = 57541
const BIGSERIAL = 57542
const INTNUM = 57543
const REAL = 57544
const DOUBLE = 57545
const PRECISION = 57546
const FLOAT_TYPE = 57547
const DECIMAL = 57548
const NUMERIC = 57549
const SMALLMONEY = 57550
const MONEY = 57551
const TIME = 57552
const TIMESTAMP = 57553
const DATETIME = 57554
const YEAR = 57555
const DATETIMEOFFSET = 57556
const DATETIME2 = 57557
const SMALLDATETIME = 57558
const CHAR = 57559
const VARCHAR = 57560
const VARYING = 57561
const BOOL = 57562
const CHARACTER = 57563
const VARBINARY = 57564
const NCHAR = 57565
const NVARCHAR = 57566
const NTEXT = 57567
const UUID = 57568
const TEXT = 57569
const TINYTEXT = 57570
const MEDIUMTEXT = 57571
const LONGTEXT = 57572
const CITEXT = 57573
const BLOB = 57574
const TINYBLOB = 57575
const MEDIUMBLOB = 57576
const LONGBLOB = 57577
const JSON = 57578
const JSONB = 57579
const ENUM = 57580
const GEOMETRY = 57581
const POINT = 57582
const LINESTRING = 57583
const POLYGON = 57584
const GEOMETRYCOLLECTION = 57585
const MULTIPOINT = 57586
const MULTILINESTRING = 57587
const MULTIPOLYGON = 57588
const VARIADIC = 57589
const ARRAY = 57590
const NOW = 57591
const GETDATE = 57592
const BPCHAR = 57593
const TEXT_PATTERN_OPS = 57594
const NULLX = 57595
const AUTO_INCREMENT = 57596
const APPROXNUM = 57597
const SIGNED = 57598
const UNSIGNED = 57599
const ZEROFILL = 57600
const ZONE = 57601
const AUTOINCREMENT = 57602
const DATABASES = 57603
const TABLES = 57604
const VITESS_KEYSPACES = 57605
const VITESS_SHARDS = 57606
const VITESS_TABLETS = 57607
const VSCHEMA_TABLES = 57608
const EXTENDED = 57609
const FULL = 57610
const PROCESSLIST = 57611
const NAMES = 57612
const CHARSET = 57613
const GLOBAL = 57614
const SESSION = 57615
const ISOLATION = 57616
const LEVEL = 57617
const READ = 57618
const WRITE = 57619
const ONLY = 57620
const REPEATABLE = 57621
const COMMITTED = 57622
const UNCOMMITTED = 57623
const SERIALIZABLE = 57624
const NEW = 57625
const CURRENT_TIMESTAMP = 57626
const DATABASE = 57627
const CURRENT_DATE = 57628
const CURRENT_TIME = 57629
const LOCALTIME = 57630
const LOCALTIMESTAMP = 57631
const UTC_DATE = 57632
const UTC_TIME = 57633
const UTC_TIMESTAMP = 57634
const REPLACE = 57635
const CONVERT = 57636
const CAST = 57637
const SUBSTR = 57638
const SUBSTRING = 57639
const GROUP_CONCAT = 57640
const SEPARATOR = 57641
const INHERIT = 57642
const MATCH = 57643
const AGAINST = 57644
const BOOLEAN = 57645
const LANGUAGE = 57646
const WITH = 57647
const WITHOUT = 57648
const PARSER = 57649
const QUERY = 57650
const EXPANSION = 57651
const UNUSED = 57652
const VIRTUAL = 57653
const STORED = 57654
const GENERATED = 57655
const ALWAYS = 57656
const IDENTITY = 57657
const SEQUENCE = 57658
const INCREMENT = 57659
const MINVALUE = 57660
const CACHE = 57661
const CYCLE = 57662
const OWNED = 57663
const NONE = 57664
const CLUSTERED = 57665
const NONCLUSTERED = 57666
const REPLICATION = 57667
const INCLUDE = 57668
const HOLDLOCK = 57669
const NOLOCK = 57670
const NOWAIT = 57671
const PAGLOCK = 57672
const ROWLOCK = 57673
const TABLELOCK = 57674
const DEFINER = 57675
const INVOKER = 57676
const TYPECAST = 57677
const CHECK = 57678
const OVER = 57679

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	131, 158,
	201, 158,
	-2, 148,
	-1, 36,
	165, 500,
	166, 500,
	-2, 490,
	-1, 280,
	118, 865,
	-2, 861,
	-1, 281,
	118, 866,
	-2, 862,
	-1, 282,
	118, 867,
	-2, 243,
	-1, 323,
	265, 876,
	-2, 757,
	-1, 355,
	85, 1093,
	-2, 86,
	-1, 356,
	85, 1043,
	-2, 87,
	-1, 362,
	85, 1022,
	-2, 832,
	-1, 364,
	85, 1067,
	-2, 834,
	-1, 624,
	265, 876,
	-2, 528,
	-1, 673,
	265, 876,
	-2, 528,
	-1, 702,
	55, 41,
	57, 41,
	-2, 43,
	-1, 734,
	115, 1017,
	248, 1017,
	254, 1017,
	-2, 279,
	-1, 735,
	115, 1018,
	248, 1018,
	254, 1018,
	-2, 280,
	-1, 736,
	248, 1020,
	254, 1020,
	-2, 314,
	-1, 737,
	248, 1021,
	254, 1021,
	-2, 314,
	-1, 738,
	248, 1122,
	254, 1122,
	-2, 321,
	-1, 739,
	248, 1068,
	254, 1068,
	-2, 314,
	-1, 740,
	248, 1073,
	254, 1073,
	-2, 321,
	-1, 741,
	115, 1071,
	248, 1071,
	254, 1071,
	-2, 286,
	-1, 743,
	115, 1121,
	248, 1121,
	254, 1121,
	-2, 321,
	-1, 744,
	248, 1107,
	254, 1107,
	-2, 334,
	-1, 745,
	248, 1113,
	254, 1113,
	-2, 334,
	-1, 746,
	248, 1061,
	254, 1061,
	-2, 334,
	-1, 747,
	248, 1057,
	254, 1057,
	-2, 334,
	-1, 749,
	115, 1016,
	248, 1016,
	254, 1016,
	-2, 295,
	-1, 750,
	115, 1111,
	248, 1111,
	254, 1111,
	-2, 296,
	-1, 751,
	115, 1059,
	248, 1059,
	254, 1059,
	-2, 297,
	-1, 752,
	115, 1056,
	248, 1056,
	254, 1056,
	-2, 298,
	-1, 753,
	115, 1048,
	248, 1048,
	254, 1048,
	-2, 299,
	-1, 755,
	115, 1120,
	248, 1120,
	254, 1120,
	-2, 301,
	-1, 758,
	115, 1029,
	248, 1029,
	254, 1029,
	-2, 271,
	-1, 759,
	115, 1109,
	248, 1109,
	254, 1109,
	-2, 314,
	-1, 760,
	115, 1110,
	248, 1110,
	254, 1110,
	-2, 314,
	-1, 761,
	115, 1030,
	248, 1030,
	254, 1030,
	-2, 314,
	-1, 762,
	115, 1031,
	248, 1031,
	254, 1031,
	-2, 314,
	-1, 763,
	115, 1032,
	248, 1032,
	254, 1032,
	-2, 314,
	-1, 764,
	115, 1100,
	248, 1100,
	254, 1100,
	-2, 277,
	-1, 765,
	115, 1134,
	248, 1134,
	254, 1134,
	-2, 278,
	-1, 766,
	115, 1040,
	248, 1040,
	254, 1040,
	-2, 304,
	-1, 767,
	115, 1077,
	248, 1077,
	254, 1077,
	-2, 305,
	-1, 768,
	115, 1055,
	248, 1055,
	254, 1055,
	-2, 306,
	-1, 769,
	115, 1078,
	248, 1078,
	254, 1078,
	-2, 307,
	-1, 770,
	115, 1041,
	248, 1041,
	254, 1041,
	-2, 308,
	-1, 771,
	115, 1065,
	248, 1065,
	254, 1065,
	-2, 309,
	-1, 772,
	115, 1064,
	248, 1064,
	254, 1064,
	-2, 310,
	-1, 773,
	115, 1066,
	248, 1066,
	254, 1066,
	-2, 311,
	-1, 774,
	115, 1015,
	248, 1015,
	254, 1015,
	-2, 253,
	-1, 775,
	115, 1112,
	248, 1112,
	254, 1112,
	-2, 254,
	-1, 776,
	115, 1101,
	248, 1101,
	254, 1101,
	-2, 255,
	-1, 777,
	115, 1103,
	248, 1103,
	254, 1103,
	-2, 256,
	-1, 778,
	115, 1060,
	248, 1060,
	254, 1060,
	-2, 257,
	-1, 779,
	115, 1045,
	248, 1045,
	254, 1045,
	-2, 258,
	-1, 780,
	115, 1046,
	248, 1046,
	254, 1046,
	-2, 259,
	-1, 781,
	115, 1094,
	248, 1094,
	254, 1094,
	-2, 260,
	-1, 782,
	115, 1013,
	248, 1013,
	254, 1013,
	-2, 261,
	-1, 783,
	115, 1014,
	248, 1014,
	254, 1014,
	-2, 262,
	-1, 784,
	115, 1085,
	248, 1085,
	254, 1085,
	-2, 316,
	-1, 785,
	115, 1034,
	248, 1034,
	254, 1034,
	-2, 316,
	-1, 786,
	115, 1038,
	248, 1038,
	254, 1038,
	-2, 316,
	-1, 787,
	115, 1033,
	248, 1033,
	254, 1033,
	-2, 318,
	-1, 788,
	115, 1072,
	248, 1072,
	254, 1072,
	-2, 318,
	-1, 789,
	115, 1063,
	248, 1063,
	254, 1063,
	-2, 269,
	-1, 790,
	115, 1102,
	248, 1102,
	254, 1102,
	-2, 270,
	-1, 868,
	118, 869,
	-2, 864,
	-1, 1009,
	141, 402,
	-2, 1027,
	-1, 1136,
	265, 876,
	-2, 528,
	-1, 1159,
	5, 28,
	-2, 653,
	-1, 1185,
	5, 27,
	-2, 805,
	-1, 1234,
	59, 375,
	-2, 372,
	-1, 1251,
	118, 867,
	-2, 243,
	-1, 1488,
	5, 27,
	-2, 94,
	-1, 1490,
	5, 27,
	-2, 96,
	-1, 1550,
	5, 28,
	-2, 806,
	-1, 1626,
	5, 27,
	-2, 95,
	-1, 1661,
	5, 27,
	-2, 808,
	-1, 1738,
	58, 107,
	-2, 177,
	-1, 1741,
	58, 107,
	-2, 177,
	-1, 1812,
	188, 54,
	-2, 177,
	-1, 1828,
	58, 107,
	-2, 176,
	-1, 1850,
	5, 28,
	-2, 809,
	-1, 2005,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 21194

var yyAct = [...]int16{
	366, 1716, 1957, 1673, 1622, 1838, 1719, 1769, 1188, 21,
	1081, 1676, 1813, 1802, 550, 1556, 1792, 1223, 1958, 797,
	957, 628, 724, 1201, 1621, 1827, 725, 313, 297, 1560,
	1400, 1226, 844, 975, 276, 92, 1583, 498, 92, 1431,
	259, 1401, 1302, 1573, 696, 995, 285, 1249, 1397, 1069,
	1151, 1857, 1004, 1090, 1089, 1019, 253, 998, 694, 53,
	281, 289, 92, 92, 1206, 263, 958, 893, 609, 1372,
	1255, 627, 3, 66, 925, 92, 1141, 921, 361, 803,
	535, 92, 1064, 92, 1193, 1147, 870, 712, 1286, 92,
	556, 1014, 537, 1045, 284, 711, 944, 683, 354, 286,
	254, 255, 256, 257, 698, 548, 341, 732, 954, 562,
	342, 726, 1742, 1268, 727, 651, 570, 1123, 268, 258,
	340, 920, 1366, 345, 1984, 265, 1037, 48, 26, 27,
	52, 1371, 1033, 1438, 272, 1950, 610, 351, 1458, 1730,
	1078, 1079, 506, 587, 588, 589, 590, 591, 584, 1040,
	28, 594, 584, 594, 1803, 594, 357, 499, 500, 1540,
	549, 349, 1444, 578, 1589, 581, 1445, 1597, 1875, 1876,
	1941, 596, 597, 598, 599, 600, 601, 602, 495, 579,
	580, 577, 603, 604, 605, 606, 583, 582, 592, 593,
	585, 586, 587, 588, 589, 590, 591, 584, 1247, 2018,
	594, 1922, 583, 582, 592, 593, 585, 586, 587, 588,
	589, 590, 591, 584, 508, 951, 594, 1036, 2011, 513,
	1848, 1774, 1996, 549, 585, 586, 587, 588, 589, 590,
	591, 584, 92, 1001, 594, 1082, 1760, 1148, 1149, 278,
	1773, 583, 582, 592, 593, 585, 586, 587, 588, 589,
	590, 591, 584, 1736, 1893, 594, 1202, 1144, 1934, 1921,
	1051, 281, 281, 1735, 1392, 583, 582, 592, 593, 585,
	586, 587, 588, 589, 590, 591, 584, 1847, 281, 594,
	1872, 1544, 514, 1423, 1541, 1561, 1562, 1563, 1564, 1565,
	1566, 281, 281, 281, 281, 281, 281, 281, 1449, 1214,
	1424, 1425, 1213, 989, 990, 1215, 988, 545, 1731, 1732,
	1734, 713, 1522, 714, 1733, 281, 1521, 538, 539, 540,
	1270, 543, 558, 835, 281, 1520, 1039, 1714, 547, 1537,
	836, 1041, 1260, 530, 1262, 1261, 559, 87, 83, 84,
	92, 85, 623, 1052, 1650, 611, 1146, 92, 92, 92,
	1940, 1439, 1942, 1033, 1034, 57, 1364, 499, 500, 1041,
	948, 1363, 1362, 1065, 1533, 583, 582, 592, 593, 585,
	586, 587, 588, 589, 590, 591, 584, 1531, 1022, 594,
	59, 60, 61, 62, 63, 252, 2016, 501, 1912, 595,
	795, 595, 1029, 595, 1017, 2009, 2008, 1992, 1993, 1955,
	1808, 1018, 532, 1718, 1692, 534, 1963, 805, 345, 805,
	583, 582, 592, 593, 585, 586, 587, 588, 589, 590,
	591, 584, 1365, 2010, 594, 1495, 1496, 1793, 1994, 49,
	1840, 549, 1538, 1839, 531, 533, 1342, 1658, 595, 955,
	1591, 656, 642, 1598, 804, 357, 541, 542, 657, 1502,
	1015, 1590, 1877, 1640, 595, 1241, 1447, 503, 1240, 1025,
	1228, 1020, 1030, 1761, 1818, 1512, 1503, 1016, 1437, 1027,
	1026, 1359, 595, 1971, 1989, 583, 582, 592, 593, 585,
	586, 587, 588, 589, 590, 591, 584, 1748, 2015, 594,
	709, 1586, 1233, 595, 507, 583, 582, 592, 593, 585,
	586, 587, 588, 589, 590, 591, 584, 1167, 1774, 594,
	703, 519, 86, 1246, 92, 81, 92, 595, 1933, 92,
	791, 1000, 92, 1052, 1629, 1962, 92, 794, 1066, 1648,
	615, 616, 617, 618, 619, 620, 621, 1231, 814, 1044,
	1581, 504, 1205, 1339, 1581, 1204, 1846, 92, 1203, 1881,
	583, 582, 592, 593, 585, 586, 587, 588, 589, 590,
	591, 584, 1234, 1883, 594, 80, 92, 81, 281, 281,
	792, 806, 807, 806, 807, 281, 529, 281, 1343, 1016,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 1023, 515, 813, 1878, 847,
	512, 1024, 231, 82, 823, 871, 2000, 1015, 824, 825,
	826, 827, 828, 829, 830, 831, 1765, 595, 1819, 1820,
	1821, 560, 832, 833, 1016, 281, 1553, 1584, 1585, 1587,
	1466, 281, 281, 281, 281, 281, 281, 281, 281, 872,
	976, 978, 281, 821, 793, 1166, 924, 796, 1351, 1340,
	613, 614, 1338, 868, 1031, 809, 1032, 1170, 1135, 842,
	716, 626, 595, 574, 525, 848, 1341, 867, 997, 996,
	1476, 1164, 1118, 281, 281, 281, 281, 1028, 92, 849,
	281, 92, 92, 92, 92, 92, 839, 1347, 864, 569,
	1785, 1165, 866, 92, 1784, 1783, 92, 1782, 1781, 877,
	92, 567, 931, 899, 1780, 92, 92, 896, 915, 918,
	657, 898, 302, 875, 876, 874, 281, 569, 1163, 927,
	1162, 977, 1779, 568, 567, 1777, 1477, 595, 1879, 1880,
	1882, 1884, 1885, 928, 930, 936, 938, 1492, 568, 567,
	569, 946, 345, 345, 345, 345, 345, 595, 942, 947,
	1216, 950, 1191, 613, 614, 569, 1119, 345, 715, 2007,
	568, 567, 2006, 983, 2004, 1394, 345, 931, 1346, 644,
	645, 646, 647, 648, 649, 650, 360, 569, 496, 959,
	945, 945, 505, 1175, 1225, 509, 510, 960, 800, 972,
	963, 1694, 961, 962, 92, 964, 1691, 92, 1858, 564,
	974, 357, 595, 92, 980, 92, 986, 985, 1935, 994,
	92, 981, 1237, 92, 1225, 92, 869, 1859, 92, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 1048, 1095, 1002, 1050, 1071, 518,
	923, 281, 281, 281, 281, 1974, 1973, 932, 933, 549,
	845, 846, 1939, 941, 1936, 281, 1690, 841, 1132, 1133,
	1134, 1224, 1125, 1236, 568, 567, 568, 567, 1067, 1068,
	1609, 1911, 1677, 1938, 1271, 937, 281, 281, 281, 1225,
	1085, 569, 1087, 569, 1225, 1679, 1042, 1043, 949, 1047,
	952, 953, 1049, 50, 1608, 1937, 840, 1860, 1271, 1116,
	568, 567, 871, 873, 265, 1856, 48, 26, 27, 1059,
	1060, 1061, 1062, 1063, 568, 567, 1277, 569, 1730, 1276,
	1271, 868, 1704, 281, 1795, 521, 522, 523, 1778, 28,
	281, 569, 1617, 1616, 1124, 867, 872, 1076, 568, 567,
	1454, 568, 567, 281, 1293, 1396, 281, 1291, 360, 360,
	360, 360, 1267, 360, 1071, 569, 1657, 50, 569, 1678,
	360, 1137, 625, 1614, 583, 582, 592, 593, 585, 586,
	587, 588, 589, 590, 591, 584, 1152, 1514, 594, 860,
	862, 863, 2024, 92, 1067, 1068, 861, 572, 1287, 894,
	1208, 895, 1210, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1243, 625, 79, 1806, 2023, 549, 1053, 1054, 1055, 1056,
	1578, 1995, 1945, 1145, 1775, 1142, 592, 593, 585, 586,
	587, 588, 589, 590, 591, 584, 1185, 1153, 594, 1156,
	1157, 92, 1736, 54, 281, 1665, 1981, 1159, 1160, 1161,
	1174, 1209, 1735, 78, 345, 1442, 1242, 1171, 1198, 1578,
	1946, 1891, 1177, 1578, 1929, 1178, 1179, 1441, 1180, 1181,
	1806, 1928, 1259, 339, 1440, 360, 1925, 1924, 1917, 549,
	1131, 1235, 718, 1217, 92, 1211, 549, 92, 1578, 1914,
	1257, 1578, 1913, 1665, 1836, 1826, 911, 1731, 1732, 1734,
	1084, 1219, 907, 1733, 820, 71, 76, 1280, 68, 1282,
	1283, 1284, 1285, 1229, 1230, 1232, 1665, 1701, 1665, 549,
	1799, 72, 819, 77, 801, 1138, 1139, 1140, 799, 92,
	92, 1668, 1667, 1665, 1666, 1578, 1577, 92, 527, 73,
	74, 69, 1420, 549, 1552, 549, 1798, 281, 1154, 1675,
	1483, 1482, 706, 281, 281, 1289, 1290, 1288, 520, 1292,
	1797, 1313, 1479, 1480, 1310, 23, 281, 1713, 1172, 1479,
	1478, 1155, 549, 929, 549, 1709, 281, 281, 281, 281,
	281, 281, 1311, 1708, 1308, 1303, 281, 680, 549, 1705,
	1183, 723, 722, 1610, 281, 1184, 707, 1807, 705, 1806,
	281, 281, 281, 1600, 1274, 281, 1344, 909, 281, 1398,
	1473, 1636, 1189, 23, 1399, 50, 1472, 908, 49, 731,
	731, 1467, 1402, 912, 1357, 1358, 595, 281, 1422, 1190,
	54, 1367, 913, 914, 1190, 1354, 1169, 1430, 1356, 360,
	1369, 1384, 1393, 1660, 1385, 1307, 1306, 910, 23, 1307,
	360, 360, 360, 360, 360, 360, 360, 360, 1408, 868,
	679, 281, 1407, 50, 360, 360, 1409, 982, 1404, 705,
	1368, 1189, 1155, 1391, 680, 929, 595, 1900, 1421, 1189,
	70, 1155, 1168, 1443, 851, 1548, 680, 1578, 1429, 1259,
	680, 1619, 1618, 959, 572, 1599, 1491, 360, 50, 959,
	1481, 1220, 987, 1155, 1446, 92, 75, 1257, 1455, 708,
	843, 50, 265, 1272, 1273, 2012, 1275, 92, 1278, 1279,
	1448, 1428, 1419, 1919, 1890, 1801, 1373, 1800, 1468, 1469,
	1457, 1471, 1789, 1459, 1474, 1475, 917, 917, 1788, 685,
	688, 689, 690, 686, 919, 687, 691, 92, 1745, 360,
	1744, 1966, 1715, 1703, 1641, 1638, 1465, 1041, 281, 939,
	1070, 1375, 50, 1486, 939, 92, 1464, 1462, 1451, 1415,
	281, 1498, 1516, 1499, 1413, 1294, 1295, 1968, 1065, 1248,
	1488, 1505, 1490, 1222, 1194, 1195, 855, 1058, 1057, 1046,
	1507, 65, 1360, 1361, 798, 1309, 1770, 1794, 1620, 1487,
	1398, 1197, 939, 817, 1510, 802, 1513, 281, 546, 971,
	1200, 689, 690, 1199, 281, 1386, 1387, 1388, 1389, 1390,
	1461, 1463, 966, 1517, 969, 965, 345, 1523, 967, 970,
	92, 360, 1920, 968, 1377, 269, 270, 1529, 1382, 360,
	1376, 1350, 1567, 1568, 1569, 1374, 496, 1120, 1130, 1129,
	563, 1380, 1221, 1281, 1356, 551, 1677, 721, 1547, 1555,
	528, 281, 1453, 1546, 1378, 1379, 561, 281, 552, 1679,
	1956, 1642, 1572, 1518, 1570, 1594, 1086, 1596, 845, 846,
	816, 1489, 1588, 1452, 1381, 1383, 1305, 1300, 1525, 1298,
	808, 693, 1593, 266, 267, 1259, 563, 281, 92, 1128,
	1534, 1535, 1536, 1985, 1635, 1539, 1494, 1127, 1436, 260,
	1943, 1754, 1751, 1257, 1601, 1072, 261, 54, 1750, 1549,
	1550, 1551, 360, 1554, 360, 1623, 1612, 1645, 1190, 1908,
	1574, 731, 1219, 1526, 1527, 1631, 1528, 1632, 1633, 1634,
	1530, 360, 1532, 1678, 1627, 1470, 1628, 1907, 281, 281,
	1630, 281, 281, 281, 1091, 1092, 1093, 685, 688, 689,
	690, 686, 347, 687, 691, 360, 1906, 1194, 1195, 1611,
	1905, 1626, 1874, 1873, 1435, 1434, 1607, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 565, 1787, 1402, 1786, 56, 1762,
	1239, 838, 1579, 1582, 1303, 1574, 58, 89, 274, 1314,
	1659, 1725, 8, 281, 1722, 7, 1723, 6, 281, 1519,
	1501, 1689, 1721, 5, 1672, 999, 1693, 1637, 704, 51,
	1, 1647, 1688, 1370, 502, 350, 1077, 1150, 1687, 281,
	622, 92, 1695, 1661, 301, 1991, 1961, 511, 1319, 1697,
	1646, 287, 1559, 516, 1901, 517, 1811, 1896, 1817, 572,
	1266, 524, 1021, 1710, 1796, 1245, 1729, 1623, 67, 1656,
	1892, 1805, 1493, 1304, 1323, 1720, 1083, 1746, 1301, 1706,
	1101, 1707, 1837, 1853, 1737, 1674, 1580, 1007, 1218, 494,
	64, 1776, 1008, 1669, 1670, 1671, 1006, 1005, 1003, 1035,
	1269, 1038, 730, 728, 729, 733, 1771, 239, 1402, 352,
	692, 1763, 1207, 717, 566, 1337, 1768, 1336, 1767, 1097,
	281, 1700, 1345, 834, 1320, 1316, 1312, 1753, 1321, 1318,
	1317, 360, 1117, 1772, 77, 544, 281, 241, 607, 1126,
	1212, 359, 1227, 1405, 555, 1322, 1749, 1644, 1173, 1729,
	639, 943, 1315, 1238, 1764, 288, 281, 281, 1809, 1613,
	1804, 1615, 859, 300, 1623, 299, 1264, 298, 850, 1834,
	1835, 281, 281, 1752, 1182, 281, 576, 1755, 1756, 1757,
	1758, 344, 676, 281, 791, 1829, 1830, 1831, 1832, 1833,
	1822, 1825, 684, 1842, 1579, 682, 1844, 1651, 1652, 681,
	1653, 1654, 1655, 1849, 526, 1854, 1196, 1297, 1649, 1810,
	1868, 1192, 343, 1353, 1869, 360, 1543, 1759, 854, 25,
	55, 281, 271, 19, 1790, 18, 1888, 1870, 281, 17,
	20, 1889, 16, 1886, 15, 14, 29, 13, 1729, 12,
	11, 10, 9, 1866, 1867, 1887, 1728, 1897, 360, 1623,
	1727, 1726, 1729, 1861, 1862, 1863, 1864, 1865, 1724, 1902,
	4, 1909, 262, 22, 2, 0, 0, 0, 360, 553,
	557, 1899, 0, 0, 0, 0, 1915, 0, 0, 1843,
	0, 0, 959, 0, 0, 1845, 575, 0, 0, 0,
	1850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 1926, 1927, 0, 0, 1930, 0,
	0, 0, 678, 1947, 0, 1944, 939, 1871, 0, 1406,
	1207, 702, 939, 629, 0, 1949, 1948, 0, 1729, 0,
	1931, 1932, 640, 1953, 1952, 1960, 0, 1951, 1959, 0,
	1729, 1729, 1729, 1965, 1967, 0, 1964, 0, 0, 0,
	1720, 360, 0, 1972, 0, 1432, 0, 1970, 0, 0,
	0, 0, 0, 1916, 92, 0, 0, 0, 1977, 0,
	1979, 281, 0, 0, 1978, 1980, 0, 0, 1982, 0,
	0, 0, 0, 1264, 1143, 0, 0, 1729, 0, 1729,
	1729, 0, 92, 0, 0, 1823, 1988, 0, 1809, 1988,
	1999, 1902, 2002, 0, 0, 2001, 2003, 0, 583, 582,
	592, 593, 585, 586, 587, 588, 589, 590, 591, 584,
	0, 0, 594, 0, 0, 0, 0, 0, 1485, 0,
	0, 2014, 0, 0, 2019, 0, 0, 0, 281, 2020,
	0, 0, 1500, 0, 0, 1504, 1729, 0, 1506, 0,
	1729, 0, 0, 0, 0, 0, 0, 1508, 0, 1988,
	583, 582, 592, 593, 585, 586, 587, 588, 589, 590,
	591, 584, 0, 0, 594, 1511, 0, 2005, 0, 0,
	0, 0, 0, 0, 360, 0, 810, 0, 811, 0,
	0, 815, 0, 1329, 818, 1997, 314, 47, 582, 592,
	593, 585, 586, 587, 588, 589, 590, 591, 584, 0,
	0, 594, 0, 2013, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 47, 0, 1557, 2025, 2026, 1557,
	1557, 1557, 264, 1571, 0, 0, 0, 0, 346, 0,
	360, 0, 360, 1330, 0, 0, 0, 0, 652, 1332,
	1325, 1326, 0, 1333, 1328, 1327, 857, 858, 0, 1335,
	1331, 0, 0, 0, 1557, 0, 0, 0, 0, 1264,
	1334, 1602, 0, 0, 0, 0, 0, 1324, 0, 360,
	0, 0, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1624,
	0, 0, 0, 0, 360, 360, 0, 0, 0, 0,
	0, 0, 0, 926, 1639, 0, 0, 0, 0, 629,
	0, 0, 934, 935, 0, 1643, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 0, 0, 0, 0, 0, 0, 2021, 984, 0,
	0, 0, 655, 0, 0, 1663, 1664, 0, 0, 0,
	670, 653, 0, 0, 0, 0, 659, 658, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 595, 0, 0, 0, 265, 0, 48, 26,
	27, 0, 0, 1696, 993, 0, 0, 0, 0, 0,
	1730, 0, 536, 536, 536, 536, 0, 536, 0, 0,
	0, 28, 0, 0, 536, 0, 0, 0, 0, 595,
	0, 1624, 1711, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 1717, 0, 0, 0, 1075, 0, 0, 1080,
	0, 1738, 0, 671, 1557, 1088, 608, 1094, 0, 0,
	612, 0, 1096, 0, 0, 1113, 0, 1114, 0, 0,
	1115, 0, 0, 0, 1990, 0, 0, 0, 1766, 624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	0, 641, 643, 643, 643, 643, 643, 643, 643, 643,
	0, 672, 673, 674, 675, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 1736, 0, 0, 0, 1624, 1121,
	1122, 0, 557, 0, 1735, 0, 0, 0, 0, 0,
	0, 0, 0, 1812, 1814, 1815, 1816, 0, 0, 0,
	0, 1828, 1738, 1738, 1828, 1738, 1738, 1432, 1432, 0,
	0, 554, 0, 652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 0, 0, 1851, 1731,
	1732, 1734, 0, 1852, 0, 1733, 0, 1855, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 654, 251,
	0, 1717, 1432, 265, 0, 48, 26, 27, 0, 0,
	0, 0, 0, 1624, 1432, 0, 0, 1730, 1158, 1894,
	0, 275, 0, 90, 90, 731, 0, 0, 28, 0,
	1904, 1107, 0, 0, 1176, 0, 90, 0, 0, 0,
	0, 1828, 90, 0, 90, 1106, 0, 0, 0, 0,
	90, 0, 1918, 0, 0, 0, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 0, 900, 901, 0,
	902, 903, 904, 906, 905, 1111, 897, 655, 0, 0,
	0, 1987, 0, 1244, 1105, 670, 653, 0, 0, 0,
	0, 659, 658, 536, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 1557, 536, 536, 536, 536, 536, 536,
	536, 536, 0, 1954, 0, 0, 0, 0, 536, 536,
	0, 0, 0, 0, 0, 0, 1296, 0, 0, 1299,
	0, 1736, 1432, 0, 0, 0, 1969, 0, 1102, 1099,
	1100, 1735, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 24, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 671, 1986,
	0, 42, 1109, 1112, 0, 0, 28, 0, 0, 1352,
	0, 0, 0, 0, 0, 0, 1731, 1732, 1734, 47,
	0, 0, 1733, 90, 0, 0, 265, 37, 48, 26,
	27, 50, 0, 0, 0, 0, 0, 630, 0, 0,
	1730, 0, 0, 360, 0, 0, 265, 0, 48, 26,
	27, 28, 0, 0, 0, 1717, 0, 0, 0, 0,
	1730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 346, 346, 346,
	346, 346, 0, 0, 1395, 0, 30, 31, 33, 32,
	35, 0, 695, 0, 979, 0, 0, 0, 0, 1410,
	1411, 346, 0, 1412, 0, 0, 1414, 1103, 0, 0,
	0, 0, 36, 43, 44, 0, 0, 45, 46, 34,
	0, 90, 0, 0, 0, 1426, 0, 49, 90, 700,
	90, 0, 265, 0, 48, 26, 27, 0, 0, 0,
	237, 0, 0, 0, 1736, 0, 1730, 1108, 0, 0,
	0, 0, 0, 0, 1735, 0, 0, 28, 0, 0,
	0, 0, 0, 1110, 1736, 0, 247, 1484, 38, 39,
	0, 40, 41, 0, 1735, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 0, 536, 1731,
	1732, 1734, 0, 0, 0, 1733, 0, 0, 0, 1509,
	0, 0, 0, 1910, 0, 536, 0, 0, 0, 1731,
	1732, 1734, 232, 0, 0, 1733, 0, 0, 234, 0,
	0, 0, 0, 1898, 0, 240, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	1736, 0, 0, 0, 1136, 0, 0, 238, 0, 0,
	1735, 242, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 90, 0, 0,
	90, 0, 0, 90, 0, 1545, 0, 822, 0, 0,
	0, 0, 629, 0, 0, 1731, 1732, 1734, 0, 0,
	49, 1733, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 233, 0, 90, 0, 0,
	0, 1186, 1187, 0, 0, 0, 822, 0, 0, 1595,
	1625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 235, 0, 243, 244, 245,
	246, 250, 0, 0, 0, 0, 249, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 275, 275, 0, 0, 0, 940, 275,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 275, 275, 275, 0, 90,
	0, 940, 90, 90, 90, 90, 90, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 90, 0, 0,
	0, 700, 0, 0, 0, 0, 90, 90, 0, 0,
	0, 0, 0, 1712, 0, 0, 0, 0, 0, 0,
	0, 1698, 0, 0, 0, 0, 1702, 0, 0, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 90, 0,
	0, 1403, 0, 47, 90, 0, 90, 0, 0, 0,
	0, 90, 0, 0, 90, 0, 90, 0, 0, 90,
	1416, 1417, 1418, 0, 0, 0, 0, 0, 1791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 1450,
	0, 0, 0, 0, 0, 1824, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 1841,
	629, 624, 0, 629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 47, 0, 0,
	0, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1895, 0, 0, 0,
	0, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 1524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1592, 0, 0, 0,
	0, 0, 0, 0, 1998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 90, 1983,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1349, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 0, 1403, 0, 0, 1662, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 1747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1265, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	757, 0, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 365, 0,
	1741, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 1739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	1265, 0, 90, 0, 0, 0, 0, 2017, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 1265, 784, 785,
	164, 786, 787, 788, 790, 789, 759, 760, 761, 765,
	763, 762, 764, 736, 738, 208, 734, 737, 743, 739,
	740, 741, 755, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 756, 766, 767, 768, 769, 770,
	771, 772, 773, 0, 940, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 735,
	136, 0, 217, 0, 168, 122, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 480, 469, 0, 429, 482, 399, 417,
	490, 419, 420, 456, 378, 439, 159, 414, 396, 96,
	402, 371, 409, 372, 400, 431, 120, 397, 0, 471,
	442, 134, 229, 230, 488, 137, 447, 0, 183, 147,
	0, 0, 434, 473, 437, 464, 428, 457, 386, 446,
	483, 415, 452, 484, 0, 0, 0, 365, 0, 1575,
	1576, 0, 0, 0, 0, 0, 109, 0, 451, 478,
	411, 493, 0, 455, 370, 449, 0, 376, 379, 489,
	476, 406, 407, 0, 0, 0, 0, 0, 0, 0,
	433, 438, 461, 425, 0, 1976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 445, 0,
	0, 0, 383, 377, 0, 430, 0, 0, 0, 385,
	0, 404, 462, 90, 367, 467, 474, 427, 143, 210,
	477, 424, 423, 166, 0, 112, 0, 189, 124, 416,
	135, 459, 491, 481, 435, 472, 401, 410, 114, 408,
	173, 160, 201, 444, 161, 171, 138, 193, 167, 200,
	479, 211, 212, 191, 209, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 222, 223, 224, 225, 226, 227,
	228, 375, 368, 405, 465, 468, 390, 454, 380, 412,
	460, 413, 436, 395, 0, 0, 0, 0, 0, 182,
	181, 97, 190, 199, 110, 177, 100, 197, 186, 188,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 187, 148, 194, 195, 115, 219, 117,
	116, 185, 105, 207, 208, 102, 106, 206, 153, 158,
	156, 205, 192, 198, 146, 142, 0, 101, 196, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 373,
	0, 184, 203, 220, 221, 374, 394, 475, 213, 214,
	215, 216, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 218, 453, 174, 111, 202, 180, 0, 389,
	393, 387, 388, 440, 441, 485, 486, 487, 463, 384,
	0, 391, 392, 0, 470, 129, 443, 95, 103, 136,
	492, 217, 0, 168, 122, 204, 0, 0, 418, 369,
	422, 0, 0, 0, 0, 0, 0, 0, 381, 382,
	175, 426, 421, 448, 450, 458, 466, 0, 398, 432,
	0, 108, 480, 469, 0, 429, 482, 399, 417, 490,
	419, 420, 456, 378, 439, 159, 414, 396, 96, 402,
	371, 409, 372, 400, 431, 120, 397, 0, 471, 442,
	134, 229, 230, 488, 137, 447, 0, 183, 147, 0,
	0, 434, 473, 437, 464, 428, 457, 386, 446, 483,
	415, 452, 484, 0, 0, 0, 280, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 451, 478, 411,
	493, 0, 455, 370, 449, 0, 376, 379, 489, 476,
	406, 407, 0, 0, 0, 0, 0, 0, 0, 433,
	438, 461, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 403, 0, 445, 0, 0,
	0, 383, 377, 0, 430, 0, 0, 0, 385, 0,
	404, 462, 0, 367, 467, 474, 427, 143, 210, 477,
	424, 423, 166, 0, 112, 0, 189, 124, 416, 135,
	459, 491, 481, 435, 472, 401, 410, 114, 408, 173,
	160, 201, 444, 161, 171, 138, 193, 167, 200, 479,
	211, 212, 191, 209, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 222, 223, 224, 225, 226, 227, 228,
	375, 368, 405, 465, 468, 390, 454, 380, 412, 460,
	413, 436, 395, 0, 0, 0, 0, 0, 182, 181,
	97, 190, 199, 110, 177, 100, 197, 186, 188, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 187, 148, 194, 195, 115, 219, 117, 116,
	185, 105, 207, 208, 102, 106, 206, 153, 158, 156,
	205, 192, 198, 146, 142, 0, 101, 196, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 373, 0,
	184, 203, 220, 221, 374, 394, 475, 213, 214, 215,
	216, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 218, 453, 174, 111, 202, 180, 0, 389, 393,
	387, 388, 440, 441, 485, 486, 487, 463, 384, 0,
	391, 392, 0, 470, 129, 443, 95, 103, 136, 492,
	217, 0, 168, 122, 204, 0, 0, 418, 369, 422,
	0, 0, 0, 0, 0, 0, 0, 381, 382, 175,
	426, 421, 448, 450, 458, 466, 0, 398, 432, 0,
	108, 480, 469, 0, 429, 482, 399, 417, 490, 419,
	420, 456, 378, 439, 159, 414, 396, 96, 402, 371,
	409, 372, 400, 431, 120, 397, 0, 471, 442, 134,
	229, 230, 488, 137, 447, 0, 183, 147, 0, 0,
	434, 473, 437, 464, 428, 457, 386, 446, 483, 415,
	452, 484, 0, 0, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 451, 478, 411, 493,
	0, 455, 370, 449, 0, 376, 379, 489, 476, 406,
	407, 1427, 0, 0, 0, 0, 0, 0, 433, 438,
	461, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 445, 0, 0, 0,
	383, 377, 0, 430, 0, 0, 0, 385, 0, 404,
	462, 0, 367, 467, 474, 427, 143, 210, 477, 424,
	423, 166, 0, 112, 0, 189, 124, 416, 135, 459,
	491, 481, 435, 472, 401, 410, 114, 408, 173, 160,
	201, 444, 161, 171, 138, 193, 167, 200, 479, 211,
	212, 191, 209, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 222, 223, 224, 225, 226, 227, 228, 375,
	368, 405, 465, 468, 390, 454, 380, 412, 460, 413,
	436, 395, 0, 0, 0, 0, 0, 182, 181, 97,
	190, 199, 110, 177, 100, 197, 186, 188, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 187, 148, 194, 195, 115, 219, 117, 116, 185,
	105, 207, 208, 102, 106, 206, 153, 158, 156, 205,
	192, 198, 146, 142, 0, 101, 196, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 373, 0, 184,
	203, 220, 221, 374, 394, 475, 213, 214, 215, 216,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	218, 453, 174, 111, 202, 180, 0, 389, 393, 387,
	388, 440, 441, 485, 486, 487, 463, 384, 0, 391,
	392, 0, 470, 129, 443, 95, 103, 136, 492, 217,
	0, 168, 122, 204, 0, 0, 418, 369, 422, 0,
	0, 0, 0, 0, 0, 0, 381, 382, 175, 426,
	421, 448, 450, 458, 466, 0, 398, 432, 0, 108,
	480, 469, 0, 429, 482, 399, 417, 490, 419, 420,
	456, 378, 439, 159, 414, 396, 96, 402, 371, 409,
	372, 400, 431, 120, 397, 0, 471, 442, 134, 229,
	230, 488, 137, 447, 0, 183, 147, 0, 0, 434,
	473, 437, 464, 428, 457, 386, 446, 483, 415, 452,
	484, 0, 0, 0, 280, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 451, 478, 411, 493, 0,
	455, 370, 449, 0, 376, 379, 489, 476, 406, 407,
	0, 0, 0, 0, 0, 0, 0, 433, 438, 461,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 403, 0, 445, 0, 0, 0, 383,
	377, 0, 430, 0, 0, 0, 385, 0, 404, 462,
	0, 367, 467, 474, 427, 143, 210, 477, 424, 423,
	166, 0, 112, 0, 189, 124, 416, 135, 459, 491,
	481, 435, 472, 401, 410, 114, 408, 173, 160, 201,
	444, 161, 171, 138, 193, 167, 200, 479, 211, 212,
	191, 209, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 222, 223, 224, 225, 226, 227, 228, 375, 368,
	405, 465, 468, 390, 454, 380, 412, 460, 413, 436,
	395, 0, 0, 0, 0, 0, 182, 181, 97, 190,
	199, 110, 177, 100, 197, 186, 188, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	187, 148, 194, 195, 115, 219, 117, 116, 185, 105,
	207, 208, 102, 106, 206, 153, 158, 156, 205, 192,
	198, 146, 142, 0, 101, 196, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 373, 0, 184, 203,
	220, 221, 374, 394, 475, 213, 214, 215, 216, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 218,
	453, 174, 111, 202, 180, 0, 389, 393, 387, 388,
	440, 441, 485, 486, 487, 463, 384, 0, 391, 392,
	0, 470, 129, 443, 95, 103, 136, 492, 217, 0,
	168, 122, 204, 0, 0, 418, 369, 422, 0, 0,
	0, 0, 0, 0, 0, 381, 382, 175, 426, 421,
	448, 450, 458, 466, 0, 398, 432, 0, 108, 480,
	469, 0, 429, 482, 399, 417, 490, 419, 420, 456,
	378, 439, 159, 414, 396, 96, 402, 371, 409, 372,
	400, 431, 120, 397, 0, 471, 442, 134, 229, 230,
	488, 137, 447, 0, 183, 147, 0, 0, 434, 473,
	437, 464, 428, 457, 386, 446, 483, 415, 452, 484,
	0, 0, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 451, 478, 411, 493, 0, 455,
	370, 449, 0, 376, 379, 489, 476, 406, 407, 0,
	0, 0, 0, 0, 0, 0, 433, 438, 461, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 403, 0, 445, 0, 0, 0, 383, 377,
	0, 430, 0, 0, 0, 385, 0, 404, 462, 0,
	367, 467, 474, 427, 143, 210, 477, 424, 423, 166,
	0, 112, 0, 189, 124, 416, 135, 459, 491, 481,
	435, 472, 401, 410, 114, 408, 173, 160, 201, 444,
	161, 171, 138, 193, 167, 200, 479, 211, 212, 191,
	209, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	222, 223, 224, 225, 226, 227, 228, 375, 368, 405,
	465, 468, 390, 454, 380, 412, 460, 413, 436, 395,
	0, 0, 0, 0, 0, 182, 181, 97, 190, 199,
	110, 177, 100, 197, 186, 188, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 187,
	148, 194, 195, 115, 219, 117, 116, 185, 105, 207,
	208, 102, 106, 206, 153, 158, 156, 205, 192, 198,
	146, 142, 0, 101, 196, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 373, 0, 184, 203, 220,
	221, 374, 394, 475, 213, 214, 215, 216, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 218, 453,
	174, 111, 202, 180, 0, 389, 393, 387, 388, 440,
	441, 485, 486, 487, 463, 384, 0, 391, 392, 0,
	470, 129, 443, 95, 103, 136, 492, 217, 0, 168,
	122, 204, 0, 0, 418, 369, 422, 0, 0, 0,
	0, 0, 0, 0, 381, 382, 175, 426, 421, 448,
	450, 458, 466, 0, 398, 432, 0, 108, 480, 469,
	0, 429, 482, 399, 417, 490, 419, 420, 456, 378,
	439, 159, 414, 396, 96, 402, 371, 409, 372, 400,
	431, 120, 397, 0, 471, 442, 134, 229, 230, 488,
	137, 447, 0, 183, 147, 0, 0, 434, 473, 437,
	464, 428, 457, 386, 446, 483, 415, 452, 484, 50,
	0, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 451, 478, 411, 493, 0, 455, 370,
	449, 0, 376, 379, 489, 476, 406, 407, 0, 0,
	0, 0, 0, 0, 0, 433, 438, 461, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 445, 0, 0, 0, 383, 377, 0,
	430, 0, 0, 0, 385, 0, 404, 462, 0, 367,
	467, 474, 427, 143, 210, 477, 424, 423, 166, 0,
	112, 0, 189, 124, 416, 135, 459, 491, 481, 435,
	472, 401, 410, 114, 408, 173, 160, 201, 444, 161,
	171, 138, 193, 167, 200, 479, 211, 212, 191, 209,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 222,
	223, 224, 225, 226, 227, 228, 375, 368, 405, 465,
	468, 390, 454, 380, 412, 460, 413, 436, 395, 0,
	0, 0, 0, 0, 182, 181, 97, 190, 199, 110,
	177, 100, 197, 186, 188, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 187, 148,
	194, 195, 115, 219, 117, 116, 185, 105, 207, 208,
	102, 106, 206, 153, 158, 156, 205, 192, 198, 146,
	142, 0, 101, 196, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 373, 0, 184, 203, 220, 221,
	374, 394, 475, 213, 214, 215, 216, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 218, 453, 174,
	111, 202, 180, 0, 389, 393, 387, 388, 440, 441,
	485, 486, 487, 463, 384, 0, 391, 392, 0, 470,
	129, 443, 95, 103, 136, 492, 217, 0, 168, 122,
	204, 0, 0, 418, 369, 422, 0, 0, 0, 0,
	0, 0, 0, 381, 382, 175, 426, 421, 448, 450,
	458, 466, 0, 398, 432, 0, 108, 480, 469, 0,
	429, 482, 399, 417, 490, 419, 420, 456, 378, 439,
	159, 414, 396, 96, 402, 371, 409, 372, 400, 431,
	120, 397, 0, 471, 442, 134, 229, 230, 488, 137,
	447, 0, 183, 147, 0, 0, 434, 473, 437, 464,
	428, 457, 386, 446, 483, 415, 452, 484, 0, 0,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 451, 478, 411, 493, 0, 455, 370, 449,
	0, 376, 379, 489, 476, 406, 407, 0, 0, 0,
	0, 0, 0, 0, 433, 438, 461, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 0, 445, 0, 0, 0, 383, 377, 0, 430,
	0, 0, 0, 385, 0, 404, 462, 0, 367, 467,
	474, 427, 143, 210, 477, 424, 423, 166, 0, 112,
	0, 189, 124, 416, 135, 459, 491, 481, 435, 472,
	401, 410, 114, 408, 173, 160, 201, 444, 161, 171,
	138, 193, 167, 200, 479, 211, 212, 191, 209, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 222, 223,
	224, 225, 226, 227, 228, 375, 368, 405, 465, 468,
	390, 454, 380, 412, 460, 413, 436, 395, 0, 0,
	0, 0, 0, 182, 181, 97, 190, 199, 110, 177,
	100, 197, 186, 188, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 187, 148, 194,
	195, 115, 219, 117, 116, 185, 105, 207, 208, 102,
	363, 206, 153, 158, 156, 205, 192, 198, 146, 142,
	0, 101, 196, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 373, 0, 184, 203, 220, 221, 374,
	394, 475, 213, 214, 215, 216, 0, 0, 0, 364,
	362, 128, 178, 132, 139, 169, 218, 453, 174, 111,
	202, 180, 358, 389, 393, 387, 388, 440, 441, 485,
	486, 487, 463, 384, 0, 391, 392, 0, 470, 129,
	443, 95, 103, 136, 492, 217, 0, 168, 122, 204,
	0, 0, 418, 369, 422, 0, 0, 0, 0, 0,
	0, 0, 381, 382, 175, 426, 421, 448, 450, 458,
	466, 0, 398, 432, 0, 108, 480, 469, 0, 429,
	482, 399, 417, 490, 419, 420, 456, 378, 439, 159,
	414, 396, 96, 402, 371, 409, 372, 400, 431, 120,
	397, 0, 471, 442, 134, 229, 230, 488, 137, 447,
	0, 183, 147, 0, 0, 434, 473, 437, 464, 428,
	457, 386, 446, 483, 415, 452, 484, 0, 0, 0,
	91, 0, 93, 0, 0, 0, 0, 0, 0, 109,
	0, 451, 478, 411, 493, 0, 455, 370, 449, 0,
	376, 379, 489, 476, 406, 407, 0, 0, 0, 0,
	0, 0, 0, 433, 438, 461, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 445, 0, 0, 0, 383, 377, 0, 430, 0,
	0, 0, 385, 0, 404, 462, 0, 367, 467, 474,
	427, 143, 210, 477, 424, 423, 166, 0, 112, 0,
	189, 124, 416, 135, 459, 491, 481, 435, 472, 401,
	410, 114, 408, 173, 160, 201, 444, 161, 171, 138,
	193, 167, 200, 479, 211, 212, 191, 209, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 222, 223, 224,
	225, 226, 227, 228, 375, 368, 405, 465, 468, 390,
	454, 380, 412, 460, 413, 436, 395, 0, 0, 0,
	0, 0, 182, 181, 97, 190, 199, 110, 177, 100,
	197, 186, 188, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 187, 148, 194, 195,
	115, 219, 117, 116, 185, 105, 207, 208, 102, 106,
	206, 153, 158, 156, 205, 192, 198, 146, 142, 0,
	101, 196, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 373, 0, 184, 203, 220, 221, 374, 394,
	475, 213, 214, 215, 216, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 218, 453, 174, 111, 202,
	180, 0, 389, 393, 387, 388, 440, 441, 485, 486,
	487, 463, 384, 0, 391, 392, 0, 470, 129, 443,
	95, 103, 136, 492, 217, 0, 168, 122, 204, 0,
	0, 418, 369, 422, 0, 0, 0, 0, 0, 0,
	0, 381, 382, 175, 426, 421, 448, 450, 458, 466,
	0, 398, 432, 0, 108, 480, 469, 0, 429, 482,
	399, 417, 490, 419, 420, 456, 378, 439, 159, 414,
	396, 96, 402, 371, 409, 372, 400, 431, 120, 397,
	0, 471, 442, 134, 229, 230, 488, 137, 447, 0,
	183, 147, 0, 0, 434, 473, 437, 464, 428, 457,
	386, 446, 483, 415, 452, 484, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	451, 478, 411, 493, 0, 455, 370, 449, 0, 376,
	379, 489, 476, 406, 407, 0, 0, 0, 0, 0,
	0, 0, 433, 438, 461, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	445, 0, 0, 0, 383, 377, 0, 430, 0, 0,
	0, 385, 0, 404, 462, 0, 367, 467, 474, 427,
	143, 210, 477, 424, 423, 166, 0, 112, 0, 189,
	124, 416, 135, 459, 491, 481, 435, 472, 401, 410,
	114, 408, 173, 160, 201, 444, 161, 171, 138, 193,
	167, 200, 479, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 375, 368, 405, 465, 468, 390, 454,
	380, 412, 460, 413, 436, 395, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 710, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 363, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 373, 0, 184, 203, 220, 221, 374, 394, 475,
	213, 214, 215, 216, 0, 0, 0, 364, 362, 128,
	178, 132, 139, 169, 218, 453, 174, 111, 202, 180,
	358, 389, 393, 387, 388, 440, 441, 485, 486, 487,
	463, 384, 0, 391, 392, 0, 470, 129, 443, 95,
	103, 136, 492, 217, 0, 168, 122, 204, 0, 0,
	418, 369, 422, 0, 0, 0, 0, 0, 0, 0,
	381, 382, 175, 426, 421, 448, 450, 458, 466, 0,
	398, 432, 0, 108, 480, 469, 0, 429, 482, 399,
	417, 490, 419, 420, 456, 378, 439, 159, 414, 396,
	96, 402, 371, 409, 372, 400, 431, 120, 397, 0,
	471, 442, 134, 229, 230, 488, 137, 447, 0, 183,
	147, 0, 0, 434, 473, 437, 464, 428, 457, 386,
	446, 483, 415, 452, 484, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 451,
	478, 411, 493, 0, 455, 370, 449, 0, 376, 379,
	489, 476, 406, 407, 0, 0, 0, 0, 0, 0,
	0, 433, 438, 461, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 403, 0, 445,
	0, 0, 0, 383, 377, 0, 430, 0, 0, 0,
	385, 0, 404, 462, 0, 367, 467, 474, 427, 143,
	210, 477, 424, 423, 166, 0, 112, 0, 189, 124,
	416, 135, 459, 491, 481, 435, 472, 401, 410, 114,
	408, 173, 160, 201, 444, 161, 171, 138, 193, 167,
	200, 479, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 375, 368, 405, 465, 468, 390, 454, 380,
	412, 460, 413, 436, 395, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 353, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 363, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	373, 0, 184, 203, 220, 221, 374, 394, 475, 213,
	214, 215, 216, 0, 0, 0, 364, 362, 356, 355,
	132, 139, 169, 218, 453, 174, 111, 202, 180, 358,
	389, 393, 387, 388, 440, 441, 485, 486, 487, 463,
	384, 0, 391, 392, 0, 470, 129, 443, 95, 103,
	136, 492, 217, 0, 168, 122, 204, 0, 0, 418,
	369, 422, 0, 0, 0, 0, 0, 0, 0, 381,
	382, 175, 426, 421, 448, 450, 458, 466, 0, 398,
	432, 0, 108, 480, 469, 0, 429, 482, 399, 417,
	490, 419, 420, 456, 378, 439, 159, 414, 396, 96,
	402, 371, 409, 372, 400, 431, 120, 397, 0, 471,
	442, 134, 229, 230, 488, 137, 447, 0, 183, 147,
	0, 0, 434, 473, 437, 464, 428, 457, 386, 446,
	483, 415, 452, 484, 0, 0, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 451, 478,
	411, 493, 0, 455, 370, 449, 0, 376, 379, 489,
	476, 406, 407, 0, 0, 0, 0, 0, 0, 0,
	433, 438, 461, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 445, 0,
	0, 0, 383, 377, 0, 430, 0, 0, 0, 385,
	0, 404, 462, 0, 367, 467, 474, 427, 143, 210,
	477, 424, 423, 166, 0, 112, 0, 189, 124, 416,
	135, 459, 491, 481, 435, 472, 401, 410, 114, 408,
	173, 160, 201, 444, 161, 171, 138, 193, 167, 200,
	479, 211, 212, 191, 209, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 222, 223, 224, 225, 226, 227,
	228, 375, 368, 405, 465, 468, 390, 454, 380, 412,
	460, 413, 436, 395, 0, 0, 0, 0, 0, 182,
	181, 97, 190, 199, 110, 177, 100, 197, 186, 188,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 187, 148, 194, 195, 115, 219, 117,
	116, 185, 105, 207, 208, 102, 106, 206, 153, 158,
	156, 205, 192, 198, 146, 142, 0, 101, 196, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 373,
	0, 184, 203, 220, 221, 374, 394, 475, 213, 214,
	215, 216, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 218, 453, 174, 111, 202, 180, 0, 389,
	393, 387, 388, 440, 441, 485, 486, 487, 463, 384,
	0, 391, 392, 0, 470, 129, 443, 95, 103, 136,
	492, 217, 0, 168, 122, 204, 0, 0, 418, 369,
	422, 0, 0, 0, 0, 0, 0, 0, 381, 382,
	175, 426, 421, 448, 450, 458, 466, 159, 398, 432,
	96, 108, 0, 283, 0, 0, 0, 120, 279, 0,
	0, 0, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 0, 0, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 991, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 992, 0, 0, 0, 277, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 922, 0, 283, 0, 0, 0, 120, 279, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 277, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 273, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 283, 0, 0, 0, 120, 279, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 549, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 277, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 283, 0, 0, 0, 120, 279, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 277, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 273, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 23, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 283, 0, 0, 0, 120, 279, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 277, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 283, 0, 0, 0, 120, 279, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 277, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 0, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 2022, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 283, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 0, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 324, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 315, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 280, 303,
	282, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	310, 311, 0, 0, 0, 0, 0, 295, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 334, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 338, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 312,
	325, 335, 331, 332, 329, 330, 328, 327, 326, 337,
	317, 318, 319, 320, 322, 0, 129, 321, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 333, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 280, 0,
	1251, 1252, 1253, 0, 0, 0, 0, 109, 1256, 1254,
	310, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 1258, 1263, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	1260, 0, 1262, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1250, 0, 0, 280, 0,
	1251, 1252, 1253, 0, 0, 0, 0, 109, 1256, 1254,
	310, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 1258, 1263, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	1260, 0, 1262, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	1251, 1252, 1253, 0, 0, 0, 0, 109, 1256, 1254,
	310, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 1258, 1263, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	1260, 0, 1262, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 303,
	916, 305, 306, 307, 308, 0, 0, 109, 304, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	757, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 1903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 0, 784, 785,
	164, 786, 787, 788, 790, 789, 759, 760, 761, 765,
	763, 762, 764, 736, 738, 208, 734, 737, 743, 739,
	740, 741, 755, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 756, 766, 767, 768, 769, 770,
	771, 772, 773, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 735,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 571, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	573, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 568, 567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	757, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 0, 784, 785,
	164, 786, 787, 788, 790, 789, 759, 760, 761, 765,
	763, 762, 764, 736, 738, 208, 734, 737, 743, 739,
	740, 741, 755, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 756, 766, 767, 768, 769, 770,
	771, 772, 773, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 735,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 365, 0,
	1741, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	497, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 143,
	210, 0, 0, 0, 1010, 0, 1009, 0, 1011, 1012,
	0, 135, 0, 0, 1013, 1016, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 1604, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 1603, 206, 153,
	158, 156, 205, 1605, 198, 146, 142, 0, 101, 196,
	144, 141, 1606, 914, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 910, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 91, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 1975, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 1433, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 699, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	701, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 91, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1074,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	0, 852, 0, 0, 853, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 812, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 720, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 0,
	719, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 699, 0, 0, 0, 0, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	701, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 697, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 217, 0, 168, 122, 204, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 677, 120, 0, 0,
	0, 175, 134, 229, 230, 0, 137, 0, 0, 183,
	147, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	210, 0, 0, 0, 166, 0, 112, 0, 189, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 201, 0, 161, 171, 138, 193, 167,
	200, 0, 211, 212, 191, 209, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 222, 223, 224, 225, 226,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 181, 97, 190, 199, 110, 177, 100, 197, 186,
	188, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 187, 148, 194, 195, 115, 219,
	117, 116, 185, 105, 207, 208, 102, 106, 206, 153,
	158, 156, 205, 192, 198, 146, 142, 0, 101, 196,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 184, 203, 220, 221, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 218, 0, 174, 111, 202, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 348, 217, 0, 168, 122, 204, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 175, 0, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 1433, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 1558, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 93, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 701, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 595, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 573, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 497, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 175, 134, 229, 230, 0, 137, 0, 0,
	183, 147, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 210, 0, 0, 0, 166, 0, 112, 0, 189,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 201, 0, 161, 171, 138, 193,
	167, 200, 0, 211, 212, 191, 209, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 222, 223, 224, 225,
	226, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 181, 97, 190, 199, 110, 177, 100, 197,
	186, 188, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 187, 148, 194, 195, 115,
	219, 117, 116, 185, 105, 207, 208, 102, 106, 206,
	153, 158, 156, 205, 192, 198, 146, 142, 0, 101,
	196, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 184, 203, 220, 221, 0, 0, 0,
	213, 214, 215, 216, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 218, 0, 174, 111, 202, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 217, 0, 168, 122, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108,
}

var yyPact = [...]int16{
	2645, -1000, -225, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1492, 1573, -1000, -1000, -1000, -1000, -1000, -1000, 1325,
	968, 434, 475, 210, 18050, 474, 2787, 18360, -1000, 180,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1232, -1000, -1000,
	-1000, -1000, -1000, 1482, 1490, 1296, 1462, 1383, -1000, 9059,
	382, 15259, 17740, 7449, -1000, 20530, -183, 256, 410, 20840,
	360, 360, 20840, 20840, 18360, 472, 360, -1000, -28, 468,
	18360, -1000, 18360, 377, 1089, 377, 377, 377, 18360, -1000,
	546, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18360, 1069, 1419, 274, 6053, 6053, 6053, 6053, 281,
	6053, 22, 1344, -1000, -1000, -1000, -1000, 6053, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 947, 1426,
	9679, 9679, 1492, -1000, 1232, -1000, -1000, -1000, 1418, -1000,
	-1000, 732, 1563, -1000, 12469, 545, -1000, 9679, 86, 1245,
	-1000, -1000, -216, 1245, -1000, -1000, 531, -1000, -1000, -1000,
	10609, 10609, 10609, 10609, 10609, 10609, 10609, -1000, -1000, -1000,
	-1000, 77, 901, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 543, -1000, 9369, 1245, 1245, 1245, 1245, 1245,
	1245, 1245, 1245, 9679, 1245, 1245, 1245, 1245, 1245, 1245,
	1245, 1245, 1245, 2033, 1245, 1245, 1245, 1245, -1000, 17429,
	1219, 1285, -1000, -1000, -1000, 1458, 14019, 17119, 18360, 1131,
	-1000, 1242, 7100, 20, -1000, -1000, -1000, 673, 542, 16809,
	-1000, -1000, -1000, 1416, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1124, -1000, 12779, 12779, 441, -1000,
	-1000, 360, 396, 188, 360, 1329, 1059, 711, 1055, 1341,
	390, 1457, 360, 18360, -1000, 16499, 6053, 406, 18360, 1446,
	1339, 18360, 1053, 1035, -1000, 6751, -1000, 6053, 6053, 6053,
	6053, 6053, 6053, 6053, 6053, -1000, -1000, -1000, -1000, -1000,
	-1000, 6053, 6053, -1000, 44, -1000, 18360, -1000, -1000, -1000,
	-1000, 1572, 591, 839, 541, 1243, -1000, 825, 1482, 947,
	1383, 16189, 1331, -1000, -1000, 18360, -1000, 9679, 9679, 909,
	-1000, 20220, -1000, -1000, 4657, 597, 10609, 837, 620, 10609,
	10609, 10609, 10609, 10609, 10609, 10609, 10609, 10609, 10609, 10609,
	10609, 10609, 10609, 10609, 930, 2348, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1033, -1000,
	969, -1000, 1232, 11849, 11849, 39, 39, 39, 39, 39,
	39, 19910, -1000, -235, 8439, -1000, 7798, 947, 1106, 685,
	9369, 9059, 9059, 9679, 9679, 10609, 19290, 9059, 1464, 699,
	685, 19290, -1000, 947, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 124, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9059, 9059, 9059, 9059, 283, 18360, -1000, 19290,
	15259, 15259, 15259, 15259, 15259, -1000, 1371, 1368, -1000, 1374,
	1370, 1355, 18360, -1000, 1120, 14019, 588, 1245, -1000, 19600,
	-1000, -1000, 283, 1202, 15259, 18360, -1000, -1000, 6402, 1242,
	20, 1235, -1000, 14, 9, 8129, 7798, 554, -1000, -1000,
	-1000, -1000, 198, 13399, 324, -139, 52, -1000, -1000, -1000,
	-1000, -1000, 1291, -1000, -1000, -1000, 1291, 303, 1323, 1291,
	1323, -1000, 1291, 1323, 105, 105, 105, 105, 105, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1322, 1321, -1000, 1291,
	1291, 1291, 1291, 1291, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1312, 307, 1312, 1294, 1294, -1000,
	-1000, 324, 15879, 18360, 360, -210, 18360, -87, 1031, 6053,
	1442, 6053, 18360, 1536, 18360, -1000, -1000, -1000, 12779, 18360,
	-1000, 2516, 18360, -1000, 18360, -1000, -1000, 18360, 6053, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 661, -1000, -1000, -1000, -1000, 1397,
	9679, 9679, 5355, 9679, -1000, -1000, -1000, 1426, -1000, 1464,
	1478, -1000, 1403, 1402, 9059, -1000, -1000, 597, 625, -1000,
	-1000, 788, -1000, -1000, -1000, -1000, 540, 1245, -1000, 1940,
	-1000, -1000, -1000, -1000, 837, 10609, 10609, 10609, 864, 1940,
	1888, 914, 1977, 39, 37, 37, 41, 41, 41, 41,
	41, 120, 120, -1000, -1000, -1000, -1000, -65, -1000, 1291,
	1312, 307, 1312, 1294, 1294, -1000, -1000, 947, 110, -85,
	-1000, -1000, -1000, -1000, -1000, -1000, -216, 940, -1000, -1000,
	915, 947, 9059, 1104, 1106, -1000, 12469, -1000, -1000, 9679,
	-1000, 947, 1104, 1104, 663, 648, 634, 450, 1215, -1000,
	539, 1104, 9059, 700, -1000, 9679, 947, -1000, -1000, 1104,
	947, 1236, 1104, 1104, 1149, 1245, -1000, 1212, -1000, 667,
	1285, 1320, 1337, 1503, -1000, -1000, -1000, -1000, 1359, -1000,
	1356, -1000, -1000, -1000, -1000, -66, 419, 416, 413, 20840,
	-1000, 1506, 15259, 1207, -1000, -1000, 1235, 20, 6, -1000,
	-1000, -1000, -1000, 685, 665, -1000, -1000, 1014, 7798, 1234,
	1408, -1000, -1000, -1000, -1000, -1000, -1000, 1317, 807, 20840,
	314, 321, 478, 433, 1012, -1000, -1000, -1000, 793, -1000,
	20840, -1000, 1571, -1000, -1000, 312, -1000, 309, 707, 939,
	18360, 182, 1313, 11229, 890, -1000, -244, -1000, 45, -1000,
	-1000, 858, 105, 105, 1291, 105, 857, 105, 105, -1000,
	-1000, 554, 1412, 554, 554, 554, 554, 927, 927, -85,
	-85, -1000, -1000, -1000, -1000, 885, 1312, -1000, -1000, -1000,
	882, -1000, 1311, 18360, 20840, 1456, 18360, -1000, -1000, -1000,
	1454, -1000, 7798, -1000, -1000, -1000, -1000, -1000, 1453, 1182,
	-1000, -1000, -1000, -1000, 388, -1000, 1330, -1000, 1569, 2014,
	520, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 280, 452, -1000, 6053, -1000, 675, 18360, 18360,
	1390, 685, 685, 530, -1000, -1000, 18360, -1000, -1000, -1000,
	-1000, 1214, -1000, -1000, -1000, 5704, 9059, -1000, 864, 1940,
	395, -1000, 10609, 10609, 135, -1000, -1000, -1000, 134, 129,
	65, -1000, -216, -1000, 1104, 9059, -223, -1000, 685, -1000,
	-1000, -1000, 1201, 930, 1201, 10609, 10609, 10609, 10609, 10609,
	5355, -55, 1205, 681, -1000, 9679, 863, -1000, -1000, -1000,
	-1000, -1000, 1336, 19290, 1245, -1000, 15569, 20840, 1492, 19290,
	9679, 9679, -1000, -1000, 9679, 1308, -1000, 9679, -1000, -1000,
	-1000, -1000, 1303, 1245, 1245, 1245, 1075, -1000, 1492, 1207,
	-1000, -1000, -1000, -10, 3, -1000, 9679, -1000, 5006, -1000,
	198, -1000, 18670, -1000, 1555, 1479, 327, -2, -1000, 1005,
	998, -1000, 986, -1000, -1000, 17, -1000, -176, 103, 31,
	-1000, -1000, 1245, -1000, 1302, 1450, -1000, 1423, 878, -1000,
	10919, -214, -1000, -1000, -216, -1000, -1000, -1000, 1245, -1000,
	1301, 1300, -1000, 1290, 1245, 512, -1000, -1000, -1000, -1000,
	-1000, 1153, 554, 554, 105, 554, 1148, 1142, 554, 554,
	-1000, 611, -1000, -1000, -1000, -1000, 1102, -1000, 1095, -1000,
	-1000, 1233, -1000, 1083, 18360, 20840, 1297, 1335, 1232, 1448,
	1232, 1229, -1000, 652, 1477, 254, 18360, 1536, 1536, 20840,
	-1000, 320, 20840, -1000, -1000, 20840, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 20840, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18360, -1000, -1000, -1000,
	-1000, -1000, 20840, 328, -1000, -1000, 916, 9679, -1000, -1000,
	-1000, 7798, -1000, 1506, 15259, -1000, -1000, 947, -1000, 10609,
	1940, 1940, 49, 40, 36, -1000, 915, -1000, -1000, -1000,
	-1000, 1245, 947, 1291, 1291, -1000, 1291, 1294, -1000, -1000,
	1291, 163, 1291, 150, 947, 947, 165, 310, 375, 102,
	265, -1000, 1245, -35, -1000, 685, 9679, -1000, 1425, 1145,
	1218, -1000, -1000, 8749, 947, 1077, 508, 1075, 1482, -1000,
	685, 685, 685, 18980, 685, -59, 18980, 18980, 18980, 14949,
	20840, 1482, -1000, -1000, -1000, -1000, 685, 4308, -1000, 7798,
	1068, -1000, 275, 1291, 460, 460, -178, 305, 294, 1245,
	-1000, -1000, -1000, -1000, -183, -1000, -1000, 707, -1000, 1290,
	9679, 18980, 111, -1000, 1228, 1135, 11539, -1000, 13709, -1000,
	947, -1000, 836, -1000, 812, 1125, 7798, -1000, -1000, -1000,
	554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 105, 902,
	105, 871, -1000, 870, 1226, 1334, 14639, 18360, -1000, 1232,
	-1000, 7798, 4308, 392, 1519, -1000, -1000, 1475, -1000, 1178,
	1289, 20840, -1000, -1000, 308, -1000, 1288, -1000, -1000, -1000,
	-1000, 1434, 20840, -1000, -1000, 685, 1504, 1223, -1000, 1940,
	-1000, -1000, -1000, -1000, 373, -1000, -1000, 285, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10609, 10609, -1000,
	10609, 10609, 10609, 947, 895, 685, 291, -1000, 1245, -1000,
	-1000, 1197, 20840, 20840, -1000, -1000, 1066, -1000, -1000, 1064,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1051, 1051, 1051,
	588, -1000, -1000, -1000, -1000, -1000, -1000, 817, 18670, 1443,
	-1000, -1000, -1000, 802, -1000, -1000, 726, 234, 737, -1000,
	20840, -183, 9679, -1000, 1245, 791, 1049, 9679, 1287, 860,
	-1000, 1121, -1000, 110, -85, -1000, -1000, -1000, -1000, -1000,
	-1000, 1245, -1000, 554, -1000, 554, 1115, 1107, 14639, 20840,
	18360, 1099, 1220, -1000, 271, 1286, -1000, -1000, -1000, 20840,
	-1000, -1000, -1000, -1000, -1000, 218, 2806, -1000, 13089, 1284,
	1282, 18980, 1245, 352, 1494, 1486, -1000, 1018, 1485, -1000,
	-1000, 165, 165, 165, 165, 141, -1000, -1000, 1570, -1000,
	1245, -1000, 1232, 498, -1000, 20840, -1000, -1000, -59, -1000,
	-1000, -1000, -66, 1332, 1391, 184, -1000, 955, 640, 867,
	637, 619, 613, 612, 610, 609, 605, -1000, -1000, -1000,
	1568, -1000, -1000, -1000, 1565, 1272, -1000, 1266, 791, 9679,
	258, 1333, 866, -1000, 1092, 1078, -1000, -1000, -1000, -1000,
	1052, 1261, 1259, -189, 858, 14639, 1132, -1000, 214, 2806,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1492,
	20840, 20840, 20840, 20840, 426, 10299, 9679, 1027, 3959, 13089,
	13089, 3959, 13089, 13089, 18670, 18670, 1026, 277, 284, -1000,
	9679, 9679, -1000, 947, 9679, -1000, -1000, -1000, -1000, 947,
	226, -105, 19290, 1218, 947, 20840, -1000, -1000, -1000, -1000,
	20840, -1000, -103, 1391, 20840, -1000, 843, -1000, -1000, 744,
	835, 744, 744, 744, 744, 744, 460, 460, 20840, 18670,
	258, 791, -1000, -37, 1553, -160, 394, -1000, -1000, -189,
	14639, 18670, 1506, 1258, 993, -68, 20840, 9679, 2710, -1000,
	1482, 1210, 12159, -1000, -1000, -1000, -1000, 20840, 1549, 1545,
	1526, 1508, 2690, 86, 789, 185, -1000, -1000, 3959, -1000,
	-1000, -1000, -1000, -1000, 1024, 1021, 1329, 1011, -1000, 20840,
	1257, 685, 1208, -1000, 1208, -1000, 1381, -62, -125, 1204,
	-1000, -1000, 1245, 1009, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 707, 707, 1003, 996,
	-1000, 258, -1000, 460, 460, -1000, -1000, -1000, 196, 792,
	833, 811, 790, 15, -1000, 1484, 1506, 954, 992, 817,
	18980, -189, -1000, -218, -1000, 685, -1000, -1000, 2806, 1426,
	20840, 211, -1000, -1000, 1433, -1000, -1000, -1000, -1000, -1000,
	2806, 2806, 2806, -1000, 329, -87, -1000, 277, 1305, 18670,
	-1000, 1326, -1000, 20840, -1000, 1391, -1000, -1000, 335, 817,
	-1000, -1000, -1000, 784, -1000, 783, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14329, 817, 1506, 817, 1332, 978, 1506,
	9679, -231, -1000, -1000, 12779, 1474, 20840, 2497, -1000, 119,
	2290, 200, -1000, 202, -1000, -1000, 270, 953, -100, 947,
	-1000, 18360, 1332, -1000, -1000, -1000, 488, 1332, 817, -1000,
	-1000, -1000, 817, 685, 680, 1232, -1000, -1000, -1000, 678,
	676, -1000, 197, -1000, 264, -1000, -107, -1000, 1249, -1000,
	7798, -1000, -1000, 1332, -1000, -1000, 354, 183, -1000, -1000,
	1245, -127, 20840, -1000, -1000, -1000, 2806, 9989, -1000, 946,
	898, 165, 947, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1844, 71, 9, 1843, 1842, 1840, 1602, 1596, 1594,
	1591, 1838, 1831, 1830, 1826, 1822, 1821, 1820, 1819, 1817,
	1816, 1815, 1814, 1812, 1810, 1809, 1805, 1803, 355, 1802,
	1800, 1799, 109, 1798, 118, 1797, 1796, 76, 215, 77,
	74, 1588, 1793, 58, 106, 110, 1792, 84, 1791, 1786,
	161, 1779, 97, 1775, 1772, 1552, 1762, 1761, 33, 8,
	34, 46, 1756, 1754, 94, 239, 1748, 1747, 1745, 28,
	1743, 1742, 86, 21, 30, 27, 41, 1735, 61, 99,
	1731, 96, 1730, 1728, 1727, 1726, 59, 1724, 90, 32,
	40, 14, 1723, 15, 13, 108, 64, 48, 20, 137,
	95, 1721, 66, 98, 87, 1720, 1719, 1002, 1718, 1717,
	1715, 1712, 1703, 1702, 839, 142, 1699, 1697, 1695, 78,
	0, 712, 92, 116, 1694, 73, 1693, 2461, 117, 104,
	44, 1690, 56, 80, 67, 1689, 1687, 69, 115, 26,
	114, 107, 1685, 111, 1684, 1683, 1682, 149, 93, 70,
	260, 45, 1681, 1680, 1679, 85, 82, 49, 88, 112,
	22, 1678, 1677, 1676, 52, 1672, 36, 31, 1, 91,
	1671, 1670, 1669, 1668, 43, 57, 1667, 39, 1666, 24,
	4, 7, 3, 11, 1665, 1663, 1662, 5, 1660, 42,
	1658, 10, 1656, 19, 1654, 1653, 1652, 68, 1651, 1650,
	1648, 16, 1645, 1644, 37, 17, 55, 47, 1642, 1640,
	51, 79, 53, 1638, 54, 6, 2, 18, 1637, 12,
	1636, 1634, 1632, 23, 29, 1631, 1626, 1625, 1624, 1620,
	1617, 50, 1616, 1614, 1613, 1611, 1610, 1609, 2076, 105,
	1608, 1607, 25, 1605, 1600, 1589, 1586, 442,
}

var yyR1 = [...]uint8{
	0, 236, 237, 237, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 240,
	240, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 220, 220, 219, 221, 221, 12, 12, 12, 12,
	12, 213, 213, 213, 213, 213, 13, 13, 216, 216,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 233, 233, 232, 232, 135, 135, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 241, 241, 242, 242, 242,
	242, 242, 242, 242, 211, 211, 211, 212, 212, 212,
	214, 214, 215, 215, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 218, 218, 195, 195, 195, 196, 196,
	196, 196, 196, 196, 198, 198, 199, 199, 125, 125,
	193, 193, 192, 191, 191, 190, 190, 189, 200, 200,
	20, 171, 172, 172, 172, 172, 172, 172, 172, 159,
	159, 139, 139, 139, 139, 139, 139, 139, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 206, 206, 206, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 208, 209, 202,
	202, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 149, 149, 149, 149, 149,
	149, 201, 201, 197, 197, 197, 197, 197, 197, 197,
	197, 143, 143, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 142, 142, 142, 142, 142, 142, 142,
	142, 144, 144, 144, 144, 144, 144, 144, 144, 140,
	140, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 158, 158, 147, 147, 156, 156, 157, 157,
	157, 148, 148, 148, 155, 155, 155, 152, 152, 153,
	153, 154, 154, 154, 150, 150, 150, 151, 151, 151,
	161, 182, 182, 182, 184, 184, 185, 185, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 170,
	170, 210, 210, 181, 181, 181, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 169, 169, 179, 179, 180,
	180, 177, 177, 177, 178, 164, 164, 164, 164, 164,
	165, 166, 166, 166, 166, 162, 163, 204, 204, 204,
	205, 205, 167, 167, 168, 168, 175, 175, 175, 175,
	243, 243, 173, 173, 174, 174, 174, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 244, 244, 245, 245, 245, 245, 245, 245,
	245, 188, 186, 186, 187, 187, 17, 18, 18, 18,
	18, 18, 19, 19, 21, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 112, 112,
	109, 109, 110, 110, 111, 111, 111, 113, 113, 113,
	136, 136, 136, 23, 23, 25, 25, 26, 27, 24,
	24, 24, 24, 24, 246, 28, 29, 29, 30, 30,
	30, 34, 34, 34, 32, 32, 33, 33, 39, 39,
	38, 38, 40, 40, 40, 40, 124, 124, 124, 123,
	123, 234, 234, 234, 234, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 223, 223, 222, 222, 224, 224,
	224, 224, 224, 224, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 37, 37,
	72, 72, 72, 78, 73, 73, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 69, 69, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 247, 247, 70, 70, 70, 70, 35, 35,
	35, 35, 35, 134, 134, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 82, 82, 36,
	36, 80, 80, 81, 83, 83, 79, 79, 79, 225,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 84, 84, 85, 85, 235, 235, 86,
	86, 87, 87, 88, 89, 89, 89, 90, 90, 90,
	90, 91, 91, 91, 63, 63, 63, 63, 63, 63,
	92, 92, 92, 92, 97, 97, 74, 74, 76, 76,
	75, 77, 98, 98, 102, 99, 99, 103, 103, 103,
	103, 103, 101, 101, 101, 126, 126, 126, 106, 106,
	114, 114, 115, 115, 107, 107, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 117, 117, 117, 118,
	118, 121, 121, 122, 122, 127, 127, 127, 128, 128,
	226, 226, 226, 227, 227, 227, 228, 228, 229, 230,
	230, 231, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 238, 239, 132, 133,
	133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 14,
	13, 15, 13, 14, 7, 8, 7, 5, 5, 5,
	11, 11, 9, 5, 8, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 4, 0, 2, 2, 0, 2,
	2, 2, 2, 2, 0, 2, 0, 3, 0, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 0, 2,
	4, 4, 0, 1, 3, 3, 3, 3, 3, 2,
	2, 3, 1, 1, 1, 1, 1, 0, 2, 2,
	3, 2, 4, 2, 4, 2, 2, 3, 2, 3,
	2, 7, 9, 3, 3, 6, 9, 9, 8, 8,
	5, 8, 7, 4, 2, 4, 6, 2, 1, 1,
	2, 1, 1, 1, 3, 3, 1, 2, 1, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 3, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 4, 4, 4, 4, 1, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 2, 3, 4, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 1, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 7, 0, 1, 1,
	0, 3, 0, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 6, 11, 13,
	13, 6, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 4, 5, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 5, 6, 4, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 3,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 2, 0, 2, 2, 0, 1, 4, 1,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -236, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	121, 122, 124, 123, 154, 125, 147, 52, 203, 204,
	206, 207, 26, 148, 149, 152, 153, -238, 8, 310,
	56, -237, 355, -86, 15, -30, 5, -28, -246, -28,
	-28, -28, -28, -28, -171, 56, -125, -200, 130, 163,
	302, 127, 143, 161, 162, 328, 128, 145, 75, -107,
	131, 133, 128, 128, 129, 131, 302, 127, 128, -55,
	-127, 59, -120, 61, 170, 319, 21, 203, 216, 217,
	208, 249, 237, 320, 168, 234, 238, 288, 353, 68,
	206, 297, 137, 174, 150, 229, 232, 231, 223, 220,
	28, 255, 326, 222, 140, 256, 260, 267, 289, 317,
	213, 214, 291, 253, 33, 142, 321, 37, 158, 292,
	258, 252, 247, 130, 251, 212, 246, 41, 226, 262,
	261, 263, 287, 240, 169, 266, 242, 224, 241, 18,
	153, 156, 257, 259, 221, 171, 135, 160, 325, 293,
	219, 157, 172, 152, 296, 342, 167, 207, 290, 215,
	299, 202, 201, 40, 273, 233, 210, 225, 211, 139,
	204, 165, 244, 159, 227, 228, 250, 209, 245, 205,
	161, 154, 298, 274, 327, 243, 239, 235, 236, 166,
	131, 163, 164, 280, 281, 282, 283, 323, 294, 230,
	275, 276, 176, 177, 178, 179, 180, 181, 182, 34,
	35, 128, 115, 238, 121, 278, 129, 33, 160, -136,
	128, -109, 164, 280, 281, 282, 283, 59, 290, 289,
	284, -127, 205, -132, -132, -132, -132, -132, -2, -90,
	17, 16, -5, -3, -238, 6, 21, 22, -34, 42,
	43, -29, -40, 106, -41, -127, -60, 77, -65, 29,
	59, -120, 61, 24, -64, -61, -79, -225, -77, -78,
	115, 116, 104, 105, 112, 78, 117, -69, -67, -68,
	-70, -228, -121, 60, 69, 62, 63, 64, 65, 70,
	71, 72, 300, -75, -238, 46, 47, 311, 312, 313,
	314, 318, 315, 80, 36, 301, 309, 308, 307, 305,
	306, 303, 304, 352, 134, 302, 110, 310, 264, -107,
	-43, -44, -45, -46, -57, -78, -238, -55, 11, -50,
	-55, -99, -135, 205, -103, 290, 289, -122, 300, -101,
	-121, -119, 288, 238, 287, 59, -120, 126, 184, 331,
	76, 23, 25, 271, 277, 183, 79, 115, 16, 80,
	190, 340, 341, 114, 311, 121, 50, 303, 304, 301,
	188, 313, 314, 302, 278, 195, 20, 29, 350, 10,
	26, 148, 22, 108, 123, 185, 83, 84, 151, 24,
	149, 72, 191, 193, 19, 53, 141, 11, 330, 13,
	14, 344, 332, 134, 133, 95, 343, 129, 48, 8,
	117, 27, 351, 92, 44, 146, 194, 46, 93, 17,
	305, 306, 32, 318, 155, 110, 51, 38, 345, 77,
	346, 70, 54, 295, 189, 75, 15, 49, 347, 143,
	192, 94, 124, 310, 47, 186, 348, 127, 187, 6,
	316, 31, 147, 45, 128, 279, 82, 132, 71, 162,
	5, 145, 9, 52, 55, 307, 308, 309, 36, 81,
	12, 144, 322, 73, -172, -159, -121, 61, -204, 340,
	341, 131, -233, 201, 131, -121, -115, 134, -115, -121,
	-121, -55, 128, -115, 310, 128, -55, -55, -114, 134,
	59, -114, -114, -114, -55, 118, -55, 59, 31, 302,
	59, 160, 128, 161, 131, -133, -238, -122, -133, -133,
	-133, 165, 166, -133, -110, 285, 54, -133, -239, 58,
	-91, 19, 32, -41, -127, -87, -88, -41, -86, -2,
	-28, 38, -32, 22, 67, 11, -124, 76, 75, 92,
	-123, 23, -121, 61, 118, -41, -62, 95, 77, 93,
	94, 79, 101, 100, 111, 104, 105, 106, 107, 108,
	109, 110, 102, 103, 114, 352, 85, 86, 87, 88,
	89, 90, 91, 96, 97, 98, 99, -108, -238, -197,
	352, -78, -238, 119, 120, -65, -65, -65, -65, -65,
	-65, -65, -229, 265, -238, 61, 118, -2, -73, -41,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -82,
	-41, -238, -247, -238, -247, -247, -247, -247, -247, -247,
	-247, -138, 115, 238, 150, 229, -141, -140, 244, 243,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	237, 320, -238, -238, -238, -238, -56, 27, -55, 31,
	57, -51, -53, -52, -54, 44, 48, 50, 45, 46,
	47, 51, -131, 23, -43, -238, -130, 156, -129, 23,
	-127, 61, -55, -50, -240, 57, 11, 55, 57, -99,
	205, -100, -104, 291, 293, 85, 118, -126, -121, 61,
	29, 31, 58, 57, -160, -139, -143, -140, -145, -144,
	-146, -121, -141, -142, 237, 320, 234, 238, 235, 240,
	241, 242, 115, 239, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 243, 255, 31, 150, 227,
	228, 229, 232, 231, 233, 230, 256, 257, 258, 259,
	260, 261, 262, 263, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 222, 223, 224, 226,
	225, -160, 129, -115, 131, 202, -115, -193, 55, 59,
	77, 59, 54, -211, 54, 19, 183, 184, 23, -115,
	-55, -55, 295, -133, 132, -55, 24, 54, -55, 59,
	59, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 279, 286, -55, 9, 95,
	57, 18, 118, 57, -89, 25, 26, -90, -239, -34,
	-66, -121, 62, 65, -33, 45, -55, -41, -41, -71,
	70, 77, 71, 72, -123, 106, -128, -122, -119, -65,
	-72, -75, -78, 66, 95, 93, 94, 79, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 59, 61, -143, 228, -138, -141,
	219, 220, 222, 223, 224, 226, 225, 59, 238, 228,
	268, 117, 244, 253, 254, -64, 61, -121, -64, -121,
	356, -39, 22, -38, -73, -40, -41, -122, -239, 57,
	-239, -2, -38, -38, -41, -41, -79, -65, -79, -121,
	-127, -38, -32, -80, -81, 81, -79, -239, 236, -38,
	-39, -38, -38, -38, -95, 156, -55, -98, -102, -79,
	-44, -45, -45, -44, -45, 44, 44, 44, 49, 44,
	49, 44, -52, -127, -239, -58, 52, 133, 53, -238,
	-129, -95, 55, -43, -55, -103, -100, 57, 292, 294,
	295, 54, 73, -41, -122, -151, 115, 114, -175, -243,
	323, 35, -159, -161, -164, -162, -163, -176, -165, 137,
	135, 139, 140, 145, -169, 129, 146, 70, 77, -206,
	137, -208, 54, 271, 277, 135, 146, 145, 353, 68,
	138, 330, 332, 29, 30, -154, 356, 265, -152, 274,
	-147, 56, -147, -147, 236, -148, 56, -147, -148, -147,
	-148, -150, 238, -150, -150, -150, -150, 56, 56, -147,
	-147, -147, -147, -147, -156, 56, 221, -156, -156, -157,
	56, -157, -121, 54, 200, -55, -115, -232, 350, 351,
	-55, -191, 322, -192, 59, -133, 24, -133, -55, -214,
	-212, 8, 9, 10, -55, -139, -55, -116, 126, 123,
	124, -188, 122, 271, 238, 68, 29, 15, 311, 156,
	327, 59, 157, -55, -55, -55, -133, -111, 11, 95,
	40, -41, -41, -128, -88, -91, -106, 19, 11, 36,
	36, -38, 70, 71, 72, 118, -238, -72, -65, -65,
	-65, -37, 151, 76, 322, -239, 236, -155, 322, 323,
	-230, -231, 61, -239, -38, 57, -239, -239, -41, -239,
	-239, -239, 57, 55, 23, 57, 11, 57, 57, 11,
	118, -239, -38, -83, -81, 83, -41, -239, -239, -239,
	-239, -239, -63, 31, 36, -2, -238, -238, -59, 57,
	12, 85, -48, -47, 54, 55, -49, 54, -47, 44,
	44, -223, 322, 129, 129, 129, -96, -121, -59, -43,
	-59, -104, -105, 296, 293, 299, 85, 59, -173, -122,
	57, 34, 56, -205, 54, 77, -167, -121, 146, -169,
	-169, 59, -169, 59, 129, 59, 70, 19, -121, 9,
	146, 146, -205, 61, -55, -202, 331, 16, 56, -207,
	56, 61, 62, 63, 70, -149, 69, -61, 266, -69,
	301, 304, 303, 267, -121, -127, -209, 62, 357, -153,
	275, 62, -150, -150, -147, -150, 62, 59, -150, -150,
	-151, 31, -151, -151, -151, -151, -158, 61, -158, -155,
	-155, 62, -156, 62, 54, 55, -55, -121, 23, -55,
	23, -190, -189, -122, -195, 23, 54, 57, -211, 55,
	-132, -125, 137, -164, -245, 163, 136, 141, 140, 59,
	135, 139, 156, -194, 163, 136, 137, 141, 140, 59,
	129, 146, 135, 139, 156, 145, -117, -118, 132, 23,
	129, 146, 156, 126, -133, -113, 93, 12, -127, -127,
	41, 118, -55, -42, 11, 106, -122, -39, -37, 76,
	-65, -65, 227, 227, 227, 357, 57, -197, -239, -40,
	-234, 354, -137, 115, 234, 150, 229, 223, 253, 254,
	240, 273, 227, 274, -134, -137, -65, -65, -65, -65,
	-65, -122, 319, -86, 84, -41, 82, -97, 54, -98,
	-74, -76, -75, -238, -2, -92, -121, -96, -86, -102,
	-41, -41, -41, 56, -41, 56, -238, -238, -238, -239,
	57, -86, -59, 293, 297, 298, -41, 85, -122, -175,
	-180, -177, -121, 146, 10, 9, 19, 141, 135, 353,
	59, 59, 59, -204, 145, 342, -206, 353, -149, 267,
	-238, 56, 23, 29, 62, -207, 56, -197, 352, -197,
	-238, -147, 56, -147, 56, 56, 118, 58, -151, -151,
	-150, -151, 58, 58, -151, -151, 59, 115, 58, 57,
	58, 57, 58, 57, -55, -121, 56, 54, -2, 23,
	-2, 57, 85, -196, 19, 171, 172, -55, -212, -214,
	-121, -244, 129, 146, -121, -132, -121, -132, -121, -55,
	-132, -121, 137, -164, 61, -41, -59, -43, -239, -65,
	276, 276, 276, -231, -238, -239, -147, -147, -147, -157,
	-147, 214, -147, 214, -239, -239, -239, 19, 57, -239,
	57, 19, -238, -36, 316, -41, 28, -97, 57, -239,
	-239, -239, 57, 118, -239, -90, -93, -121, 146, -222,
	-224, 344, 345, 346, 347, 348, 349, -93, -93, -93,
	-130, -121, -90, -174, -122, 61, 62, 58, 57, -147,
	-178, 269, -147, -166, 167, 168, 31, 169, -166, 342,
	146, 146, -238, -204, -205, -41, -93, 56, 332, 57,
	58, -207, -121, 238, 228, 244, 253, -239, 58, 58,
	58, -122, -151, -150, 61, -150, 62, 62, 56, 55,
	54, -179, -180, -69, -121, -55, -2, -189, -174, 132,
	21, 6, 8, 9, 10, 19, 23, -241, 56, -121,
	145, 56, 27, -121, -84, 13, -239, -235, 156, -150,
	59, -65, -65, -65, -65, -65, -239, 61, 146, -76,
	36, -2, -238, -121, -121, 57, 58, 58, 57, -239,
	-239, -239, -58, -182, -184, 322, -183, 55, 142, 68,
	176, 177, 178, 179, 180, 181, 182, -177, -89, -205,
	54, 70, 170, -205, 54, -167, -121, -204, -41, -238,
	-239, 58, -41, 56, 62, 58, -151, -151, 58, 58,
	-179, -121, -55, 58, 56, 56, -168, -121, 185, -215,
	-217, -7, -9, -8, -11, -10, -12, -13, -14, -3,
	20, 189, 190, 195, 191, 144, 134, -242, -121, 104,
	85, 61, -159, 57, 56, 56, -93, -238, 135, -85,
	14, 16, -239, -86, 16, -239, -239, -239, -239, -35,
	95, 322, 9, -74, -2, 118, -121, -224, -223, -181,
	54, -183, 322, 56, 324, 59, -170, 85, 61, 85,
	85, 85, 85, 85, 85, 85, 9, 10, 56, 56,
	-239, -41, -201, 169, 54, 58, -203, 58, 58, 58,
	56, 56, -94, 343, -179, -198, 57, 55, 186, -217,
	-86, -220, -121, -219, -121, -121, -121, -213, 38, 192,
	193, 194, -60, -65, -41, -60, 58, -242, -121, -242,
	-242, -242, -242, -242, -180, -180, 58, -186, -187, 156,
	146, -41, -73, -239, -73, -239, 320, 51, 325, -98,
	-239, -121, -121, -185, -183, -121, 62, -210, 54, 73,
	62, -210, -210, -210, -210, -210, -166, -166, -168, -180,
	-201, -239, 317, 10, 9, 328, 329, 58, 204, 334,
	335, 155, 336, 169, 337, 338, -94, -179, -180, -59,
	56, 58, -199, 322, -121, -41, -218, -217, 203, -90,
	57, -221, -139, 187, -121, 11, 11, 11, 11, -217,
	203, 82, 203, 58, 58, -193, -239, 57, -121, 56,
	41, 321, 326, -238, 58, 57, -205, -205, 58, 58,
	-201, -166, -166, 322, 62, 16, 62, 62, 62, 62,
	335, 155, 337, 16, -59, 58, 58, -182, -93, -94,
	353, -217, -91, -219, -121, 188, 27, -216, -217, -215,
	-216, -226, 196, 77, -191, -187, 36, -180, 41, -121,
	-183, 138, -182, 62, 62, 339, -127, -182, -59, -182,
	-181, 58, -59, -41, 355, 19, -121, 84, -217, 355,
	84, -227, 197, 196, 158, 58, 322, -239, -55, -181,
	118, -181, -182, -182, 84, -2, 84, 83, 199, 198,
	159, 325, 56, -122, -181, 134, 203, -238, 326, -168,
	-216, -65, 155, 58, 84, -239, -239,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 789, 0, 514, 514, 514, 514, 514, 514, 0,
	-2, 844, 0, 0, 0, 0, -2, 504, 505, 0,
	507, 508, 1148, 1148, 1148, 1148, 1148, 0, 33, 34,
	1146, 1, 3, 797, 0, 0, 518, 521, 516, 876,
	844, 0, 0, 0, 88, 162, 397, 0, 0, 0,
	842, 842, 0, 0, 0, 0, 842, 149, 0, 0,
	0, 845, 0, 840, 0, 840, 840, 840, 0, 463,
	600, 865, 866, 867, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 0, 0, 0, 0, 1149, 1149, 1149, 1149, 0,
	1149, 492, 481, 483, 484, 485, 486, 1149, 501, 502,
	491, 503, 506, 509, 510, 511, 512, 513, 27, 801,
	876, 876, 789, 29, 0, 514, 519, 520, 524, 522,
	523, 515, 0, 532, 536, 0, 610, 876, 615, 617,
	-2, -2, -2, 0, 656, 657, 658, 659, 660, 661,
	876, 876, 876, 876, 876, 876, 876, 688, 689, 690,
	691, 0, 766, 773, 774, 775, 776, 777, 778, 779,
	619, 620, 0, 821, 876, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 722, 722, 722, 722, 722,
	722, 722, 722, 0, 0, 0, 0, 0, 877, 0,
	0, 547, 549, 550, 551, 581, 0, 583, 0, 0,
	41, 45, 0, 1114, 825, -2, -2, 0, 0, 0,
	863, 864, -2, 1021, -2, 861, 862, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 0, 163, 177, 177, 0, 398,
	399, 842, 0, 0, 842, 150, 0, 0, 0, 0,
	0, 0, 842, 0, 159, 0, 1149, 0, 0, 0,
	0, 0, 0, 0, 462, 0, 464, 1149, 1149, 1149,
	1149, 1149, 1149, 1149, 1149, 473, 1150, 1151, 474, 475,
	476, 1149, 1149, 478, 0, 493, 0, 487, 28, 1147,
	22, 0, 0, 798, 0, 790, 791, 794, 797, 27,
	521, 0, 526, 525, 517, 0, 533, 876, 876, 0,
	537, 0, 539, 540, 0, 613, 876, 0, 0, 876,
	876, 876, 876, 876, 876, 876, 876, 876, 876, 876,
	876, 876, 876, 876, 0, 0, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 616, 0, 771,
	0, 630, 0, 0, 0, 679, 680, 681, 682, 683,
	684, 685, 692, 0, -2, 772, 0, 27, 0, 654,
	876, 876, 876, 876, 876, 876, 0, 876, 524, 0,
	758, 0, 713, 0, 714, 715, 716, 717, 718, 719,
	720, 721, 749, 0, 751, 752, 753, 754, 755, 756,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	279, 280, 876, -2, 876, 876, 43, 0, 599, 0,
	0, 0, 0, 0, 0, 588, 0, 0, 591, 0,
	0, 0, 0, 582, 0, 0, 602, 1076, 584, 0,
	586, 587, -2, 0, 0, 0, 39, 40, 0, 46,
	1114, 48, 73, 0, 0, 876, 0, 337, 835, 836,
	837, 833, 406, 0, 169, 331, 327, 172, 173, 174,
	175, 176, 314, 252, -2, -2, -2, -2, -2, -2,
	-2, -2, 314, -2, -2, -2, -2, -2, 334, -2,
	-2, -2, -2, -2, 300, -2, 1036, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 170, 0, 0, 842, 0, 0, 153, 0, 1149,
	0, 1149, 0, 0, 0, 114, 115, 116, 177, 0,
	160, 0, 0, 429, 0, 457, 841, 0, 1149, 460,
	461, 601, 868, 869, 465, 466, 467, 468, 469, 470,
	471, 472, 477, 480, 494, 488, 489, 482, 802, 0,
	876, 876, 0, 876, 793, 795, 796, 801, 30, 524,
	0, 780, 0, 0, 876, 527, 25, 611, 612, 614,
	631, 0, 633, 635, 538, 534, 0, 767, -2, 621,
	622, 650, 651, 652, 0, 876, 876, 876, 648, 626,
	0, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 676, 733, 734, 677, 0, 687, 314,
	316, 316, 316, 318, 318, 269, 270, 0, 0, 324,
	246, 247, 248, 249, 250, 674, 243, 0, 675, 686,
	0, 0, 876, 0, 0, 530, 536, 769, 653, 876,
	820, 27, 0, 0, 0, 0, 658, 0, 0, 766,
	0, 0, 876, 764, 761, 876, 0, 723, 750, 0,
	0, 529, 0, 0, 0, 0, 598, 606, 822, 0,
	548, 577, 579, 0, 574, 589, 590, 592, 0, 594,
	0, 596, 597, 552, 553, 554, 0, 0, 0, 0,
	585, 606, 0, 606, 42, 826, 47, 0, 0, 76,
	77, 827, 828, 829, 0, 831, 338, 0, 161, 408,
	0, 411, 164, 165, 166, 167, 168, 0, 400, -2,
	1081, 1104, 1039, 0, 0, 375, 376, 179, 0, 181,
	0, 183, 0, 185, 186, 0, 188, 190, 400, 0,
	0, 0, 0, 0, 0, 178, 0, 333, 329, 328,
	251, 0, 334, 334, 314, 334, 0, 334, 334, 288,
	289, 337, 0, 337, 337, 337, 337, 0, 0, 324,
	324, 274, 275, 276, 263, 0, 316, 265, 266, 267,
	0, 268, 0, 0, 0, 0, 0, 83, 84, 85,
	0, 97, 0, 151, 152, 98, 843, 99, 135, 0,
	120, 117, 118, 119, 0, 103, 0, 1148, 148, 0,
	856, 430, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 0, 0, 456, 1149, 459, 497, 0, 0,
	0, 799, 800, 0, 792, 23, 0, 838, 839, 781,
	782, 545, 632, 634, 636, 0, -2, 623, 648, 627,
	0, 624, 876, 876, 0, 618, 244, 245, 0, 0,
	0, 879, 243, 693, 0, 876, 541, 697, 655, -2,
	698, 699, 0, 0, 0, 876, 876, 876, 876, 876,
	0, 0, 789, 0, 762, 876, 0, 712, 724, 725,
	726, 727, 814, 0, 0, -2, 0, 0, 789, 0,
	876, 876, 571, 578, 876, 0, 572, 876, 573, 593,
	595, 564, 0, 0, 0, 0, 0, 569, 789, 606,
	38, 74, 75, 0, 0, 81, 876, 339, 0, 412,
	406, 410, 0, 385, 0, 0, 0, 403, 366, 0,
	0, 369, 0, 371, -2, 397, 180, 0, 0, 0,
	187, 189, 0, 193, 194, 0, 219, 0, 0, 204,
	0, -2, 208, 209, 243, 211, 212, 213, 1070, 216,
	314, 314, 239, 1042, 0, 0, 217, 218, 332, 171,
	330, 0, 337, 337, 334, 337, 0, 0, 337, 337,
	290, 0, 291, 292, 293, 294, 0, 312, 0, 272,
	273, 0, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 155, 0, 138, 0, 0, 0, 0, 0,
	417, 0, 402, 421, 1148, 0, 444, 445, 446, 447,
	448, 449, 450, 1148, 0, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 1148, 857, 858,
	859, 860, 0, 0, 458, 479, 0, 876, 495, 496,
	803, 0, 24, 606, 0, 535, 768, 0, 625, 876,
	649, 628, 0, 0, 0, 878, 0, 881, 694, 531,
	695, 0, 0, 314, 314, 738, 314, 318, 741, 742,
	314, 744, 314, 747, 0, 0, 0, 0, 0, 0,
	0, 767, 0, 759, 711, 765, 876, 31, 0, 814,
	804, 816, 818, 876, 27, 0, 810, 0, 797, 823,
	607, 824, 575, 0, 580, 0, 0, 0, 0, 583,
	0, 797, 37, 78, 79, 80, 830, 0, 413, 409,
	0, 379, 314, 314, 0, 0, 0, 0, 0, 0,
	367, 368, 370, 373, 397, 203, 182, 400, 184, 0,
	876, 0, 0, 220, 0, 0, 0, 207, 0, 210,
	0, 235, 0, 237, 0, 0, 0, 315, 281, 282,
	337, 283, 322, 323, 284, 285, 335, 336, 334, 0,
	334, 0, 319, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, 0, 0, 136, 137, 0, 121, 0,
	105, 0, 442, 443, 403, 423, 0, 424, 426, 427,
	428, 0, 402, 422, 498, 499, 783, 546, 696, 629,
	678, 325, 326, 880, 787, 700, 735, 334, 739, 740,
	743, 745, 746, 748, 702, 701, 703, 876, 876, 706,
	876, 876, 876, 0, 0, 763, 0, 32, 0, 819,
	-2, 0, 0, 0, 44, 35, 0, 566, 567, 0,
	556, 558, 559, 560, 561, 562, 563, 0, 0, 0,
	602, 570, 36, 407, 414, 415, 416, 341, 0, 794,
	383, 384, 382, 400, 391, 392, 0, 0, 400, 401,
	402, 397, 876, 374, 0, 0, 0, 876, 200, 0,
	205, 0, 215, 1021, 324, 248, 249, 214, 236, 238,
	240, 0, 287, 337, 313, 337, 0, 0, 0, 0,
	0, 0, 377, 378, 314, 0, -2, 156, 157, 0,
	139, 140, 141, 142, 143, 0, 0, 104, 107, 0,
	0, 0, 0, 403, 785, 0, 542, 0, 0, 736,
	737, 0, 0, 0, 0, 728, 710, 760, 0, 817,
	0, -2, 0, 812, 811, 0, 576, 555, 0, 603,
	604, 605, 554, 363, 342, 0, 344, 0, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 381, 386,
	0, 393, 394, 387, 0, 0, 403, 0, 0, 876,
	241, 195, 0, 221, 0, 0, 302, 303, 317, 320,
	0, 0, 0, 608, 1146, 0, 144, 404, 0, 102,
	122, 124, 125, 126, 127, 128, 129, 130, 131, 789,
	0, 0, 0, 0, 61, 876, 876, 0, -2, 107,
	107, -2, 107, 107, 0, 0, 0, 0, 0, 26,
	876, 876, 543, 0, 876, 705, 704, 707, 708, 0,
	0, 0, 0, 807, 27, 0, 568, 557, 565, 340,
	0, 345, 0, 0, 0, 348, 0, 360, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 0, 191, 0, 0, 0, 0, 202, 206, 608,
	0, 0, 606, 0, 0, 146, 0, 876, 0, 123,
	797, 49, -2, 51, 56, 57, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 106, 108, -2, 109,
	110, 111, 112, 113, 0, 0, 150, 0, 452, 0,
	0, 786, 784, 544, 788, 709, 0, 0, 0, 815,
	-2, 813, 364, 0, 346, 351, 349, 352, 361, 362,
	353, 354, 355, 356, 357, 358, 400, 400, 0, 0,
	396, 241, 242, 0, 0, 198, 199, 201, 0, 0,
	0, 0, 0, 0, 232, 0, 606, 0, 0, 341,
	0, 608, 100, 0, 405, 145, 101, 133, 0, 801,
	0, 0, 53, 55, 59, 62, 63, 64, 65, 66,
	0, 0, 0, 418, 870, 153, 451, 0, 0, 0,
	729, 0, 732, 0, 343, 0, 388, 389, 0, 341,
	192, 196, 197, 0, 223, 0, 225, 226, 227, 228,
	229, 230, 231, 0, 341, 606, 341, 363, 0, 606,
	876, 0, 132, 52, 177, 0, 0, 0, 68, 0,
	0, 873, 871, 0, 425, 453, 0, 0, 730, 0,
	347, 0, 363, 222, 224, 233, 0, 363, 341, 92,
	90, 609, 341, 147, 0, 0, 60, 67, 69, 0,
	71, 420, 0, 872, 0, 419, 0, 365, 0, 395,
	0, 89, 93, 363, 134, -2, 0, 0, 874, 875,
	0, 0, 0, 234, 91, 70, 0, 876, 731, 0,
	0, 0, 0, 390, 72, 454, 455,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 109, 101, 3,
	56, 58, 106, 104, 57, 105, 118, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 355,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 356, 3, 357, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:402
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:407
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:408
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:412
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:435
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:447
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:453
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:460
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:466
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:470
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:476
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:480
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:487
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:499
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:511
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:515
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:521
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:527
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:531
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:535
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:540
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:541
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:545
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:549
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:554
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:558
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:564
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:568
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:572
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:576
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:582
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:586
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:599
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:603
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:609
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:614
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:618
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:624
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:638
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:645
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:653
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:663
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:685
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:692
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:702
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:706
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:713
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:722
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:730
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:741
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:745
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:751
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:755
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:759
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:765
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:769
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:773
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:777
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:782
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:792
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:796
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:802
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:806
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:812
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:817
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:837
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:857
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:878
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:894
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:910
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:918
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:927
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:935
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:943
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:947
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:951
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:963
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:974
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:985
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:996
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1001
		{
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1002
		{
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1006
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1007
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1008
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1009
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1010
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1011
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1012
		{
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1030
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1034
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1038
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1048
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1054
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1058
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1064
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1075
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1087
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1094
		{
			yyVAL.bytes = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1098
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1102
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1107
		{
			yyVAL.bytes = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1111
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1115
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1119
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1123
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1127
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1132
		{
			yyVAL.expr = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1136
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1141
		{
			yyVAL.expr = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1145
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1150
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1159
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1169
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1174
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1179
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1185
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1190
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1196
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1201
		{
			yyVAL.bytes = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1205
		{
			yyVAL.bytes = nil
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1211
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1218
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1224
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1228
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1233
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1237
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1241
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1245
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1249
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1255
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1260
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1266
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1277
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1282
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1288
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1301
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1306
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1311
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1316
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1322
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1327
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1332
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1337
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1342
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1347
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1352
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1357
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1362
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1371
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1391
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1398
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1405
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1413
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1418
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1424
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1430
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1436
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1442
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1449
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1453
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1457
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1463
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1467
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1471
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1475
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1479
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1483
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1487
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1491
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1495
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1499
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1505
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1511
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1517
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1521
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1526
		{
			yyVAL.sequence = &Sequence{}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1530
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1535
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1540
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1545
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1550
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1555
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1560
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1565
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1575
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1580
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1585
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1590
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1597
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1601
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1605
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1609
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1613
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1617
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1622
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1626
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1631
		{
			yyVAL.bytes = nil
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1916
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1921
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1926
		{
			yyVAL.optVal = nil
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1930
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1939
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1951
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1957
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1965
		{
			yyVAL.optVal = nil
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1969
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1973
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1982
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1995
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2004
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2008
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2039
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2043
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2053
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2058
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2066
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2072
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2076
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2082
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2086
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2092
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2096
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2101
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2105
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2109
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2117
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2125
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2129
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2133
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2139
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2149
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2153
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2159
		{
			yyVAL.indexPartition = nil
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2163
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2167
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2193
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2197
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2201
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2205
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2221
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2226
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2232
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2236
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2247
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2251
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2261
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2266
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2273
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2280
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 389:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2287
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2296
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2308
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2312
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2316
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2320
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 395:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2326
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2337
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2347
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2351
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2355
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2361
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2365
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2370
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2377
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2381
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2388
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2392
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2398
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2402
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2407
		{
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2408
		{
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2412
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2416
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2422
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2426
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2430
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2436
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 418:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 419:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2454
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 420:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2468
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2487
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2496
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 423:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2505
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2509
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 425:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2513
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 426:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2536
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2541
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2550
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2582
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2588
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2592
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2598
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2602
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2608
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2614
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2622
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2627
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2635
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2639
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2645
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2649
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2654
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2673
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2697
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2701
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2705
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2709
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2713
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2717
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2727
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2731
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2777
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2781
		{
			yyVAL.str = "extended "
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2787
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2791
		{
			yyVAL.str = "full "
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2797
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2801
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2805
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2811
		{
			yyVAL.showFilter = nil
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2815
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2819
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2825
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.str = SessionStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2833
		{
			yyVAL.str = GlobalStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2839
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2843
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2849
		{
			yyVAL.statement = &Begin{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.statement = &Begin{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2859
		{
			yyVAL.statement = &Commit{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2865
		{
			yyVAL.statement = &Rollback{}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2871
		{
			yyVAL.statement = &OtherRead{}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2875
		{
			yyVAL.statement = &OtherRead{}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2879
		{
			yyVAL.statement = &OtherRead{}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2883
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2887
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2892
		{
			setAllowComments(yylex, true)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2896
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2902
		{
			yyVAL.bytes2 = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2906
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.str = UnionStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2916
		{
			yyVAL.str = UnionAllStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2920
		{
			yyVAL.str = UnionDistinctStr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2925
		{
			yyVAL.str = ""
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2929
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2933
		{
			yyVAL.str = SQLCacheStr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2938
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2942
		{
			yyVAL.str = DistinctStr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2947
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.str = StraightJoinHint
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2956
		{
			yyVAL.selectExprs = nil
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2960
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2966
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2970
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2980
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2984
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2988
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2993
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2997
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3001
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3008
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3013
		{
			yyVAL.overExpr = nil
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3017
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3021
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3025
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3030
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3034
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3040
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3044
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3058
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3062
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3067
		{
			yyVAL.strs = []string{}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3071
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3081
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3087
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3103
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3113
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3117
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3128
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3132
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3138
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3142
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3155
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3159
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3163
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3167
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3173
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3175
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3179
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3181
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3185
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3187
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3195
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3199
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3203
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.str = JoinStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3220
		{
			yyVAL.str = JoinStr
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3224
		{
			yyVAL.str = JoinStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3230
		{
			yyVAL.str = StraightJoinStr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3236
		{
			yyVAL.str = LeftJoinStr
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3240
		{
			yyVAL.str = LeftJoinStr
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3244
		{
			yyVAL.str = RightJoinStr
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3248
		{
			yyVAL.str = RightJoinStr
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3254
		{
			yyVAL.str = NaturalJoinStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3258
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3268
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3272
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3278
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3282
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3287
		{
			yyVAL.indexHints = nil
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3291
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3295
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3299
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3304
		{
			yyVAL.expr = nil
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3308
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3313
		{
			yyVAL.columns = nil
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3317
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3323
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3327
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3331
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3335
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3339
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3343
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3347
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3353
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3357
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3363
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3367
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3373
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3377
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3381
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3385
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3389
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3393
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3397
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3401
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 629:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3405
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3409
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3415
		{
			yyVAL.str = IsNullStr
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3419
		{
			yyVAL.str = IsNotNullStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3423
		{
			yyVAL.str = IsTrueStr
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3427
		{
			yyVAL.str = IsNotTrueStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3431
		{
			yyVAL.str = IsFalseStr
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3435
		{
			yyVAL.str = IsNotFalseStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3441
		{
			yyVAL.str = EqualStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3445
		{
			yyVAL.str = LessThanStr
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3449
		{
			yyVAL.str = GreaterThanStr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3453
		{
			yyVAL.str = LessEqualStr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3457
		{
			yyVAL.str = GreaterEqualStr
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3461
		{
			yyVAL.str = NotEqualStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3465
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3469
		{
			yyVAL.str = PosixRegexStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3473
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3477
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3481
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = nil
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3496
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3500
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3504
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3510
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3516
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3520
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3526
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3530
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3534
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3538
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3542
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3546
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3606
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3610
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3614
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3618
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3622
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3626
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3634
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3648
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3652
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3656
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3664
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3672
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3680
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3694
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3698
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3702
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3706
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 700:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3724
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3728
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 702:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3732
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3736
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3740
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 705:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3744
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3748
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 707:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3752
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 708:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3756
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 709:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3760
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3764
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3768
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3772
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3809
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3818
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3850
		{
			yyVAL.str = ""
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3854
		{
			yyVAL.str = BooleanModeStr
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3858
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 731:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3862
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3866
		{
			yyVAL.str = QueryExpansionStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3876
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3975
		{
			yyVAL.expr = nil
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3979
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3984
		{
			yyVAL.str = string("")
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3988
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3994
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3998
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4004
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4009
		{
			yyVAL.expr = nil
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4013
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4019
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4023
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4027
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4033
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4039
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4043
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4048
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4053
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4057
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4061
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4065
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4069
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4077
		{
			yyVAL.expr = &NullVal{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4083
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4092
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4096
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4101
		{
			yyVAL.exprs = nil
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4105
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4110
		{
			yyVAL.expr = nil
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4114
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4119
		{
			yyVAL.exprs = nil
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4123
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4128
		{
			yyVAL.orderBy = nil
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4132
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4138
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4142
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4148
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4153
		{
			yyVAL.str = AscScr
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4157
		{
			yyVAL.str = AscScr
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4161
		{
			yyVAL.str = DescScr
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4166
		{
			yyVAL.limit = nil
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4170
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4174
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4178
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4183
		{
			yyVAL.str = ""
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4187
		{
			yyVAL.str = ForUpdateStr
		}
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4191
		{
			yyVAL.str = ShareModeStr
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4204
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4208
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4212
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4217
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4221
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 809:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4225
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4232
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4236
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4240
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4244
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4249
		{
			yyVAL.updateExprs = nil
		}
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4253
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4259
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4263
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4269
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4273
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4279
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4285
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4295
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4299
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4305
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4311
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4315
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4321
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4325
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4329
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 830:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4334
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4338
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4345
		{
			yyVAL.bytes = []byte("charset")
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4352
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4356
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4360
		{
			yyVAL.expr = &Default{}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4369
		{
			yyVAL.byt = 0
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4371
		{
			yyVAL.byt = 1
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4374
		{
			yyVAL.empty = struct{}{}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4376
		{
			yyVAL.empty = struct{}{}
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4379
		{
			yyVAL.str = ""
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4381
		{
			yyVAL.str = IgnoreStr
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4385
		{
			yyVAL.empty = struct{}{}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4387
		{
			yyVAL.empty = struct{}{}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4389
		{
			yyVAL.empty = struct{}{}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4391
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4393
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4395
		{
			yyVAL.empty = struct{}{}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4397
		{
			yyVAL.empty = struct{}{}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4399
		{
			yyVAL.empty = struct{}{}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4401
		{
			yyVAL.empty = struct{}{}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4403
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4406
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4408
		{
			yyVAL.empty = struct{}{}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4410
		{
			yyVAL.empty = struct{}{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4414
		{
			yyVAL.empty = struct{}{}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4416
		{
			yyVAL.empty = struct{}{}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4420
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4424
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4431
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4437
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4441
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4446
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4453
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4459
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4463
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4467
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4473
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4477
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4481
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4487
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4491
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4498
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4505
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4509
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4516
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4806
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4815
		{
			decNesting(yylex)
		}
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4820
		{
			forceEOF(yylex)
		}
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4825
		{
			forceEOF(yylex)
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4829
		{
			forceEOF(yylex)
		}
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4833
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
