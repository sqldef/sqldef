// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	constraintOptions        *ConstraintOptions
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXCLUDE = 57479
const GIST = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const EXTENSION = 57502
const DATA = 57503
const STATUS = 57504
const VARIABLES = 57505
const RESTRICT = 57506
const CASCADE = 57507
const NO = 57508
const ACTION = 57509
const PERMISSIVE = 57510
const RESTRICTIVE = 57511
const PUBLIC = 57512
const CURRENT_USER = 57513
const SESSION_USER = 57514
const PAD_INDEX = 57515
const FILLFACTOR = 57516
const IGNORE_DUP_KEY = 57517
const STATISTICS_NORECOMPUTE = 57518
const STATISTICS_INCREMENTAL = 57519
const ALLOW_ROW_LOCKS = 57520
const ALLOW_PAGE_LOCKS = 57521
const DISTANCE = 57522
const M = 57523
const EUCLIDEAN = 57524
const COSINE = 57525
const BEFORE = 57526
const AFTER = 57527
const EACH = 57528
const ROW = 57529
const SCROLL = 57530
const CURSOR = 57531
const OPEN = 57532
const CLOSE = 57533
const FETCH = 57534
const PRIOR = 57535
const FIRST = 57536
const LAST = 57537
const DEALLOCATE = 57538
const INSTEAD = 57539
const OF = 57540
const OUTPUT = 57541
const DEFERRABLE = 57542
const INITIALLY = 57543
const IMMEDIATE = 57544
const DEFERRED = 57545
const CONCURRENTLY = 57546
const SQL = 57547
const SECURITY = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const SMALLSERIAL = 57557
const MEDIUMINT = 57558
const INT = 57559
const INTEGER = 57560
const SERIAL = 57561
const BIGINT = 57562
const BIGSERIAL = 57563
const INTNUM = 57564
const REAL = 57565
const DOUBLE = 57566
const PRECISION = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const SMALLMONEY = 57571
const MONEY = 57572
const TIME = 57573
const TIMESTAMP = 57574
const DATETIME = 57575
const YEAR = 57576
const DATETIMEOFFSET = 57577
const DATETIME2 = 57578
const SMALLDATETIME = 57579
const CHAR = 57580
const VARCHAR = 57581
const VARYING = 57582
const BOOL = 57583
const CHARACTER = 57584
const VARBINARY = 57585
const NCHAR = 57586
const NVARCHAR = 57587
const NTEXT = 57588
const UUID = 57589
const TEXT = 57590
const TINYTEXT = 57591
const MEDIUMTEXT = 57592
const LONGTEXT = 57593
const CITEXT = 57594
const BLOB = 57595
const TINYBLOB = 57596
const MEDIUMBLOB = 57597
const LONGBLOB = 57598
const JSON = 57599
const JSONB = 57600
const ENUM = 57601
const GEOMETRY = 57602
const POINT = 57603
const LINESTRING = 57604
const POLYGON = 57605
const GEOMETRYCOLLECTION = 57606
const MULTIPOINT = 57607
const MULTILINESTRING = 57608
const MULTIPOLYGON = 57609
const VECTOR = 57610
const VARIADIC = 57611
const ARRAY = 57612
const NOW = 57613
const GETDATE = 57614
const BPCHAR = 57615
const TEXT_PATTERN_OPS = 57616
const NULLX = 57617
const AUTO_INCREMENT = 57618
const APPROXNUM = 57619
const SIGNED = 57620
const UNSIGNED = 57621
const ZEROFILL = 57622
const ZONE = 57623
const AUTOINCREMENT = 57624
const DATABASES = 57625
const TABLES = 57626
const VSCHEMA_TABLES = 57627
const EXTENDED = 57628
const FULL = 57629
const PROCESSLIST = 57630
const NAMES = 57631
const CHARSET = 57632
const GLOBAL = 57633
const SESSION = 57634
const ISOLATION = 57635
const LEVEL = 57636
const READ = 57637
const WRITE = 57638
const ONLY = 57639
const REPEATABLE = 57640
const COMMITTED = 57641
const UNCOMMITTED = 57642
const SERIALIZABLE = 57643
const NEW = 57644
const CONCAT_NULL_YIELDS_NULL = 57645
const CURSOR_CLOSE_ON_COMMIT = 57646
const QUOTED_IDENTIFIER = 57647
const ARITHABORT = 57648
const FMTONLY = 57649
const NOCOUNT = 57650
const NOEXEC = 57651
const NUMERIC_ROUNDABORT = 57652
const ANSI_DEFAULTS = 57653
const ANSI_NULL_DFLT_OFF = 57654
const ANSI_NULL_DFLT_ON = 57655
const ANSI_NULLS = 57656
const ANSI_PADDING = 57657
const ANSI_WARNINGS = 57658
const FORCEPLAN = 57659
const SHOWPLAN_ALL = 57660
const SHOWPLAN_TEXT = 57661
const SHOWPLAN_XML = 57662
const IMPLICIT_TRANSACTIONS = 57663
const REMOTE_PROC_TRANSACTIONS = 57664
const XACT_ABORT = 57665
const CURRENT_TIMESTAMP = 57666
const DATABASE = 57667
const CURRENT_DATE = 57668
const CURRENT_TIME = 57669
const LOCALTIME = 57670
const LOCALTIMESTAMP = 57671
const UTC_DATE = 57672
const UTC_TIME = 57673
const UTC_TIMESTAMP = 57674
const REPLACE = 57675
const CONVERT = 57676
const CAST = 57677
const COALESCE = 57678
const SUBSTR = 57679
const SUBSTRING = 57680
const GROUP_CONCAT = 57681
const SEPARATOR = 57682
const INHERIT = 57683
const LEAD = 57684
const LAG = 57685
const MATCH = 57686
const AGAINST = 57687
const BOOLEAN = 57688
const LANGUAGE = 57689
const WITH = 57690
const WITHOUT = 57691
const PARSER = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const VIRTUAL = 57696
const STORED = 57697
const GENERATED = 57698
const ALWAYS = 57699
const IDENTITY = 57700
const SEQUENCE = 57701
const INCREMENT = 57702
const MINVALUE = 57703
const CACHE = 57704
const CYCLE = 57705
const OWNED = 57706
const NONE = 57707
const CLUSTERED = 57708
const NONCLUSTERED = 57709
const REPLICATION = 57710
const COLUMNSTORE = 57711
const INCLUDE = 57712
const HOLDLOCK = 57713
const NOLOCK = 57714
const NOWAIT = 57715
const PAGLOCK = 57716
const ROWLOCK = 57717
const TABLOCK = 57718
const UPDLOCK = 57719
const READUNCOMMITTED = 57720
const DEFINER = 57721
const INVOKER = 57722
const TYPECAST = 57723
const CHECK = 57724
const OVER = 57725

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXCLUDE",
	"GIST",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"EXTENSION",
	"DATA",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"COALESCE",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	138, 501,
	-2, 223,
	-1, 213,
	123, 933,
	-2, 926,
	-1, 214,
	123, 934,
	-2, 846,
	-1, 367,
	58, 498,
	-2, 1114,
	-1, 374,
	61, 447,
	-2, 1059,
	-1, 375,
	61, 448,
	-2, 1066,
	-1, 456,
	123, 937,
	-2, 931,
	-1, 457,
	123, 934,
	-2, 932,
	-1, 503,
	61, 447,
	-2, 444,
	-1, 555,
	123, 935,
	-2, 850,
	-1, 674,
	138, 222,
	157, 222,
	-2, 1114,
	-1, 693,
	123, 934,
	-2, 376,
	-1, 858,
	60, 450,
	-2, 874,
	-1, 859,
	60, 451,
	-2, 874,
	-1, 860,
	60, 452,
	-2, 874,
	-1, 861,
	60, 453,
	-2, 874,
	-1, 865,
	5, 93,
	-2, 15,
	-1, 868,
	5, 93,
	-2, 17,
	-1, 1010,
	403, 819,
	-2, 376,
	-1, 1043,
	59, 951,
	123, 935,
	403, 951,
	-2, 850,
	-1, 1044,
	59, 952,
	403, 952,
	-2, 855,
	-1, 1045,
	59, 953,
	403, 953,
	-2, 856,
	-1, 1046,
	59, 954,
	403, 954,
	-2, 857,
	-1, 1047,
	59, 955,
	403, 955,
	-2, 858,
	-1, 1048,
	59, 956,
	403, 956,
	-2, 859,
	-1, 1049,
	59, 957,
	403, 957,
	-2, 636,
	-1, 1050,
	59, 958,
	403, 958,
	-2, 637,
	-1, 1146,
	119, 396,
	120, 396,
	-2, 24,
	-1, 1282,
	5, 94,
	-2, 684,
	-1, 1406,
	60, 163,
	-2, 928,
	-1, 1409,
	60, 163,
	-2, 280,
	-1, 1534,
	59, 959,
	403, 959,
	-2, 720,
	-1, 1565,
	5, 93,
	-2, 16,
	-1, 1581,
	206, 120,
	-2, 597,
	-1, 1626,
	32, 244,
	60, 163,
	71, 244,
	144, 244,
	146, 244,
	147, 244,
	287, 244,
	399, 244,
	402, 244,
	-2, 928,
	-1, 1627,
	161, 1007,
	229, 1007,
	230, 1007,
	231, 1007,
	232, 1007,
	233, 1007,
	234, 1007,
	235, 1007,
	236, 1007,
	237, 1007,
	238, 1007,
	240, 1007,
	241, 1007,
	243, 1007,
	244, 1007,
	245, 1007,
	246, 1007,
	247, 1007,
	248, 1007,
	249, 1007,
	250, 1007,
	251, 1007,
	252, 1007,
	253, 1007,
	254, 1007,
	255, 1007,
	256, 1007,
	258, 1007,
	259, 1007,
	260, 1007,
	261, 1007,
	262, 1007,
	263, 1007,
	264, 1007,
	265, 1007,
	266, 1007,
	267, 1007,
	268, 1007,
	270, 1007,
	271, 1007,
	272, 1007,
	273, 1007,
	274, 1007,
	275, 1007,
	276, 1007,
	277, 1007,
	278, 1007,
	279, 1007,
	280, 1007,
	281, 1007,
	282, 1007,
	283, 1007,
	284, 1007,
	285, 1007,
	363, 1007,
	-2, 376,
	-1, 1628,
	161, 1136,
	229, 1136,
	230, 1136,
	231, 1136,
	232, 1136,
	233, 1136,
	234, 1136,
	235, 1136,
	236, 1136,
	237, 1136,
	238, 1136,
	240, 1136,
	241, 1136,
	243, 1136,
	244, 1136,
	245, 1136,
	246, 1136,
	247, 1136,
	248, 1136,
	249, 1136,
	250, 1136,
	251, 1136,
	252, 1136,
	253, 1136,
	254, 1136,
	255, 1136,
	256, 1136,
	258, 1136,
	260, 1136,
	261, 1136,
	262, 1136,
	263, 1136,
	264, 1136,
	265, 1136,
	266, 1136,
	267, 1136,
	268, 1136,
	270, 1136,
	271, 1136,
	272, 1136,
	273, 1136,
	274, 1136,
	275, 1136,
	276, 1136,
	277, 1136,
	278, 1136,
	279, 1136,
	280, 1136,
	281, 1136,
	282, 1136,
	283, 1136,
	284, 1136,
	285, 1136,
	363, 1136,
	-2, 396,
	-1, 1630,
	161, 1062,
	229, 1062,
	230, 1062,
	231, 1062,
	232, 1062,
	233, 1062,
	234, 1062,
	235, 1062,
	236, 1062,
	237, 1062,
	238, 1062,
	240, 1062,
	241, 1062,
	243, 1062,
	244, 1062,
	245, 1062,
	246, 1062,
	247, 1062,
	248, 1062,
	249, 1062,
	250, 1062,
	251, 1062,
	252, 1062,
	253, 1062,
	254, 1062,
	255, 1062,
	256, 1062,
	258, 1062,
	259, 1062,
	260, 1062,
	261, 1062,
	262, 1062,
	263, 1062,
	264, 1062,
	265, 1062,
	266, 1062,
	267, 1062,
	268, 1062,
	270, 1062,
	271, 1062,
	272, 1062,
	273, 1062,
	274, 1062,
	275, 1062,
	276, 1062,
	277, 1062,
	278, 1062,
	279, 1062,
	280, 1062,
	281, 1062,
	282, 1062,
	283, 1062,
	284, 1062,
	285, 1062,
	363, 1062,
	-2, 338,
	-1, 1721,
	403, 830,
	-2, 711,
	-1, 1802,
	90, 929,
	-2, 916,
	-1, 1847,
	105, 727,
	106, 727,
	107, 727,
	108, 727,
	109, 727,
	110, 727,
	111, 727,
	112, 727,
	113, 727,
	114, 727,
	115, 727,
	116, 727,
	119, 727,
	398, 727,
	-2, 640,
	-1, 1848,
	105, 727,
	106, 727,
	107, 727,
	108, 727,
	109, 727,
	110, 727,
	111, 727,
	112, 727,
	113, 727,
	114, 727,
	115, 727,
	116, 727,
	119, 727,
	398, 727,
	-2, 642,
	-1, 1849,
	105, 727,
	106, 727,
	107, 727,
	108, 727,
	109, 727,
	110, 727,
	111, 727,
	112, 727,
	113, 727,
	114, 727,
	115, 727,
	116, 727,
	119, 727,
	398, 727,
	-2, 644,
	-1, 1904,
	57, 107,
	59, 107,
	-2, 109,
	-1, 2088,
	5, 93,
	-2, 885,
	-1, 2113,
	5, 93,
	-2, 116,
	-1, 2150,
	59, 1102,
	60, 1102,
	-2, 527,
	-1, 2187,
	5, 94,
	-2, 886,
	-1, 2218,
	5, 93,
	-2, 888,
	-1, 2239,
	5, 94,
	-2, 889,
}

const yyPrivate = 57344

const yyLast = 16244

var yyAct = [...]int16{
	557, 536, 2143, 2034, 2196, 2016, 2106, 1274, 2149, 43,
	43, 2144, 875, 569, 1925, 776, 58, 2140, 700, 2074,
	1382, 2017, 209, 210, 211, 2111, 1258, 1370, 1939, 1772,
	1984, 1938, 1367, 933, 1796, 1371, 1384, 2098, 1927, 774,
	1913, 1385, 1585, 1923, 1793, 1781, 1790, 1514, 1764, 2010,
	1814, 1183, 61, 1782, 1582, 244, 250, 250, 250, 465,
	55, 1216, 48, 746, 1497, 1519, 1217, 1355, 495, 798,
	1364, 856, 1011, 1224, 1028, 1671, 245, 1662, 1115, 1058,
	1527, 1293, 1787, 615, 1093, 814, 251, 246, 1142, 1096,
	1042, 498, 533, 431, 922, 1237, 690, 455, 504, 1030,
	716, 358, 657, 1410, 883, 623, 218, 446, 447, 806,
	378, 539, 353, 469, 426, 323, 212, 626, 1023, 54,
	1340, 1339, 603, 1109, 1108, 1034, 1300, 889, 417, 402,
	234, 786, 237, 238, 13, 1528, 397, 891, 1170, 888,
	393, 222, 540, 224, 225, 750, 749, 759, 760, 752,
	753, 754, 755, 756, 757, 758, 751, 751, 1622, 762,
	762, 1891, 442, 443, 1356, 226, 1430, 781, 1153, 1399,
	1388, 1387, 939, 752, 753, 754, 755, 756, 757, 758,
	751, 1389, 729, 762, 1368, 401, 732, 708, 1559, 530,
	44, 506, 507, 2237, 1390, 372, 762, 711, 991, 709,
	227, 228, 1498, 2135, 314, 317, 318, 1863, 1448, 1745,
	953, 1710, 1711, 329, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2230, 58, 213, 336, 217, 1267, 1268, 2079,
	502, 2107, 43, 759, 760, 752, 753, 754, 755, 756,
	757, 758, 751, 58, 355, 762, 953, 1447, 509, 1894,
	1443, 396, 1150, 783, 2213, 750, 749, 759, 760, 752,
	753, 754, 755, 756, 757, 758, 751, 957, 959, 762,
	965, 1272, 1111, 1110, 1111, 1761, 966, 967, 968, 969,
	970, 971, 972, 334, 958, 960, 956, 961, 962, 963,
	964, 750, 749, 759, 760, 752, 753, 754, 755, 756,
	757, 758, 751, 2134, 1383, 762, 216, 503, 337, 627,
	628, 1549, 950, 949, 1395, 197, 2061, 437, 345, 346,
	1956, 1483, 350, 319, 2078, 321, 505, 1401, 1402, 1750,
	951, 58, 747, 250, 220, 229, 217, 1397, 198, 2169,
	335, 194, 199, 200, 2117, 2044, 356, 2116, 1721, 1555,
	2118, 2170, 2171, 58, 749, 759, 760, 752, 753, 754,
	755, 756, 757, 758, 751, 605, 499, 762, 1391, 1392,
	1394, 1940, 739, 1941, 1393, 2045, 2046, 748, 1554, 1123,
	520, 1171, 890, 456, 1122, 1573, 463, 399, 460, 1712,
	570, 454, 412, 414, 415, 416, 1543, 44, 436, 1296,
	467, 606, 440, 433, 444, 445, 413, 44, 1107, 506,
	507, 452, 509, 491, 405, 44, 1513, 1862, 464, 1864,
	1342, 466, 430, 466, 736, 197, 738, 737, 1341, 44,
	484, 462, 202, 916, 429, 44, 635, 1817, 761, 761,
	45, 403, 710, 471, 408, 453, 848, 410, 198, 952,
	847, 194, 199, 200, 1316, 1947, 524, 1314, 34, 1569,
	320, 201, 761, 44, 420, 421, 422, 423, 424, 58,
	1299, 660, 526, 1108, 45, 761, 662, 663, 664, 665,
	666, 1205, 58, 1465, 1466, 44, 679, 1946, 406, 684,
	58, 1431, 1432, 1154, 1155, 691, 206, 1716, 619, 620,
	621, 622, 754, 755, 756, 757, 758, 751, 734, 315,
	762, 1400, 1718, 929, 44, 992, 951, 634, 731, 1204,
	1203, 638, 639, 1421, 761, 625, 647, 761, 932, 931,
	930, 877, 608, 1747, 451, 610, 1933, 613, 614, 629,
	1620, 463, 202, 632, 1818, 742, 1792, 529, 761, 781,
	687, 1568, 506, 507, 1713, 1477, 1448, 1220, 1149, 195,
	196, 649, 1571, 501, 1363, 510, 512, 1209, 648, 1672,
	1673, 201, 656, 354, 953, 777, 949, 1172, 207, 871,
	872, 1963, 668, 673, 761, 671, 685, 324, 1978, 44,
	609, 1976, 1225, 951, 413, 669, 702, 828, 1478, 712,
	1823, 509, 1652, 688, 220, 1426, 217, 1150, 1692, 730,
	2011, 2215, 1434, 702, 1654, 728, 702, 1428, 1690, 750,
	749, 759, 760, 752, 753, 754, 755, 756, 757, 758,
	751, 733, 1855, 762, 2077, 952, 1024, 691, 44, 558,
	1015, 556, 560, 561, 562, 563, 761, 45, 876, 559,
	564, 58, 1156, 882, 884, 1981, 884, 45, 887, 941,
	940, 777, 1435, 777, 773, 45, 918, 44, 897, 195,
	196, 58, 1173, 900, 316, 1677, 901, 902, 903, 45,
	865, 953, 868, 819, 820, 45, 1689, 58, 517, 707,
	339, 1294, 834, 741, 836, 197, 1687, 839, 840, 661,
	808, 809, 810, 811, 812, 813, 1714, 1715, 1717, 1719,
	1720, 880, 952, 45, 1180, 691, 702, 523, 198, 1174,
	862, 194, 199, 200, 923, 924, 1791, 44, 873, 1296,
	1151, 522, 701, 703, 1725, 45, 723, 885, 835, 938,
	500, 1969, 876, 1705, 777, 950, 949, 910, 409, 701,
	703, 411, 701, 703, 989, 874, 878, 881, 867, 1436,
	886, 893, 828, 951, 45, 1016, 1016, 1738, 953, 325,
	326, 1161, 898, 1018, 899, 1724, 950, 949, 1324, 904,
	905, 1508, 327, 474, 675, 58, 58, 950, 949, 761,
	1873, 925, 926, 927, 951, 950, 949, 1832, 1033, 475,
	777, 1099, 1098, 982, 1440, 951, 702, 953, 942, 1672,
	1673, 667, 202, 951, 1168, 474, 950, 949, 513, 1027,
	2231, 1162, 950, 949, 979, 478, 950, 949, 980, 479,
	1553, 1778, 950, 949, 951, 676, 677, 456, 1007, 45,
	951, 201, 2136, 658, 951, 1038, 1039, 1009, 1010, 820,
	951, 680, 701, 703, 691, 1127, 894, 1014, 1017, 1611,
	2007, 1032, 659, 975, 876, 691, 1052, 1054, 1055, 1056,
	1639, 51, 1089, 514, 216, 1092, 1131, 915, 919, 920,
	979, 220, 952, 217, 476, 477, 239, 777, 45, 950,
	949, 1135, 515, 691, 240, 511, 250, 1167, 641, 1169,
	213, 654, 217, 895, 896, 1175, 1133, 951, 1113, 1179,
	1116, 1117, 761, 952, 505, 691, 511, 45, 1163, 1118,
	1090, 1091, 983, 985, 952, 1126, 1307, 485, 1306, 58,
	1114, 681, 952, 208, 2110, 505, 2109, 2108, 1128, 195,
	196, 731, 701, 703, 936, 1218, 1221, 691, 950, 949,
	1134, 1166, 205, 952, 925, 926, 927, 1412, 340, 952,
	204, 203, 1145, 952, 338, 236, 951, 2035, 2037, 952,
	1238, 223, 197, 1119, 1633, 1121, 232, 45, 1099, 1255,
	482, 483, 58, 653, 481, 1510, 342, 343, 344, 1202,
	341, 197, 678, 480, 349, 198, 348, 777, 194, 199,
	200, 2190, 1206, 509, 950, 949, 220, 1210, 217, 2070,
	1198, 1197, 764, 765, 198, 1200, 1943, 194, 199, 200,
	1733, 781, 951, 1399, 1388, 1387, 952, 950, 949, 1612,
	1613, 1614, 1212, 1297, 1723, 1389, 1295, 1112, 928, 908,
	1213, 785, 1259, 784, 650, 951, 1278, 488, 1390, 957,
	959, 400, 965, 333, 1295, 2036, 330, 1271, 966, 967,
	968, 969, 970, 971, 972, 1247, 958, 960, 956, 961,
	962, 963, 964, 750, 749, 759, 760, 752, 753, 754,
	755, 756, 757, 758, 751, 952, 842, 762, 2119, 202,
	617, 616, 934, 935, 937, 1201, 1442, 197, 1857, 1239,
	907, 747, 990, 1769, 487, 508, 2096, 1942, 202, 1462,
	1288, 1461, 1460, 1343, 950, 949, 1459, 1458, 201, 1457,
	198, 950, 949, 194, 199, 200, 1551, 1456, 47, 49,
	554, 691, 951, 51, 1455, 1454, 58, 201, 11, 951,
	1453, 952, 1451, 1898, 1366, 843, 748, 747, 1899, 1406,
	45, 1413, 1365, 691, 691, 1245, 1097, 1313, 1383, 1218,
	1422, 1211, 1362, 1437, 952, 1207, 50, 1317, 1395, 1243,
	1244, 1242, 1331, 1097, 497, 250, 1334, 472, 468, 470,
	906, 1401, 1402, 474, 496, 1333, 497, 1164, 331, 473,
	497, 1397, 748, 7, 10, 519, 1259, 1655, 1663, 8,
	9, 1806, 1357, 1348, 1653, 1349, 1663, 1656, 1651, 497,
	1229, 1231, 1232, 1438, 202, 691, 195, 196, 1230, 1664,
	1420, 1177, 1391, 1392, 1394, 1467, 1427, 1664, 1393, 1469,
	1439, 1178, 1425, 1445, 1403, 195, 196, 1165, 1208, 1573,
	1484, 1485, 1486, 201, 682, 1309, 1311, 1524, 1312, 518,
	1263, 952, 509, 1315, 683, 607, 1238, 1861, 952, 1261,
	1674, 740, 777, 1240, 1262, 1318, 1319, 1665, 1661, 1320,
	1321, 953, 1322, 1323, 607, 1119, 1105, 1199, 554, 554,
	554, 554, 554, 554, 554, 1509, 612, 1125, 1124, 994,
	611, 779, 633, 631, 782, 1295, 1464, 630, 58, 602,
	777, 1012, 828, 1013, 1883, 1452, 1441, 1405, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 1522,
	800, 763, 802, 803, 804, 805, 807, 807, 807, 807,
	807, 807, 807, 783, 829, 830, 831, 832, 1493, 1507,
	509, 195, 196, 1120, 624, 783, 525, 1143, 953, 953,
	456, 2225, 2224, 1753, 691, 691, 1143, 2223, 1038, 1504,
	2210, 1024, 2168, 953, 1621, 1400, 761, 1449, 1523, 2189,
	953, 1504, 2124, 914, 2062, 1562, 1529, 866, 1007, 866,
	1540, 1254, 777, 1535, 1536, 1239, 1537, 1534, 1010, 820,
	1581, 1533, 1607, 1608, 1609, 1531, 1521, 1616, 1532, 1910,
	953, 1565, 1574, 841, 1544, 2132, 953, 1406, 1406, 1406,
	1626, 1406, 1406, 727, 781, 1526, 1768, 691, 691, 691,
	1556, 914, 1962, 914, 1961, 1557, 726, 250, 782, 725,
	691, 691, 1915, 1918, 1919, 1920, 1916, 1907, 1917, 1921,
	1542, 2086, 2099, 2100, 724, 1657, 2087, 943, 944, 1660,
	1550, 914, 1959, 1476, 1958, 1512, 974, 976, 977, 978,
	779, 1577, 1578, 1579, 713, 1583, 509, 1618, 1476, 1957,
	1143, 1888, 58, 691, 1619, 1476, 953, 1218, 1688, 1691,
	1218, 1218, 1643, 1908, 516, 654, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 1681, 1659,
	2141, 1575, 1679, 2095, 1680, 58, 914, 1841, 1506, 777,
	1560, 777, 1463, 777, 1504, 1840, 779, 1837, 1836, 1352,
	948, 914, 1829, 554, 914, 1828, 914, 1822, 1351, 1728,
	914, 1821, 1259, 1666, 1667, 1668, 1669, 1670, 1676, 914,
	1820, 1693, 1694, 1686, 914, 1754, 1350, 1563, 1684, 914,
	1683, 1264, 1572, 1476, 1640, 914, 1635, 1910, 1678, 1700,
	914, 1634, 876, 1701, 1703, 1706, 1623, 1624, 1625, 1631,
	1632, 1289, 953, 1129, 1757, 1504, 1503, 914, 1481, 914,
	1423, 914, 1359, 1770, 58, 849, 567, 1985, 750, 749,
	759, 760, 752, 753, 754, 755, 756, 757, 758, 751,
	1909, 1763, 762, 866, 1775, 838, 1767, 1143, 1358, 215,
	219, 1807, 1773, 1774, 837, 1727, 1021, 953, 1143, 1266,
	914, 1223, 1985, 1780, 845, 1146, 1910, 1406, 914, 913,
	1758, 781, 1815, 1815, 219, 2095, 219, 219, 1779, 2014,
	1777, 654, 1218, 1218, 1799, 691, 852, 851, 691, 691,
	845, 846, 1024, 250, 1819, 845, 844, 242, 241, 1329,
	1144, 466, 1805, 2217, 1685, 1567, 1327, 1504, 1816, 879,
	1289, 2095, 646, 655, 833, 645, 233, 230, 646, 231,
	231, 857, 2185, 509, 781, 1021, 1910, 1504, 2043, 1935,
	1788, 1726, 554, 1241, 646, 554, 1289, 554, 554, 554,
	554, 554, 554, 1825, 1826, 1289, 1308, 1328, 1833, 1159,
	1158, 312, 1143, 866, 1326, 1846, 914, 993, 850, 1260,
	652, 654, 1785, 509, 1309, 1915, 1918, 1919, 1920, 1916,
	2163, 1917, 1921, 1696, 58, 35, 509, 36, 37, 38,
	945, 509, 1853, 1854, 2161, 1752, 854, 853, 1838, 1839,
	42, 2123, 2099, 2100, 1765, 1974, 1766, 1834, 419, 1572,
	402, 1648, 1279, 1647, 1644, 1642, 1641, 243, 1561, 313,
	1472, 1471, 1433, 1429, 1418, 1298, 1870, 1856, 1858, 1859,
	1860, 1852, 1417, 1416, 1354, 1353, 432, 2141, 1851, 1932,
	44, 250, 1869, 1270, 880, 58, 554, 1214, 1157, 1152,
	1812, 1148, 1945, 1130, 1897, 987, 986, 777, 984, 1871,
	981, 946, 219, 410, 892, 864, 863, 714, 1896, 651,
	636, 427, 219, 219, 531, 1900, 219, 351, 527, 1824,
	494, 425, 1922, 434, 435, 691, 1965, 418, 1905, 1936,
	407, 15, 1444, 1931, 2102, 855, 1934, 637, 1960, 1949,
	439, 1874, 438, 328, 322, 1799, 52, 1967, 1968, 2028,
	1903, 1904, 1951, 2026, 2029, 1731, 1953, 2030, 2027, 1919,
	1920, 2105, 1975, 1977, 2104, 2025, 40, 2024, 551, 1284,
	1285, 761, 2181, 2133, 1983, 1866, 801, 486, 493, 1966,
	1515, 1948, 618, 745, 39, 2183, 1950, 1094, 554, 923,
	924, 1176, 219, 41, 459, 1516, 219, 1792, 219, 219,
	1099, 2018, 1361, 1280, 744, 219, 1281, 458, 644, 1979,
	458, 1980, 219, 642, 640, 219, 1775, 219, 2004, 1785,
	332, 2040, 1404, 1141, 219, 2003, 58, 1100, 1482, 1298,
	870, 2006, 1885, 706, 58, 777, 1845, 1889, 1572, 1893,
	2015, 58, 1572, 1766, 2013, 782, 2019, 1479, 1480, 2022,
	1275, 1765, 2031, 2178, 1027, 2020, 2021, 2039, 2023, 2042,
	2041, 1488, 1490, 1492, 1986, 58, 219, 2052, 779, 1241,
	554, 554, 554, 1865, 554, 2012, 548, 1276, 1024, 2177,
	2066, 2129, 1560, 448, 449, 450, 1799, 1811, 1765, 1810,
	1809, 2067, 1765, 1808, 2050, 1137, 1887, 1138, 1139, 1140,
	1890, 1259, 1709, 1708, 705, 704, 866, 2069, 1470, 2232,
	1136, 219, 2068, 1722, 33, 219, 219, 1468, 2051, 2072,
	521, 777, 1972, 1973, 46, 1259, 1026, 554, 1029, 2112,
	45, 1906, 1147, 12, 1, 1584, 17, 2094, 16, 1785,
	2088, 2073, 2064, 1785, 1785, 1785, 1785, 1785, 2092, 441,
	2103, 777, 1040, 554, 554, 554, 554, 1785, 537, 2195,
	1789, 58, 2114, 1580, 1564, 458, 1610, 2001, 1675, 601,
	2113, 699, 1572, 380, 1511, 1893, 528, 1099, 2018, 19,
	2151, 2112, 2142, 1971, 1760, 1566, 1099, 2018, 866, 869,
	643, 2145, 2125, 2126, 1658, 1181, 917, 363, 352, 909,
	777, 1775, 1775, 2138, 2139, 2137, 2154, 2158, 489, 53,
	1773, 1774, 14, 1450, 58, 364, 362, 361, 1785, 2147,
	360, 2127, 359, 1617, 357, 1996, 1893, 395, 1893, 604,
	398, 735, 2152, 404, 2174, 2175, 2057, 2058, 428, 249,
	2173, 247, 2180, 248, 252, 1794, 1944, 1785, 1292, 973,
	2184, 2115, 876, 2192, 1801, 876, 876, 876, 2148, 2209,
	1518, 554, 2176, 2071, 2194, 2128, 689, 2205, 2206, 2207,
	1332, 1095, 2208, 538, 1259, 1228, 2085, 1766, 955, 534,
	2151, 2221, 2131, 2001, 2212, 1784, 1695, 2216, 2220, 2145,
	1901, 2222, 2091, 1914, 2093, 2055, 2056, 1912, 1911, 777,
	2155, 2101, 2229, 2097, 1783, 1749, 1993, 1283, 1730, 1396,
	2233, 2065, 1386, 699, 219, 779, 1025, 779, 2218, 779,
	2235, 2145, 219, 1099, 2018, 554, 2236, 554, 2238, 2001,
	777, 219, 2152, 1286, 6, 1398, 1381, 5, 4, 2080,
	3, 1380, 1379, 1378, 1377, 1375, 1376, 1373, 1374, 2234,
	1372, 1277, 778, 2, 0, 1732, 0, 0, 0, 0,
	0, 0, 0, 0, 1755, 0, 2193, 0, 1759, 0,
	0, 2156, 0, 2157, 0, 0, 1748, 0, 781, 0,
	1399, 1388, 1387, 550, 0, 1019, 1020, 1022, 0, 0,
	0, 699, 1389, 0, 0, 0, 0, 0, 0, 0,
	2121, 2122, 390, 1743, 0, 1390, 1786, 0, 393, 394,
	0, 0, 1572, 1101, 1102, 1103, 1104, 0, 1106, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 388, 0,
	376, 0, 0, 0, 0, 0, 0, 1766, 377, 1037,
	0, 458, 0, 698, 1037, 1037, 1037, 1037, 0, 0,
	1037, 1037, 1037, 1037, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 1835, 0, 947, 0, 1842, 750,
	749, 759, 760, 752, 753, 754, 755, 756, 757, 758,
	751, 0, 0, 762, 0, 0, 1037, 1037, 1037, 1037,
	0, 0, 0, 0, 0, 1383, 0, 0, 0, 0,
	0, 384, 0, 379, 389, 1395, 0, 0, 554, 0,
	699, 0, 219, 386, 385, 0, 0, 0, 1401, 1402,
	0, 699, 0, 0, 219, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 219, 1884, 0, 1886,
	0, 0, 0, 0, 0, 554, 0, 0, 554, 699,
	554, 695, 554, 0, 554, 554, 0, 0, 0, 1391,
	1392, 1394, 0, 0, 0, 1393, 0, 0, 0, 1256,
	1257, 699, 0, 0, 0, 0, 1573, 0, 0, 1265,
	32, 0, 0, 0, 0, 861, 0, 0, 1053, 0,
	0, 0, 0, 1924, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 1954, 1955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1132, 0, 1282, 0,
	0, 1287, 0, 1290, 1291, 0, 1970, 0, 781, 0,
	1399, 1388, 1387, 0, 215, 0, 0, 26, 27, 0,
	20, 0, 1389, 1302, 1160, 1303, 1304, 1305, 0, 0,
	382, 0, 0, 21, 0, 1390, 383, 30, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	1997, 0, 0, 0, 1998, 22, 23, 0, 24, 0,
	1325, 0, 220, 1330, 217, 0, 0, 0, 1037, 1336,
	0, 0, 0, 858, 0, 0, 1338, 0, 1222, 0,
	0, 0, 1400, 0, 1344, 1345, 0, 1346, 1347, 0,
	2053, 0, 0, 1786, 0, 0, 0, 1786, 1786, 1786,
	1786, 1786, 0, 0, 1360, 0, 0, 0, 0, 1994,
	391, 1924, 392, 2038, 750, 749, 759, 760, 752, 753,
	754, 755, 756, 757, 758, 751, 2059, 2060, 762, 0,
	1037, 0, 0, 2182, 0, 0, 387, 1337, 0, 0,
	0, 0, 761, 0, 0, 1383, 781, 0, 1399, 1388,
	1387, 695, 0, 197, 0, 1395, 0, 0, 0, 0,
	1389, 781, 0, 1399, 1388, 1387, 18, 699, 1401, 1402,
	0, 0, 1786, 1390, 0, 1389, 198, 0, 1397, 194,
	199, 200, 861, 0, 0, 0, 1474, 1475, 1390, 699,
	699, 0, 0, 698, 0, 0, 0, 2089, 2090, 0,
	0, 1786, 0, 0, 0, 0, 214, 0, 0, 1391,
	1392, 1394, 0, 0, 0, 1393, 0, 0, 0, 0,
	0, 698, 62, 0, 0, 1501, 1502, 866, 2009, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 699, 25, 0, 221, 0, 221, 221, 0, 1525,
	0, 0, 0, 0, 28, 29, 0, 31, 0, 0,
	202, 0, 0, 0, 2146, 698, 866, 0, 0, 696,
	0, 0, 0, 1383, 1414, 1415, 0, 0, 0, 0,
	858, 0, 0, 1395, 0, 2164, 2165, 2166, 1383, 201,
	0, 695, 0, 0, 0, 0, 1401, 1402, 1395, 0,
	0, 0, 0, 0, 0, 347, 1397, 0, 0, 0,
	0, 1401, 1402, 0, 0, 0, 1037, 0, 0, 695,
	0, 1397, 0, 0, 458, 1037, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1391, 1392, 1394,
	0, 695, 1400, 1393, 0, 0, 0, 0, 0, 0,
	0, 0, 1391, 1392, 1394, 0, 0, 0, 1393, 0,
	0, 0, 2146, 0, 1995, 2219, 0, 0, 0, 1573,
	860, 0, 0, 695, 1500, 0, 0, 0, 0, 0,
	699, 699, 0, 0, 0, 0, 0, 195, 196, 0,
	0, 0, 0, 2008, 2146, 0, 866, 761, 0, 750,
	749, 759, 760, 752, 753, 754, 755, 756, 757, 758,
	751, 859, 0, 762, 0, 0, 0, 0, 0, 62,
	0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 221, 0, 0, 221, 221, 0, 62,
	0, 0, 0, 699, 699, 699, 0, 0, 697, 861,
	0, 0, 0, 0, 0, 0, 699, 699, 1928, 0,
	0, 0, 0, 0, 0, 0, 1707, 715, 0, 0,
	0, 698, 698, 0, 0, 0, 1558, 0, 0, 0,
	1400, 0, 0, 1729, 0, 0, 743, 0, 0, 696,
	0, 0, 0, 1734, 220, 1400, 1930, 0, 1735, 699,
	0, 1736, 1737, 0, 0, 1739, 1740, 1742, 1744, 1746,
	0, 0, 221, 780, 1741, 953, 221, 0, 221, 221,
	0, 0, 0, 0, 0, 221, 0, 457, 0, 0,
	221, 2008, 221, 698, 0, 221, 0, 221, 1636, 1637,
	1638, 799, 0, 0, 221, 0, 2002, 0, 0, 62,
	0, 1645, 1646, 0, 0, 0, 0, 858, 0, 0,
	750, 749, 759, 760, 752, 753, 754, 755, 756, 757,
	758, 751, 0, 0, 762, 0, 0, 0, 0, 695,
	695, 0, 0, 0, 0, 197, 221, 860, 0, 0,
	0, 0, 0, 0, 1682, 0, 0, 0, 697, 0,
	0, 0, 1926, 0, 0, 219, 219, 0, 198, 0,
	1902, 194, 199, 200, 0, 0, 0, 0, 781, 0,
	1399, 1388, 1387, 0, 0, 0, 697, 0, 859, 0,
	0, 221, 1389, 0, 0, 221, 221, 0, 0, 696,
	0, 695, 220, 0, 217, 1390, 0, 0, 697, 0,
	0, 0, 0, 921, 1843, 1844, 0, 0, 1847, 1848,
	1849, 0, 0, 0, 0, 62, 0, 696, 0, 0,
	0, 699, 861, 698, 699, 699, 954, 0, 62, 0,
	697, 0, 780, 0, 0, 221, 62, 0, 0, 696,
	0, 693, 761, 1872, 0, 0, 0, 0, 0, 988,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	1882, 0, 0, 0, 0, 781, 0, 1399, 1388, 1387,
	0, 696, 0, 0, 0, 0, 0, 0, 0, 1389,
	0, 201, 219, 197, 0, 698, 698, 698, 780, 0,
	0, 1035, 1390, 0, 0, 0, 0, 953, 698, 698,
	1057, 1088, 0, 0, 0, 1383, 198, 1037, 0, 194,
	199, 200, 0, 0, 0, 1395, 1827, 0, 0, 1830,
	1831, 0, 0, 0, 0, 0, 0, 1952, 1401, 1402,
	858, 695, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 698, 750, 749, 759, 760, 752, 753, 754, 755,
	756, 757, 758, 751, 219, 219, 762, 0, 0, 0,
	0, 0, 0, 219, 1929, 0, 0, 0, 0, 1391,
	1392, 1394, 0, 0, 0, 1393, 0, 0, 0, 195,
	196, 0, 0, 693, 221, 1987, 1573, 1988, 1989, 1990,
	1991, 1992, 221, 695, 695, 695, 0, 62, 0, 0,
	202, 221, 1383, 761, 0, 0, 695, 695, 0, 0,
	0, 699, 1395, 0, 860, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 1928, 1401, 1402, 0, 0, 201,
	0, 0, 0, 62, 2033, 1397, 697, 697, 0, 0,
	0, 0, 1982, 781, 0, 1399, 1388, 1387, 0, 695,
	0, 0, 1215, 1219, 0, 859, 0, 1389, 1226, 1227,
	220, 693, 1930, 0, 0, 0, 1391, 1392, 1394, 0,
	1390, 0, 1393, 0, 0, 0, 2063, 696, 696, 219,
	0, 0, 0, 219, 0, 0, 215, 219, 219, 219,
	219, 219, 0, 0, 0, 0, 0, 0, 697, 2032,
	1269, 219, 0, 718, 2076, 1929, 1964, 0, 0, 0,
	0, 0, 1400, 698, 0, 0, 698, 698, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 0,
	1273, 457, 62, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	583, 197, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 219, 1571, 0, 0, 0, 0, 0, 0,
	694, 0, 0, 213, 198, 217, 0, 194, 199, 200,
	1383, 0, 0, 0, 2130, 0, 0, 0, 0, 0,
	1395, 219, 0, 0, 0, 0, 0, 582, 0, 0,
	693, 0, 221, 1401, 1402, 220, 1335, 217, 0, 1400,
	0, 693, 0, 1397, 221, 0, 0, 0, 0, 0,
	0, 695, 2167, 0, 695, 695, 221, 599, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 860, 697, 693,
	0, 0, 2179, 0, 1391, 1392, 1394, 0, 0, 0,
	1393, 0, 0, 0, 0, 597, 0, 2186, 2187, 2188,
	2054, 693, 0, 215, 197, 2191, 1419, 1219, 202, 692,
	0, 0, 215, 0, 0, 62, 0, 0, 859, 696,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 693, 0, 0, 197, 201, 0, 0,
	697, 697, 697, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 697, 697, 0, 2226, 2227, 2228, 198,
	0, 0, 194, 199, 200, 0, 0, 0, 62, 0,
	0, 220, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 696, 696, 696, 1929, 2239, 0, 0, 0, 0,
	780, 0, 0, 0, 696, 696, 697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 202, 0, 0, 1517, 1520, 0, 1400, 0, 0,
	0, 0, 0, 0, 0, 195, 196, 696, 0, 0,
	586, 587, 0, 0, 0, 0, 0, 0, 0, 215,
	201, 695, 0, 202, 0, 0, 0, 1541, 0, 0,
	0, 0, 197, 45, 0, 0, 750, 749, 759, 760,
	752, 753, 754, 755, 756, 757, 758, 751, 1892, 0,
	762, 0, 201, 1552, 0, 198, 0, 221, 194, 199,
	200, 0, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 1570, 0, 220, 693, 1930, 0,
	1184, 0, 62, 0, 1196, 0, 0, 0, 0, 1184,
	0, 0, 1576, 1196, 1186, 62, 0, 532, 0, 693,
	693, 0, 0, 1186, 1615, 0, 799, 0, 195, 196,
	596, 750, 749, 759, 760, 752, 753, 754, 755, 756,
	757, 758, 751, 0, 0, 762, 0, 0, 697, 0,
	0, 697, 697, 0, 0, 0, 0, 0, 0, 202,
	195, 196, 1649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 0, 0, 0, 0, 197, 201, 696,
	0, 0, 696, 696, 1185, 0, 0, 781, 0, 1399,
	1388, 1387, 0, 1185, 235, 1219, 0, 0, 1219, 1219,
	198, 1389, 0, 194, 199, 200, 0, 780, 0, 780,
	0, 780, 0, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 0, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 0, 0, 0, 0, 0, 0, 0, 781, 0,
	1399, 1388, 1387, 0, 457, 766, 767, 768, 769, 770,
	771, 772, 1389, 0, 0, 0, 0, 0, 775, 2081,
	2082, 0, 1751, 0, 0, 1390, 195, 196, 781, 1756,
	1399, 1388, 1387, 0, 0, 0, 1762, 0, 0, 0,
	0, 0, 1389, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1390, 0, 0, 0, 0,
	693, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 1383, 0, 0, 0, 697, 761,
	2214, 0, 0, 0, 1395, 780, 780, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1401, 1402, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 0, 0,
	1219, 1219, 0, 62, 62, 62, 62, 62, 62, 696,
	0, 0, 0, 693, 693, 693, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1383, 693, 693, 1391, 1392,
	1394, 0, 0, 0, 1393, 1395, 0, 0, 1182, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 1401, 1402,
	0, 0, 0, 0, 1301, 1383, 0, 0, 1397, 0,
	0, 195, 196, 0, 0, 1395, 0, 0, 62, 693,
	0, 0, 0, 0, 0, 0, 0, 775, 1401, 1402,
	0, 0, 0, 1867, 1868, 1520, 0, 0, 1397, 1391,
	1392, 1394, 0, 0, 0, 1393, 0, 0, 0, 0,
	0, 62, 0, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 0, 0, 0, 0, 1391,
	1392, 1394, 0, 0, 0, 1393, 0, 0, 0, 583,
	0, 584, 0, 775, 0, 0, 1369, 0, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 213, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 0, 0, 0,
	0, 1400, 0, 0, 0, 221, 221, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 781, 0, 1399, 1388, 1387, 0, 0, 0, 0,
	543, 544, 0, 0, 0, 1389, 599, 0, 545, 0,
	0, 541, 542, 547, 0, 0, 0, 0, 1390, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 1400, 0, 597, 0, 0, 0, 0, 0,
	0, 693, 0, 197, 693, 693, 0, 0, 0, 0,
	1999, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1400, 0, 950, 949, 198, 0, 0, 194,
	199, 200, 1771, 0, 0, 0, 0, 0, 0, 553,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2049, 221, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 1246, 0, 1248, 1249, 1250, 1251, 1252, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 1383, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 1395, 0,
	0, 0, 0, 0, 0, 2075, 0, 0, 0, 0,
	0, 1401, 1402, 0, 0, 585, 0, 0, 0, 0,
	202, 1397, 0, 0, 2083, 0, 2084, 0, 0, 0,
	0, 0, 0, 0, 221, 221, 0, 552, 570, 586,
	587, 0, 0, 221, 221, 0, 0, 0, 0, 201,
	0, 62, 1391, 1392, 1394, 0, 0, 0, 1393, 0,
	0, 952, 45, 0, 0, 0, 0, 0, 0, 1776,
	568, 0, 0, 766, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 0, 0, 2159, 0, 0, 2160, 0,
	0, 2162, 221, 0, 0, 0, 0, 781, 0, 1399,
	1388, 1387, 0, 0, 0, 0, 0, 0, 2172, 0,
	0, 1389, 0, 0, 0, 0, 0, 195, 196, 596,
	0, 2075, 0, 0, 1390, 0, 276, 0, 0, 221,
	0, 0, 0, 221, 0, 780, 0, 221, 221, 221,
	221, 221, 0, 0, 0, 1424, 0, 0, 0, 221,
	0, 221, 0, 0, 44, 221, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 1400, 2211, 780, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 62, 0, 2120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 261, 0, 285, 0, 0, 1487, 1489,
	1491, 0, 0, 0, 0, 0, 0, 1494, 1495, 1496,
	0, 1499, 0, 0, 1383, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 1401, 1402, 0,
	0, 781, 0, 1399, 1388, 1387, 0, 1397, 781, 0,
	1399, 1388, 1387, 0, 0, 1389, 0, 0, 0, 0,
	0, 0, 1389, 0, 1051, 0, 0, 0, 1390, 0,
	0, 0, 0, 0, 0, 1390, 0, 62, 1391, 1392,
	1394, 0, 0, 0, 1393, 0, 0, 0, 0, 0,
	1545, 1546, 1547, 1548, 0, 0, 2153, 0, 0, 0,
	0, 0, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 0, 305, 306, 0, 307, 308, 309, 311,
	310, 278, 279, 280, 284, 282, 281, 283, 255, 257,
	62, 253, 256, 262, 258, 259, 260, 274, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 275,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 0, 2005, 0,
	0, 0, 0, 0, 45, 1383, 0, 0, 1395, 0,
	0, 0, 0, 0, 0, 1395, 2153, 0, 1650, 0,
	0, 1401, 1402, 0, 0, 0, 0, 0, 1401, 1402,
	0, 1397, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 1391, 1392, 1394, 0, 0, 0, 1393, 1391,
	1392, 1394, 1697, 0, 1698, 1393, 1699, 0, 0, 1776,
	0, 0, 1702, 0, 1704, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 0, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 1629, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 1411, 0, 44, 0, 1409, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 1408, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 1400, 0, 0, 0, 0,
	0, 0, 1400, 1407, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 1627, 0, 1630, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 60, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 277, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 1850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 1876, 0, 0, 1877, 0, 1878, 0, 1879,
	0, 1880, 1881, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 0, 305, 306, 0, 307, 308, 309,
	311, 310, 278, 279, 280, 284, 282, 281, 283, 255,
	257, 0, 253, 256, 262, 258, 259, 260, 274, 263,
	264, 265, 266, 1628, 268, 269, 270, 271, 272, 273,
	275, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 254, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 57, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 1538, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 374, 0, 0, 177, 122,
	121, 366, 0, 365, 1539, 369, 370, 373, 60, 197,
	191, 0, 0, 367, 375, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 1070, 1076, 1074, 0, 0, 1071, 0, 0,
	1069, 0, 0, 1078, 0, 0, 1077, 1063, 1073, 1075,
	1072, 1067, 0, 1062, 0, 1080, 1079, 1081, 1060, 1083,
	0, 0, 0, 1087, 1084, 1086, 1085, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 1065, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 1068,
	0, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 0, 368, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 57, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 1411, 0, 44, 0, 1409, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 1408, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 400, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 1804, 1802, 1798, 1797, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 1800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 57, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 1411, 0, 44,
	0, 1409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 1408, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1803, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 1804, 1802, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	1800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	168, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	57, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 0, 0, 0, 44, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 670,
	672, 0, 0, 0, 373, 60, 197, 191, 0, 0,
	674, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 60, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1803, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 1804, 1802, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 1800, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 213, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 60, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 44, 0, 911, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 60, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 45, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 0, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 0,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 179, 168, 0, 127, 181, 95, 115, 190, 117,
	118, 153, 74, 136, 0, 112, 93, 0, 0, 0,
	98, 67, 107, 68, 96, 129, 0, 94, 0, 170,
	139, 0, 57, 0, 188, 0, 144, 0, 0, 0,
	0, 0, 131, 172, 134, 163, 126, 154, 83, 143,
	183, 113, 149, 184, 0, 0, 0, 44, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	178, 109, 80, 193, 0, 152, 66, 146, 0, 0,
	72, 75, 189, 176, 103, 102, 0, 0, 0, 0,
	0, 0, 0, 130, 135, 159, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 142, 0, 0, 0, 79, 73, 0, 128, 0,
	0, 0, 82, 0, 100, 160, 0, 63, 0, 0,
	0, 0, 166, 173, 125, 0, 0, 177, 122, 121,
	0, 0, 0, 0, 0, 0, 114, 60, 197, 191,
	0, 0, 180, 132, 171, 97, 108, 0, 104, 0,
	0, 0, 105, 106, 141, 155, 0, 0, 0, 0,
	0, 198, 162, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 64, 101,
	164, 167, 87, 151, 76, 110, 157, 111, 133, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 201, 70, 91, 174, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 45, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 90, 84,
	85, 137, 138, 185, 186, 187, 161, 81, 0, 0,
	88, 89, 0, 169, 0, 0, 0, 140, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 0, 116,
	65, 120, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 124, 119, 145, 147, 156, 165, 175,
	182, 158, 195, 196, 179, 168, 0, 127, 181, 95,
	115, 190, 117, 118, 153, 74, 136, 0, 112, 93,
	0, 0, 0, 98, 67, 107, 68, 96, 129, 0,
	94, 0, 170, 139, 0, 0, 0, 188, 0, 144,
	0, 0, 0, 0, 0, 131, 172, 134, 163, 126,
	154, 83, 143, 183, 113, 149, 184, 0, 490, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 148, 178, 109, 80, 193, 0, 152, 66,
	146, 0, 0, 72, 75, 189, 176, 103, 102, 0,
	0, 0, 0, 0, 0, 0, 130, 135, 159, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 142, 0, 0, 0, 79, 73,
	0, 128, 0, 0, 0, 82, 0, 100, 160, 0,
	63, 0, 0, 0, 0, 166, 173, 125, 0, 0,
	177, 122, 121, 0, 0, 0, 0, 0, 0, 114,
	60, 197, 191, 0, 0, 180, 132, 171, 97, 108,
	0, 104, 0, 0, 0, 105, 106, 141, 155, 0,
	0, 0, 0, 0, 198, 162, 0, 194, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 64, 101, 164, 167, 87, 151, 76, 110, 157,
	111, 133, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 0, 201, 70, 91,
	174, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	45, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 90, 84, 85, 137, 138, 185, 186, 187, 161,
	81, 0, 0, 88, 89, 0, 169, 0, 0, 0,
	140, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 116, 65, 120, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 0, 124, 119, 145, 147,
	156, 165, 175, 182, 158, 195, 196, 179, 168, 0,
	127, 181, 95, 115, 190, 117, 118, 153, 74, 136,
	0, 112, 93, 0, 0, 0, 98, 67, 107, 68,
	96, 129, 0, 94, 0, 170, 139, 0, 0, 0,
	188, 0, 144, 0, 0, 0, 0, 0, 131, 172,
	134, 163, 126, 154, 83, 143, 183, 113, 149, 184,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 178, 109, 80, 193,
	0, 152, 66, 146, 0, 0, 72, 75, 189, 176,
	103, 102, 0, 0, 0, 0, 0, 0, 0, 130,
	135, 159, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1875, 0, 99, 0, 142, 0, 0,
	0, 79, 73, 0, 128, 0, 0, 0, 82, 0,
	100, 160, 0, 63, 0, 0, 0, 0, 166, 173,
	125, 0, 0, 177, 122, 121, 0, 0, 0, 0,
	0, 0, 114, 60, 197, 191, 0, 0, 180, 132,
	171, 97, 108, 0, 104, 0, 0, 0, 105, 106,
	141, 155, 0, 0, 0, 0, 0, 198, 162, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 64, 101, 164, 167, 87, 151,
	76, 110, 157, 111, 133, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	201, 70, 91, 174, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 45, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 90, 84, 85, 137, 138, 185,
	186, 187, 161, 81, 0, 0, 88, 89, 0, 169,
	0, 0, 0, 140, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 116, 65, 120, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 0, 124,
	119, 145, 147, 156, 165, 175, 182, 158, 195, 196,
	179, 168, 0, 127, 181, 95, 115, 190, 117, 118,
	153, 74, 136, 0, 112, 93, 0, 0, 0, 98,
	67, 107, 68, 96, 129, 0, 94, 0, 170, 139,
	0, 0, 0, 188, 0, 144, 0, 0, 0, 0,
	0, 131, 172, 134, 163, 126, 154, 83, 143, 183,
	113, 149, 184, 0, 0, 0, 213, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 178,
	109, 80, 193, 0, 152, 66, 146, 0, 0, 72,
	75, 189, 176, 103, 102, 0, 0, 0, 0, 0,
	0, 0, 130, 135, 159, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	142, 0, 0, 0, 79, 73, 0, 128, 0, 0,
	0, 82, 0, 100, 160, 0, 63, 0, 0, 0,
	0, 166, 173, 125, 0, 0, 177, 122, 121, 0,
	0, 0, 0, 0, 0, 114, 60, 197, 191, 0,
	0, 180, 132, 171, 97, 108, 0, 104, 0, 0,
	0, 105, 106, 141, 155, 0, 0, 0, 0, 0,
	198, 162, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 64, 101, 164,
	167, 87, 151, 76, 110, 157, 111, 133, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 201, 70, 91, 174, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 45, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 90, 84, 85,
	137, 138, 185, 186, 187, 161, 81, 0, 0, 88,
	89, 0, 169, 0, 0, 0, 140, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 116, 65,
	120, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 0, 124, 119, 145, 147, 156, 165, 175, 182,
	158, 195, 196, 179, 168, 0, 127, 181, 95, 115,
	190, 117, 118, 153, 74, 136, 0, 112, 93, 0,
	0, 0, 98, 67, 107, 68, 96, 129, 0, 94,
	0, 170, 139, 0, 0, 0, 188, 0, 144, 0,
	0, 0, 0, 0, 131, 172, 134, 163, 126, 154,
	83, 143, 183, 113, 149, 184, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 178, 109, 80, 193, 0, 152, 66, 146,
	0, 0, 72, 75, 189, 176, 103, 102, 686, 0,
	0, 0, 0, 0, 0, 130, 135, 159, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 142, 0, 0, 0, 79, 73, 0,
	128, 0, 0, 0, 82, 0, 100, 160, 0, 63,
	0, 0, 0, 0, 166, 173, 125, 0, 0, 177,
	122, 121, 0, 0, 0, 0, 0, 0, 114, 60,
	197, 191, 0, 0, 180, 132, 171, 97, 108, 0,
	104, 0, 0, 0, 105, 106, 141, 155, 0, 0,
	0, 0, 0, 198, 162, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	64, 101, 164, 167, 87, 151, 76, 110, 157, 111,
	133, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 201, 70, 91, 174,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 45,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	90, 84, 85, 137, 138, 185, 186, 187, 161, 81,
	0, 0, 88, 89, 0, 169, 0, 0, 0, 140,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 116, 65, 120, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 124, 119, 145, 147, 156,
	165, 175, 182, 158, 195, 196, 179, 168, 0, 127,
	181, 95, 115, 190, 117, 118, 153, 74, 136, 0,
	112, 93, 0, 0, 0, 98, 67, 107, 68, 96,
	129, 0, 94, 0, 170, 139, 0, 0, 0, 188,
	0, 144, 0, 0, 0, 0, 0, 131, 172, 134,
	163, 126, 154, 83, 143, 183, 113, 149, 184, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 178, 109, 80, 193, 0,
	152, 66, 146, 0, 0, 72, 75, 189, 176, 103,
	102, 0, 0, 0, 0, 0, 0, 0, 130, 135,
	159, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 142, 0, 0, 0,
	79, 73, 0, 128, 0, 0, 0, 82, 0, 100,
	160, 0, 63, 0, 0, 0, 0, 166, 173, 125,
	0, 0, 177, 122, 121, 0, 0, 0, 0, 0,
	0, 114, 60, 197, 191, 0, 0, 180, 132, 171,
	97, 108, 0, 104, 0, 0, 0, 105, 106, 141,
	155, 0, 0, 0, 0, 0, 198, 162, 0, 194,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 64, 101, 164, 167, 87, 151, 76,
	110, 157, 111, 133, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 201,
	70, 91, 174, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 45, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 90, 84, 85, 137, 138, 185, 186,
	187, 161, 81, 0, 0, 88, 89, 0, 169, 0,
	0, 0, 140, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 116, 65, 120, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 124, 119,
	145, 147, 156, 165, 175, 182, 158, 195, 196, 179,
	2150, 0, 127, 181, 95, 115, 190, 117, 118, 153,
	74, 136, 0, 112, 93, 0, 0, 0, 98, 67,
	107, 68, 96, 129, 0, 94, 0, 170, 139, 0,
	0, 0, 188, 0, 144, 0, 0, 0, 0, 0,
	131, 172, 134, 163, 126, 154, 83, 143, 183, 113,
	149, 184, 509, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 178, 109,
	80, 193, 0, 152, 66, 146, 0, 0, 72, 75,
	189, 176, 103, 102, 0, 0, 0, 0, 0, 0,
	0, 130, 135, 159, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 142,
	0, 0, 0, 79, 73, 0, 128, 0, 0, 0,
	82, 0, 100, 160, 0, 63, 0, 0, 0, 0,
	166, 173, 125, 0, 0, 177, 122, 121, 0, 0,
	0, 0, 0, 0, 114, 0, 197, 191, 0, 0,
	180, 132, 171, 97, 108, 0, 104, 0, 0, 0,
	105, 106, 141, 155, 0, 0, 0, 0, 0, 198,
	162, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 64, 101, 164, 167,
	87, 151, 76, 110, 157, 111, 133, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 201, 70, 91, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 90, 84, 85, 137,
	138, 185, 186, 187, 161, 81, 0, 0, 88, 89,
	0, 169, 0, 0, 0, 140, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 116, 65, 120,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 124, 119, 145, 147, 156, 165, 175, 182, 158,
	195, 196, 179, 168, 0, 127, 181, 95, 115, 190,
	117, 118, 153, 74, 136, 0, 112, 93, 0, 0,
	0, 98, 67, 107, 68, 96, 129, 0, 94, 0,
	170, 139, 0, 0, 0, 188, 0, 144, 0, 0,
	0, 0, 0, 131, 172, 134, 163, 126, 154, 83,
	143, 183, 113, 149, 184, 0, 0, 0, 213, 0,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 178, 109, 80, 193, 0, 152, 66, 146, 0,
	0, 72, 75, 189, 176, 103, 102, 0, 0, 0,
	0, 0, 0, 0, 130, 135, 159, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 142, 0, 0, 0, 79, 73, 0, 128,
	0, 0, 0, 82, 0, 100, 160, 0, 63, 0,
	0, 0, 0, 166, 173, 125, 0, 0, 177, 122,
	121, 0, 0, 0, 0, 0, 0, 114, 0, 197,
	191, 0, 0, 180, 132, 171, 97, 108, 0, 104,
	0, 0, 0, 105, 106, 141, 155, 0, 0, 0,
	0, 0, 198, 162, 0, 194, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 64,
	101, 164, 167, 87, 151, 76, 110, 157, 111, 133,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 201, 70, 91, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 90,
	84, 85, 137, 138, 185, 186, 187, 161, 81, 0,
	0, 88, 89, 0, 169, 0, 0, 0, 140, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	116, 65, 120, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 124, 119, 145, 147, 156, 165,
	175, 182, 158, 195, 196, 179, 168, 0, 127, 181,
	95, 115, 190, 117, 118, 153, 74, 136, 0, 112,
	93, 0, 0, 0, 98, 67, 107, 68, 96, 129,
	0, 94, 0, 170, 139, 0, 0, 0, 188, 0,
	144, 0, 0, 0, 0, 0, 131, 172, 134, 163,
	126, 154, 83, 143, 183, 113, 149, 184, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 178, 109, 80, 193, 0, 152,
	66, 146, 0, 0, 72, 75, 189, 176, 103, 102,
	0, 0, 0, 0, 0, 0, 0, 130, 135, 159,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 142, 0, 0, 0, 79,
	73, 0, 128, 0, 0, 0, 82, 0, 100, 160,
	0, 63, 0, 0, 0, 0, 166, 173, 125, 0,
	0, 177, 122, 121, 0, 0, 0, 0, 0, 0,
	114, 0, 197, 191, 0, 0, 180, 132, 171, 97,
	108, 0, 104, 0, 0, 0, 105, 106, 141, 155,
	0, 0, 0, 0, 0, 198, 162, 0, 194, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 64, 101, 164, 167, 87, 151, 76, 110,
	157, 111, 133, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 201, 70,
	91, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 90, 84, 85, 137, 138, 185, 186, 187,
	161, 81, 0, 0, 88, 89, 0, 169, 0, 0,
	0, 140, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 116, 65, 120, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 0, 0, 124, 119, 145,
	147, 156, 165, 175, 182, 158, 195, 196, 179, 168,
	0, 127, 181, 95, 115, 190, 117, 118, 153, 74,
	136, 0, 112, 93, 0, 0, 0, 98, 67, 107,
	68, 96, 129, 0, 94, 0, 170, 139, 0, 0,
	0, 188, 0, 144, 0, 0, 0, 0, 0, 131,
	172, 134, 163, 126, 154, 83, 143, 183, 113, 149,
	184, 0, 0, 0, 220, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 178, 109, 80,
	193, 0, 152, 66, 146, 0, 0, 72, 75, 189,
	176, 103, 102, 0, 0, 0, 0, 0, 0, 0,
	130, 135, 159, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 142, 0,
	0, 0, 79, 73, 0, 128, 0, 0, 0, 82,
	0, 100, 160, 0, 63, 0, 0, 0, 0, 166,
	173, 125, 0, 0, 177, 122, 121, 0, 0, 0,
	0, 0, 0, 114, 0, 197, 191, 0, 0, 180,
	132, 171, 97, 108, 0, 104, 0, 0, 0, 105,
	106, 141, 155, 0, 0, 0, 0, 0, 198, 162,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 64, 101, 164, 167, 87,
	151, 76, 110, 157, 111, 133, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 201, 70, 91, 174, 0, 0, 781, 0, 1399,
	1388, 1387, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 1389, 0, 0, 0, 0, 0, 0, 781, 0,
	1399, 1388, 1387, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 1389, 0, 86, 90, 84, 85, 137, 138,
	185, 186, 187, 161, 81, 1390, 0, 88, 89, 0,
	169, 0, 0, 0, 140, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 116, 65, 120, 0,
	0, 0, 0, 0, 721, 0, 77, 78, 0, 2000,
	124, 119, 145, 147, 156, 165, 175, 182, 158, 195,
	196, 720, 0, 0, 0, 0, 719, 0, 0, 0,
	1895, 0, 0, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 1383, 0, 0, 559, 564, 565,
	566, 722, 0, 0, 1395, 0, 717, 546, 0, 0,
	582, 0, 0, 0, 0, 1383, 0, 1401, 1402, 0,
	0, 0, 0, 0, 0, 1395, 0, 1397, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 1401, 1402,
	599, 0, 545, 0, 0, 1059, 542, 547, 1397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1391, 1392,
	1394, 0, 0, 0, 1393, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 1391,
	1392, 1394, 0, 0, 0, 1393, 1061, 0, 0, 0,
	0, 0, 0, 781, 0, 1399, 1388, 1387, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 1389, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	1390, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1070, 1076, 1074, 0, 0, 1071,
	0, 0, 1069, 0, 0, 1078, 950, 949, 1077, 1063,
	1073, 1075, 1072, 1067, 0, 1062, 0, 1080, 1079, 1081,
	1060, 1083, 0, 0, 951, 1087, 1084, 1086, 1085, 585,
	1082, 0, 0, 0, 202, 0, 0, 0, 0, 1064,
	1065, 1400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 570, 586, 587, 781, 0, 1399, 1388, 1387,
	1066, 1068, 1400, 201, 0, 0, 0, 0, 0, 1389,
	1383, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	1395, 0, 1390, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 1401, 1402, 0, 0, 0, 0, 0,
	0, 0, 0, 1397, 0, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 276, 0, 572, 571, 580, 721, 950, 949,
	0, 0, 0, 0, 1391, 1392, 1394, 0, 0, 0,
	1393, 0, 0, 952, 720, 0, 951, 0, 0, 719,
	44, 1776, 0, 0, 0, 0, 583, 0, 584, 0,
	0, 195, 196, 596, 0, 0, 573, 574, 0, 0,
	0, 0, 0, 0, 2047, 0, 509, 0, 0, 213,
	558, 555, 556, 560, 561, 562, 563, 0, 0, 0,
	559, 564, 565, 566, 722, 2048, 0, 0, 0, 717,
	546, 0, 1395, 582, 0, 0, 0, 0, 0, 261,
	0, 285, 0, 0, 0, 1401, 1402, 0, 0, 0,
	0, 0, 0, 0, 0, 1397, 0, 543, 544, 0,
	0, 0, 0, 599, 0, 545, 0, 0, 541, 542,
	547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 1391, 1392, 1394, 0,
	0, 597, 1393, 0, 0, 952, 0, 0, 0, 0,
	197, 0, 0, 1776, 0, 0, 0, 1400, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 194, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 0, 305,
	306, 0, 307, 308, 309, 311, 310, 278, 279, 280,
	284, 282, 281, 283, 255, 257, 0, 253, 256, 262,
	258, 259, 260, 274, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 461, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1400,
	45, 0, 0, 0, 552, 570, 586, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 781, 0, 1399,
	1388, 1387, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 1389, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 588,
	598, 594, 595, 592, 593, 591, 590, 589, 600, 575,
	576, 577, 578, 579, 581, 0, 0, 572, 571, 580,
	721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 949, 0, 0, 0, 1031, 0, 720, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 951, 583,
	0, 584, 0, 0, 195, 196, 596, 0, 0, 573,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 509,
	0, 0, 213, 558, 555, 556, 560, 561, 562, 563,
	0, 0, 0, 559, 564, 565, 566, 722, 0, 0,
	0, 0, 717, 546, 1383, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1401, 1402, 0,
	543, 544, 1036, 0, 0, 0, 599, 1397, 545, 0,
	0, 541, 542, 547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 0, 0, 1391, 1392,
	1394, 0, 0, 197, 1393, 0, 0, 952, 0, 0,
	0, 721, 535, 0, 0, 1813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 720, 194,
	199, 200, 0, 719, 0, 0, 0, 0, 0, 553,
	583, 0, 584, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 953, 213, 558, 555, 556, 560, 561, 562,
	563, 0, 0, 0, 559, 564, 565, 566, 722, 0,
	0, 0, 0, 717, 546, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 585, 0, 599, 0, 545,
	202, 0, 541, 542, 547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 570, 586,
	587, 1400, 0, 0, 0, 597, 0, 0, 0, 201,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 45, 535, 0, 0, 0, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	194, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	553, 0, 588, 598, 594, 595, 592, 593, 591, 590,
	589, 600, 575, 576, 577, 578, 579, 581, 0, 0,
	572, 571, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 196, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 570,
	586, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 598, 594, 595, 592, 593, 591,
	590, 589, 600, 575, 576, 577, 578, 579, 581, 0,
	0, 572, 571, 580, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 0, 583, 0, 584, 0, 0, 195, 196,
	596, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 722, 0, 0, 0, 0, 717, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 1036, 0, 0, 0,
	599, 0, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 781, 0, 0, 721, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 720, 194, 199, 200, 0, 719, 0, 0,
	0, 0, 0, 553, 583, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 213, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 722, 0, 0, 0, 0, 717, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 544, 0, 0, 585,
	0, 599, 0, 545, 202, 0, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 570, 586, 587, 0, 0, 0, 0, 597,
	0, 0, 0, 201, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 45, 535, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 570, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 0, 0,
	0, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 213, 558, 1043, 556, 1044, 1045,
	1046, 1047, 195, 196, 596, 559, 1048, 1049, 1050, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 0, 0, 0, 0, 599, 0,
	545, 0, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 721, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	720, 194, 199, 200, 0, 719, 0, 0, 0, 0,
	0, 553, 583, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 213, 558, 555, 556, 560,
	561, 562, 563, 0, 0, 0, 559, 564, 565, 566,
	722, 0, 0, 0, 0, 717, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 0, 0, 585, 0, 599,
	0, 545, 202, 0, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	570, 586, 587, 0, 0, 0, 0, 597, 0, 0,
	0, 201, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 45, 535, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 553, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	0, 0, 572, 571, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 596, 0, 0, 0, 0, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 570, 586, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 0, 0, 572, 571, 580, 1234, 1235, 1236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 0, 584, 0, 0, 0, 0,
	0, 0, 0, 573, 574, 0, 0, 0, 0, 0,
	195, 196, 596, 509, 0, 0, 213, 558, 555, 556,
	560, 561, 562, 563, 0, 0, 0, 559, 564, 565,
	566, 0, 0, 0, 0, 0, 0, 546, 0, 0,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 0, 0,
	599, 0, 545, 0, 0, 541, 542, 547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 194, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 553, 583, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 573, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 213, 558, 555,
	556, 560, 561, 562, 563, 0, 0, 0, 559, 564,
	565, 566, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 544, 0, 0, 585,
	0, 599, 0, 545, 202, 0, 541, 542, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 570, 586, 587, 0, 0, 0, 0, 597,
	0, 0, 0, 201, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 45, 535, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 194, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 588, 598, 594, 595,
	592, 593, 591, 590, 589, 600, 575, 576, 577, 578,
	579, 581, 0, 0, 572, 571, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 195, 196, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 570, 586, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 588, 598, 594,
	595, 592, 593, 591, 590, 589, 600, 575, 576, 577,
	578, 579, 581, 0, 0, 572, 571, 580, 0, 0,
	0, 583, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 573, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 213, 558, 1043, 556, 1044, 1045,
	1046, 1047, 195, 196, 596, 559, 1048, 1049, 1050, 0,
	0, 0, 0, 0, 0, 546, 0, 0, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 544, 0, 0, 0, 0, 599, 0,
	545, 0, 0, 541, 542, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 194, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 553, 583, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 213, 558, 555, 556, 560,
	561, 562, 563, 0, 0, 0, 559, 564, 565, 566,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 544, 0, 0, 585, 0, 599,
	0, 545, 202, 0, 541, 542, 547, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	570, 586, 587, 0, 0, 0, 0, 597, 0, 0,
	0, 201, 0, 0, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 45, 535, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 194, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 553, 0, 588, 598, 594, 595, 592, 593,
	591, 590, 589, 600, 575, 576, 577, 578, 579, 581,
	44, 0, 572, 571, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	196, 596, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 585, 815,
	0, 823, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 570, 586, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	815, 0, 823, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 598, 594, 595, 592,
	593, 591, 590, 589, 600, 575, 576, 577, 578, 579,
	581, 817, 0, 572, 571, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 304, 0, 305,
	306, 0, 307, 308, 309, 311, 310, 0, 1008, 818,
	195, 196, 596, 0, 0, 0, 0, 253, 816, 0,
	0, 0, 0, 822, 821, 0, 0, 0, 0, 0,
	0, 0, 0, 825, 826, 0, 0, 0, 0, 295,
	296, 297, 298, 299, 300, 301, 302, 303, 304, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	818, 0, 0, 0, 0, 0, 0, 0, 253, 816,
	45, 0, 0, 0, 822, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254,
}

var yyPact = [...]int16{
	1067, -1000, -267, -1000, -1000, -1000, 1783, 2431, 1729, 1729,
	991, 1800, -1000, -1000, -1000, 8966, 823, 822, 814, 356,
	793, 346, 163, 3554, 731, 834, 731, 731, -1000, -221,
	-183, -1000, -15, 1621, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 841, -1000, -1000, -1000, 1620, 3680, 828, 3554,
	3554, -1000, 749, 1598, -1000, 4623, 4623, 4623, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 453, 346, 346, 731, 237, 731, 1798,
	568, 1797, 346, -1000, -1000, 933, 1107, -1000, 1905, 930,
	-1000, -1000, 10931, 731, 346, 3554, -1000, -1000, -1000, -1000,
	827, 1729, -1000, 821, 859, 3554, 2551, 867, 863, 3554,
	3554, 207, 5427, 2287, -151, 91, -1000, -1000, -1000, -1000,
	928, 1702, -1000, -1000, -1000, 1702, 157, 1782, 1702, 1782,
	-1000, 1702, 1782, 147, 147, 147, 147, 147, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1779, 1700, -1000, 1702, 1702,
	1702, 1702, 1702, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1773, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1763, 192, 1763, 1728, 1728,
	-1000, -1000, 2287, 2287, 1777, 3554, 346, 1796, 1794, 3554,
	-234, 3554, 3554, 1985, -1000, -1000, -1000, 319, 3554, 568,
	10145, 1878, 13199, 12503, -1000, 3554, -1000, -1000, 3554, -1000,
	3554, 1033, 654, 739, 684, 862, 853, 3554, 786, 1846,
	1007, 924, 9359, -1000, 1852, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1772, 1128, 346, 583, 169, 1665, 778,
	757, 735, 1423, 531, -1000, -1000, -1000, 1176, -1000, 346,
	-1000, 2021, -1000, -1000, 574, -1000, 560, 1093, 1283, 3554,
	1770, 173, 1766, 15206, 1234, -1000, -281, -1000, 68, -1000,
	346, -1000, 1209, 147, 1702, -1000, 147, 1225, 147, 147,
	-1000, -1000, 971, 1859, 971, 971, 971, 971, 1281, 1281,
	-56, -56, -1000, -1000, -1000, 1232, -1000, 1228, 1763, -1000,
	-1000, -1000, 1227, -1000, 3554, 346, 1762, 1791, 3554, 3554,
	1899, 758, -1000, -1000, 1898, 1893, 1619, -1000, -1000, 311,
	-1000, -1000, 568, 1985, -1000, 921, -1000, -1000, -1000, -1000,
	-1000, 1761, -1000, -1000, 1663, 842, -1000, 1662, 8966, 705,
	346, -1000, 542, -1000, 531, 346, 346, 346, 346, 346,
	665, 7394, 639, 690, 861, 346, 788, 1181, 11717, 10538,
	207, -1000, -1000, -1000, 3522, 515, 2005, 1924, 539, 43,
	-192, 1403, -1000, -1000, 1759, -1000, -1000, -1000, 14714, -1000,
	1383, -1000, 1368, -1000, 1365, 1352, 26, 346, -1000, -199,
	109, 83, -1000, -1000, 1665, -1000, 635, 14714, 1889, -1000,
	1862, 1036, 3731, -1000, -1000, 1258, 888, -1000, -1000, -1000,
	-1000, 15206, 15206, 15206, 15206, 15206, 15206, 15206, -1000, -1000,
	-1000, -1000, 103, -1000, 14236, -1000, -1000, 1282, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 920, 918, -1000,
	-271, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
	1665, 1665, 14714, 1665, 1845, 1665, 1665, 1665, 1665, 1665,
	1665, 1665, 1665, 1665, 1665, 1665, 15880, 1665, 1665, 1665,
	1665, -1000, -1000, -1000, -1000, -1000, -1000, 1614, 971, 147,
	971, 1554, 1545, 971, 971, -1000, -1000, 1342, 1025, -1000,
	-1000, -1000, -1000, 1596, -1000, 1591, -1000, 202, 198, -1000,
	1525, 1659, -1000, 1587, 1689, 1789, 3522, 3554, 1758, 1757,
	1678, 731, 1678, 1921, 394, 3554, 1985, 374, 1985, 1613,
	10931, 1281, 346, 346, 3554, 346, -1000, 346, -1000, -1000,
	-17, 1756, 728, -1000, -1000, -1000, 763, 346, -1000, 705,
	8966, -1000, 346, -1000, -1000, 346, 346, 346, 633, -1000,
	-1000, 1099, -1000, -1000, 1003, 916, 8573, -1000, -1000, 1569,
	-1000, 375, 1702, 1702, 14714, 1872, 1872, 1872, 1872, 915,
	-1000, 295, 313, 309, 911, 911, -213, 503, 502, -192,
	1665, 1683, 1753, -1000, 3522, 747, -1000, 14714, 968, 1665,
	1665, 1665, 1665, 14236, -1000, -1000, -1000, -1000, -1000, -192,
	1752, -1000, -1000, -1000, 1093, -1000, 1750, 1748, -1000, 1747,
	14714, 374, -1000, 1042, 140, -1000, 1658, -1000, 1224, 15206,
	15206, 15206, 15206, 15206, 15206, 15206, 15206, 15206, 15206, 15206,
	15206, 15829, 1240, -1000, 577, 577, 77, 77, 77, 77,
	77, 77, 129, -1000, 1289, 186, 1557, 1973, 2031, 14236,
	948, -1000, 13581, -1000, 10145, 10931, 14563, 14085, 14085, 14085,
	14085, 12875, 14714, 14085, 14085, 14085, 14085, 1873, 1070, 948,
	839, 1918, 1289, 1289, 1289, 1211, -1000, 1289, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 151, -1000, -1000, -278,
	-1000, -279, -1000, -1000, -1000, -1000, -1000, -92, 914, 14085,
	14085, 14085, 14085, -1000, -1000, 971, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 147, 1280, 147, 86, 81, -1000,
	1223, -1000, 1222, 3522, 346, 3554, 1513, 1657, 1872, 1872,
	1872, 1872, 1745, 374, 3522, -1000, 1678, 3554, -1000, 750,
	1999, -1000, -1000, 1914, -1000, 1653, -1000, -1000, 1635, 3554,
	-1000, 1565, 1743, 193, -1000, -1000, 548, 1741, 110, 495,
	1740, 1652, 3522, 740, 1156, 4623, 346, 670, 346, -1000,
	-18, 544, -1000, -1000, 346, -1000, 1875, 1158, 346, -1000,
	-1000, -1000, -1000, 3833, 3522, 1872, 1212, -1000, -1000, -1000,
	1872, 1035, -1000, -1000, -1000, -1000, -1000, -1000, 10931, 300,
	263, -1000, -1000, 1109, -1000, -1000, 1165, 383, 1105, -1000,
	346, -192, 1739, 14714, 14714, 402, 3522, 1561, 409, 14714,
	14714, 1137, -1000, -1000, 419, 15055, 1194, 1071, 15206, 967,
	15206, 4251, 4251, 4251, 4251, 15206, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1320, -1000, 1678, 839, 1289, 1289,
	-1000, 10931, 1665, -1000, 1199, -1000, 1190, 1491, 747, 1559,
	-144, 14714, 1735, 1036, -1000, 126, 248, 77, 391, 391,
	41, 41, 41, 41, 41, 64, 64, -1000, -94, -1000,
	71, -1000, -1000, -1000, -1000, -1000, 1270, -1000, -1000, -1000,
	-1000, 14714, -1000, 1943, 1971, 1678, 1892, 1289, 1835, -1000,
	1289, 14085, 1512, 1557, -1000, 666, -1000, 910, 1665, -1000,
	67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3816, 1512, 666, 1512, 1512, 1512, 869, 1647, 15684,
	1702, 1258, 1702, 1728, -1000, -1000, 222, 1702, 219, -1000,
	-1000, -1000, -1000, 1728, -1000, -1000, -1000, -1000, -1000, 1702,
	1702, -1000, -1000, 1702, 1702, -1000, 1702, 1702, 753, 1512,
	1655, 1648, 1512, 14085, -1000, 1087, -1000, 14714, 1289, -1000,
	3554, -1000, -1000, -1000, -1000, 1289, -1000, -1000, -282, -283,
	180, 172, 346, 1512, 1289, 1646, 1512, 1512, -1000, 971,
	-1000, 971, -1000, -1000, 1486, 1468, 1459, 1727, 1726, -223,
	3522, 1548, 1522, 1289, 1887, 10931, -1000, -1000, -1000, -1000,
	-1000, 361, 1066, 346, 4072, 1913, 147, -1000, 6608, 825,
	346, -1000, 3522, 3522, 1725, 1724, 1716, 14714, 14714, 368,
	1520, 15206, 1159, 430, -1000, 1153, -1000, -1000, 460, 1715,
	108, 1714, 581, 1132, 4623, 660, 1243, -1000, -1000, 999,
	1786, 3842, 189, -1000, 1306, 1052, 1242, 1050, 1045, 1044,
	1037, 1029, 1027, 1026, 1022, 1021, 1019, -1000, -1000, 1452,
	-1000, 1872, 1665, -1000, -1000, 264, 515, 2018, -1000, -1000,
	515, 2008, 1713, 1712, 3522, 747, 1416, -1000, 190, 233,
	1665, 1665, 1518, 3833, -1000, -37, 419, 496, -1000, -1000,
	1167, -1000, -1000, 3731, 15206, 15206, 15206, -1000, -1000, -1000,
	-1000, 14236, 1194, 15206, 15206, 15206, 40, 15206, 3731, 3731,
	3731, 3731, 3731, 2854, 1289, 1289, -1000, -1000, 1516, -1000,
	14714, -1000, 1448, -1000, -1000, 409, 725, -1000, -1000, 925,
	-1000, 1395, 168, 948, 1871, 14714, 14714, 1973, -1000, 1678,
	-1000, -1000, -1000, 1873, -1000, -1000, 1177, -1000, 1512, 14085,
	-265, -1000, -1000, -1000, 336, -1000, -1000, 8180, 14085, -1000,
	15533, 15829, -265, -265, -1000, -1000, 5413, 1240, 14714, -1000,
	1209, 335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5413, -1000, 15206, 15206, 15206, 15206,
	-51, 1637, 1038, -1000, 14714, 743, -1000, -1000, -1000, -1000,
	-1000, 80, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -223, 3522, 3522, 1980, 1710, 1315, 1980, 3833,
	-1000, 1678, 1608, 347, 235, 14714, -1000, 3172, -1000, 4072,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1973, 14714, -1000, -1000, -1000, -1000, -1000, 346,
	4695, 346, 346, 346, 819, 14714, 354, 14714, -1000, -1000,
	-1000, -1000, -1000, 1066, 337, 1304, 6608, 6608, 6608, 5034,
	6608, 6608, 840, -1000, 1501, 1496, 3522, 3522, 3522, 810,
	1494, 1708, 1707, -1000, 3731, -1000, 4623, -1000, 1706, 3522,
	3522, 1705, 1703, 14714, 15206, 1135, 427, -1000, 1131, -1000,
	457, -1000, 1134, -1000, 346, -1000, -159, 3842, 346, -1000,
	1203, -1000, -1000, 1150, 1202, 1150, 1150, 1150, 1150, 1150,
	370, 1195, 610, 1872, -1000, -1000, -1000, -1000, 911, -1000,
	911, 10931, 3522, 1490, 409, 1980, 14714, 606, 528, 14714,
	14714, 3833, 1786, -1000, -1000, -1000, -1000, 3731, 14236, 3731,
	14236, 3731, 14236, -1000, 40, 3731, 1483, -1000, 15206, 40,
	15206, -1000, -1000, 596, 10931, 747, -1000, -1000, 2003, -1000,
	-160, 329, -1000, 50, -1000, 2014, 934, 716, 1632, -1000,
	697, 1943, 1289, 1818, -1000, -1000, -1000, -1000, 1665, -1000,
	-1000, 897, 1289, -1000, -1000, -1000, -1000, 1289, 1702, -1000,
	1289, 708, -1000, -1000, 1289, 3015, 2294, 150, 514, 1665,
	-28, -1000, 948, 14714, -1000, -1000, 1980, 1293, 1485, 3833,
	14714, 374, -223, 3833, -1000, -1000, -90, 14714, 4072, 4792,
	948, 4792, -1000, 4072, 1015, 1943, 4345, 729, 820, 945,
	1631, 521, -1000, 6215, 1142, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	346, 1992, 1989, 1988, 1986, 13521, 14714, 14714, -1000, 213,
	340, -1000, -1000, -1000, -1000, -1000, 5822, 1702, 147, 1700,
	-1000, -1000, -1000, -1000, -1000, 515, 1480, 1471, 1467, 417,
	1980, 14714, 14714, -1000, 3522, 1465, 1462, 3522, 3522, 737,
	3731, -1000, 4623, -1000, 1699, -1000, -1000, 1665, 1458, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1093,
	1093, 1455, 1447, 3833, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1416, 1416, 1786, 515, 186, 186, 186,
	-1000, 15206, 3731, -1000, 3731, 3554, -1000, 409, 911, 911,
	-1000, -1000, -1000, 267, 1082, 1036, 1036, 1192, 39, -1000,
	1967, -1000, -1000, 1843, 14714, 14714, 14714, -1000, 1871, -1000,
	14085, -1000, 621, 9752, -1000, -1000, -1000, -1000, 15206, -1000,
	-1000, 15206, -1000, 15206, -1000, 15206, -1000, 15206, 15206, 1289,
	1241, 948, 3833, 1980, 3833, 1786, 948, 1411, 1980, 1786,
	-1000, -238, 948, 3172, 3447, -1000, -1000, 161, 12822, -1000,
	1871, 4072, 1054, -1000, 1059, -1000, 4792, 3141, 3554, 1426,
	1567, 1679, -1000, -1000, -1000, 1882, 543, 2993, 346, 330,
	4623, -1000, -1000, 1630, 7001, 61, -1000, -1000, -1000, 1017,
	893, 424, -1000, 1858, -1000, -1000, 4695, 1867, -1000, -1000,
	-1000, -1000, -1000, 4792, -1000, 1626, 1289, 4792, -1000, -1000,
	3833, 3833, -1000, -38, -1000, 1409, 1394, 1392, -1000, 515,
	1364, 1362, 398, -1000, 3522, 346, -1000, 3842, 515, 515,
	594, 3833, 1786, 1980, 1980, -1000, -1000, -1000, -1000, -1000,
	3731, 1697, -1000, 535, 532, 1036, -1000, 1036, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 273, 1841, 948, 948, -1000,
	-1000, 1611, -1000, 1958, 1289, -1000, 3247, 3247, 3247, 3247,
	3247, 2559, -1000, -1000, 1786, 3833, -1000, -1000, -1000, 3833,
	-1000, 14714, 12801, -1000, -1000, -1000, -1000, 2705, 4785, 717,
	2690, 441, 3554, -1000, 441, 1582, 945, -1000, -1000, 839,
	945, 945, 945, 945, 945, -1000, 1831, 1829, -1000, 1817,
	1813, 1821, 3554, 1340, 543, 913, 1665, -1000, 3825, -1000,
	-1000, -1000, 1882, 1912, -1000, 7787, 1630, 61, 1629, -1000,
	34, 62, 13228, 10931, 971, -1000, -1000, -1000, -1000, -1000,
	10931, 2552, -1000, 3269, 1786, 1786, -1000, 1980, 1980, -1000,
	-1000, 3833, 3833, -42, 1314, 1289, -1000, -1000, -1000, 3554,
	1786, 515, -1000, -1000, 10931, -1000, 2013, -1000, 2007, -1000,
	-1000, -1000, 886, -1000, 1980, 945, 14714, -1000, -1000, -1000,
	-1000, -1000, -1000, 1289, 271, -139, -1000, -1000, 1786, 948,
	-1000, -1000, 3981, -1000, -1000, 14714, -1000, 14714, 4792, -1000,
	1408, 1665, -1000, 1980, 945, 1498, 1576, -1000, 1016, 1679,
	1696, 1788, 1386, -1000, -1000, -1000, -1000, 1828, -1000, 1825,
	-1000, -1000, -1000, -1000, -134, 799, 798, 796, 346, -1000,
	1678, -1000, 1629, 61, 32, -1000, -1000, -1000, -1000, 948,
	998, -1000, 1628, -1000, 4621, -1000, -1000, -1000, -1000, 1786,
	1786, -1000, -1000, -1000, 1693, -1000, -1000, 1312, 911, 911,
	10931, 1978, 1627, 1346, -1000, 948, -1000, 1840, -61, -166,
	-1000, 699, 4072, 13159, 13037, 1731, 839, 1665, -1000, 11324,
	346, 1973, 1498, -1000, 1980, 839, 14714, -1000, -1000, 14714,
	1686, -1000, 14714, -1000, -1000, -1000, -1000, 1672, 1665, 1665,
	1665, 1303, -1000, -1000, -1000, -1000, 27, 35, -1000, 14714,
	-1000, -1000, -1000, 10931, -1000, 515, 515, -1000, 1975, 1947,
	-1000, 1289, 14714, -1000, 1839, -1000, -1000, 2282, 1054, -1000,
	-1000, 1865, 1444, 1623, -1000, -1000, 13732, 1289, 1310, -1000,
	-1000, 878, -1000, -1000, 1303, 1943, -1000, 1973, -1000, 948,
	948, 374, 948, -174, 374, 374, 374, 3409, 346, -1000,
	-1000, -1000, 948, 1300, -1000, -1000, -1000, 14714, 14714, -1000,
	-1000, -111, 4042, 454, -1000, 1665, -1000, -1000, 1625, 12110,
	346, -1000, -1000, 1943, 1297, 1292, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1288, 1288, 1288, 913, -1000,
	-1000, 948, 1626, -146, 677, 2010, -1000, 1665, -1000, 1678,
	-1000, -1000, -1000, -1000, -1000, -174, -1000, -1000, -1000, -134,
	-176, -1000, 839, 1623, 1289, -1000, -1000, -1000, 1612, -1000,
}

var yyPgo = [...]int16{
	0, 2263, 39, 20, 2262, 2261, 2260, 2258, 2257, 2256,
	2255, 2254, 2253, 2252, 2251, 35, 36, 41, 27, 29,
	2250, 2248, 2247, 2246, 2245, 2244, 74, 2243, 2226, 2222,
	2219, 84, 2218, 2217, 2216, 2215, 64, 78, 99, 125,
	2518, 30, 43, 45, 53, 2214, 37, 2213, 2211, 59,
	2208, 40, 2207, 2203, 82, 2200, 2195, 3, 188, 100,
	2189, 63, 2188, 2186, 92, 3513, 2334, 2293, 1986, 1878,
	2185, 95, 15, 50, 2, 13, 11, 2183, 142, 1,
	2181, 89, 69, 2180, 2175, 2172, 118, 2170, 65, 94,
	7, 47, 2168, 12, 8, 67, 49, 25, 17, 5,
	44, 31, 2164, 21, 34, 28, 2161, 62, 2159, 116,
	70, 88, 52, 2756, 0, 60, 81, 2158, 113, 2156,
	1586, 97, 38, 14, 46, 72, 2155, 79, 85, 55,
	87, 86, 2154, 76, 2153, 2151, 2149, 2148, 2143, 185,
	488, 2141, 128, 83, 2140, 2139, 2137, 117, 114, 93,
	105, 103, 1711, 2134, 2132, 2130, 2127, 2126, 66, 61,
	101, 2125, 33, 91, 26, 195, 2123, 2122, 2119, 2118,
	2109, 2108, 2107, 96, 2106, 71, 1681, 250, 714, 51,
	2105, 2104, 2100, 2099, 2095, 2094, 2089, 73, 2086, 2084,
	98, 68, 110, 2083, 2079, 77, 75, 2078, 115, 108,
	2076, 107, 32, 48, 184, 54, 2073, 2070, 2069, 6,
	4, 2068, 18, 111, 2062, 90, 2059, 80, 2051, 19,
	2048, 2046, 42, 2045, 458, 2024, 104, 2044, 2043, 2042,
	102, 736, 1520, 2041, 158, 112, 2038, 109,
}

var yyR1 = [...]uint8{
	0, 227, 228, 228, 1, 1, 1, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 22, 22, 230, 230,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 29,
	29, 7, 8, 8, 8, 233, 233, 49, 49, 96,
	96, 9, 9, 9, 9, 10, 10, 206, 206, 205,
	207, 207, 11, 11, 11, 11, 11, 200, 200, 200,
	200, 200, 12, 12, 203, 203, 203, 15, 15, 15,
	15, 16, 16, 17, 17, 17, 19, 19, 101, 101,
	105, 105, 105, 106, 106, 106, 106, 216, 216, 126,
	126, 229, 229, 234, 234, 234, 234, 234, 234, 234,
	198, 198, 198, 198, 199, 199, 199, 199, 201, 201,
	202, 202, 202, 202, 202, 202, 204, 204, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 13,
	13, 30, 30, 73, 73, 14, 111, 111, 182, 182,
	182, 183, 183, 183, 183, 183, 183, 184, 184, 185,
	185, 118, 118, 186, 186, 25, 167, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 151, 151, 151, 129,
	129, 129, 129, 129, 129, 129, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 192, 193, 194, 188, 188, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	141, 141, 141, 141, 141, 141, 141, 187, 187, 133,
	133, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 137, 137,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 130,
	130, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 138, 138, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 150, 150, 139, 139, 148, 148,
	149, 149, 149, 140, 140, 140, 147, 147, 147, 144,
	144, 145, 145, 146, 146, 146, 142, 142, 142, 143,
	143, 143, 153, 178, 178, 178, 180, 180, 181, 181,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 166, 166, 195, 195, 196, 196,
	197, 197, 177, 177, 177, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 165, 165, 175,
	175, 175, 175, 175, 176, 176, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 174, 160, 160, 160,
	160, 160, 161, 161, 162, 162, 162, 162, 154, 154,
	155, 155, 156, 156, 157, 157, 157, 157, 157, 157,
	159, 159, 158, 158, 158, 158, 158, 158, 190, 190,
	190, 220, 220, 220, 220, 220, 220, 221, 221, 191,
	191, 163, 163, 164, 164, 171, 171, 171, 171, 235,
	235, 169, 169, 169, 170, 170, 170, 236, 26, 27,
	27, 28, 28, 28, 33, 33, 33, 31, 31, 32,
	32, 38, 38, 37, 37, 39, 39, 39, 39, 117,
	117, 117, 116, 116, 217, 217, 217, 217, 217, 41,
	41, 42, 42, 43, 43, 44, 44, 44, 209, 209,
	208, 208, 210, 210, 210, 210, 210, 210, 210, 210,
	56, 56, 93, 93, 93, 97, 97, 45, 45, 45,
	45, 46, 46, 47, 47, 48, 48, 124, 124, 123,
	123, 123, 122, 122, 50, 50, 50, 52, 51, 51,
	51, 51, 53, 53, 55, 55, 54, 54, 57, 57,
	57, 57, 58, 58, 95, 95, 40, 40, 40, 40,
	40, 40, 40, 40, 108, 108, 60, 60, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 70, 70, 70, 70, 70, 70, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 36,
	36, 71, 71, 71, 78, 72, 72, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 68, 68,
	68, 68, 68, 68, 68, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	237, 237, 69, 69, 69, 69, 34, 34, 34, 34,
	34, 125, 125, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 82, 82, 35, 35, 80, 80,
	81, 110, 110, 83, 83, 79, 79, 79, 79, 211,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	61, 61, 84, 84, 85, 85, 218, 218, 219, 86,
	86, 87, 87, 88, 89, 89, 89, 90, 90, 90,
	90, 91, 91, 91, 63, 63, 63, 63, 63, 63,
	92, 92, 94, 94, 94, 94, 98, 98, 74, 74,
	76, 76, 75, 77, 99, 99, 103, 100, 100, 104,
	104, 104, 104, 104, 23, 24, 102, 102, 102, 119,
	119, 119, 109, 109, 107, 107, 114, 114, 115, 115,
	115, 115, 115, 120, 120, 120, 121, 121, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 213, 213, 214,
	214, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	223, 223, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 225, 225, 226, 226, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 231, 232,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 2, 13, 12,
	14, 12, 13, 12, 10, 7, 10, 7, 11, 11,
	9, 13, 14, 5, 8, 4, 8, 4, 7, 10,
	7, 8, 6, 9, 8, 9, 9, 8, 10, 10,
	11, 7, 6, 10, 9, 10, 10, 9, 11, 11,
	13, 13, 5, 12, 11, 9, 6, 13, 12, 14,
	14, 6, 7, 6, 6, 10, 12, 10, 11, 12,
	13, 12, 13, 7, 7, 11, 13, 6, 6, 8,
	6, 9, 6, 6, 8, 8, 10, 10, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 1, 3, 3,
	0, 1, 2, 2, 2, 3, 5, 0, 2, 2,
	2, 2, 3, 5, 1, 2, 3, 7, 10, 1,
	1, 5, 5, 3, 5, 3, 1, 3, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 0, 3, 0, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 4, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	4, 1, 1, 0, 1, 2, 0, 3, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 10, 9, 10, 4, 7,
	13, 13, 6, 6, 8, 8, 5, 8, 7, 4,
	0, 2, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 4, 2, 3, 1, 3, 0, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 2, 1, 1, 1, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 5, 2, 2,
	3, 4, 2, 2, 2, 2, 1, 3, 6, 6,
	9, 9, 13, 11, 1, 1, 2, 2, 10, 8,
	10, 8, 7, 5, 6, 7, 8, 9, 8, 9,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 1, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 3, 6, 4, 7, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 8, 1, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 2, 1, 2, 0, 3, 1, 1, 3, 4,
	6, 4, 6, 4, 6, 3, 4, 4, 5, 5,
	3, 4, 3, 3, 3, 3, 5, 6, 2, 4,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6, 2, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 2, 1, 3, 4, 5,
	5, 5, 5, 6, 4, 4, 4, 6, 6, 8,
	6, 4, 6, 6, 8, 6, 8, 6, 8, 6,
	8, 9, 7, 5, 4, 4, 3, 3, 3, 1,
	3, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	4, 4, 1, 3, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 0, 2, 1, 1, 3, 5, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 0, 3, 0, 2, 1, 3, 1, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 1, 3, 1, 1, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	2, 2, 2, 3, 3, 4, 4, 4, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -227, -1, -20, -21, -22, -25, 126, 132, 133,
	127, 71, -228, 401, -167, 58, -220, -221, 285, -186,
	139, 152, 174, 175, 177, 371, 136, 137, 383, 384,
	156, 386, 79, -225, -224, 6, 8, 9, 10, 165,
	147, 174, 21, -114, 61, 311, -225, 137, -107, 138,
	175, 142, 56, -168, -151, -115, 63, 36, -114, 307,
	151, -112, -113, 131, 202, 374, 80, 25, 27, 293,
	299, 201, 84, 120, 16, 85, 208, 383, 384, 119,
	76, 351, 126, 52, 343, 344, 341, 206, 354, 355,
	342, 300, 213, 20, 31, 10, 28, 159, 24, 113,
	128, 203, 89, 88, 162, 166, 167, 26, 160, 75,
	209, 211, 19, 55, 150, 11, 373, 13, 14, 388,
	375, 143, 142, 100, 387, 138, 50, 8, 122, 29,
	97, 46, 157, 212, 48, 98, 17, 345, 346, 34,
	361, 168, 115, 53, 40, 389, 81, 390, 73, 56,
	314, 207, 79, 15, 51, 169, 391, 210, 395, 99,
	129, 350, 176, 49, 204, 392, 136, 205, 6, 357,
	33, 158, 47, 137, 301, 393, 87, 141, 74, 5,
	156, 9, 394, 54, 57, 347, 348, 349, 38, 86,
	12, 153, 365, 77, 178, 396, 397, 152, 175, 179,
	180, 298, 269, 138, 138, 138, 140, 222, 140, -114,
	-114, -79, -109, 61, -113, -120, 143, 63, -54, -120,
	61, -113, -109, 137, -109, -109, 386, 383, 384, 350,
	56, 59, 135, 56, -54, 314, 137, -54, -54, 137,
	145, 60, 59, -152, -129, -133, -130, -135, -134, -136,
	-114, -131, -132, 258, 363, 255, 259, 256, 261, 262,
	263, 120, 260, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 264, 276, 33, 161, 248, 249,
	250, 253, 252, 254, 251, 122, 277, 278, 279, 280,
	281, 282, 283, 284, 285, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 240, 241, 243, 244, 245,
	247, 246, -152, -152, -114, 56, 221, -114, -114, -109,
	223, -109, 56, -198, 19, 201, 202, 214, 56, -114,
	123, 81, 25, 123, -115, -109, -114, -54, 137, -224,
	137, 131, 127, 128, 129, -54, -54, 314, 129, 131,
	-54, -120, -171, -235, 366, 37, -151, -153, -160, -154,
	-155, -156, -157, -172, -161, 146, 144, 156, 399, 148,
	149, 285, -165, 150, 138, 157, 73, 81, -192, 146,
	-193, 56, 293, 299, 144, 157, 156, 399, 71, 147,
	25, 373, 375, 31, 32, -146, 402, 287, -144, 296,
	123, -139, 58, -139, -138, 257, -140, 58, -139, -140,
	-139, -140, -142, 259, -142, -142, -142, -142, 58, 58,
	-139, -139, -139, -139, -139, 58, -148, 58, -137, 242,
	-148, -149, 58, -149, 56, 57, -54, -114, 56, 56,
	-54, -216, 396, 397, -54, -54, -201, -199, 8, 9,
	10, 215, -54, -198, -115, -121, -112, -113, -120, 26,
	-129, 276, -121, -112, -54, -49, -54, -49, 145, -118,
	146, -160, 144, 156, 150, 145, 145, 146, 141, 145,
	131, 131, 127, 128, -54, 141, 41, 97, 123, -169,
	59, -115, 71, 36, 58, -191, 56, 81, -163, -114,
	157, -165, 61, 138, -190, 157, 383, 384, -231, 58,
	-165, 138, -165, 61, 138, 157, 61, 157, 73, 19,
	-114, 9, 157, 157, -191, 63, -54, 58, -188, 374,
	16, 58, -65, -64, -60, 161, -79, -211, -77, -213,
	-78, 120, 121, 109, 110, 117, 82, 122, -68, -66,
	-67, -69, 286, 188, -231, 63, 64, -114, 62, 72,
	65, 66, 67, 68, 73, 74, 75, -120, 319, -75,
	287, 360, 359, 48, 49, 351, 352, 353, 354, 355,
	361, 356, 85, 38, 40, 264, 288, 289, 341, 349,
	348, 347, 345, 346, 343, 344, 398, 143, 342, 115,
	350, -194, 65, 403, -145, 297, -114, 65, -142, -139,
	-142, 65, 61, -142, -142, -143, 120, 119, 33, -143,
	-143, -143, -143, -150, 63, -150, -147, 365, 366, -147,
	65, 65, -148, 65, -54, -114, 58, 56, -54, -54,
	25, 140, 25, -182, 25, 56, 59, 215, -198, -201,
	123, 58, 57, 141, 59, 11, -151, -230, 138, 157,
	-114, 157, -114, -114, -114, -114, -114, 146, -160, -118,
	145, -151, 146, -160, 156, 145, 145, 146, 131, -114,
	63, 143, 63, 73, -114, -121, 90, -115, -235, -176,
	-173, -114, 157, -113, 58, -68, -66, -67, -69, -120,
	-212, 217, 81, 218, 10, 9, 19, 150, 144, 156,
	399, 154, -190, 61, 58, -40, -59, 81, -65, 31,
	26, 9, 76, -231, 61, 61, 61, 61, -190, 156,
	-163, -114, 385, -192, 399, -141, 341, 344, 343, 289,
	-231, 58, -212, -40, 25, 31, -61, 65, 110, 106,
	105, 116, 109, 110, 111, 112, 113, 114, 115, 107,
	108, 398, 119, 63, 124, 125, -65, -65, -65, -65,
	-65, -65, -65, -213, -2, -65, -72, -3, -4, -231,
	-40, 6, -231, 63, 123, 123, 402, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -82, -40,
	-231, 41, -231, -231, -231, -231, -237, -231, -237, -237,
	-237, -237, -237, -237, -128, 120, 259, 161, 250, -131,
	-130, 265, 264, 122, 290, 274, 275, 249, -114, -231,
	-231, -231, -231, 60, -143, -142, -143, 60, 60, -143,
	-143, 61, 61, 120, 60, 59, 60, 248, 248, 60,
	59, 60, 59, 58, 57, 56, -175, -176, -68, -66,
	-67, -69, -54, 58, 58, -2, -231, -109, -2, -183,
	19, 185, 186, -54, -199, -93, -114, 157, -201, 56,
	-115, -150, -114, -226, -114, -54, -226, -114, 156, 144,
	399, 154, 58, 33, 128, 175, 141, -114, -230, -151,
	-114, -114, -114, -114, 146, -160, 81, 97, 123, -170,
	-115, 63, 65, 60, 59, -139, 58, -174, 291, -139,
	-139, -40, -89, 27, 28, -89, -89, -89, 123, 218,
	217, 220, 219, -162, 181, 182, 33, 183, -162, 385,
	157, 157, -190, -231, -231, 57, 58, -176, -232, 80,
	79, 97, 216, 60, -40, -62, 100, 81, 98, 82,
	99, 101, 102, 103, 104, 84, 90, 91, 92, 93,
	94, 95, 96, -108, -231, -78, -231, -231, -231, -59,
	-190, 58, -191, -139, 58, -139, 58, 58, -40, -93,
	60, 58, 375, 59, 65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -133, 249, -128,
	-131, -125, 61, 63, -64, 63, -114, -64, -114, -232,
	-232, 59, -232, -86, 15, -28, 5, -2, -26, -236,
	-38, 24, -37, -72, -39, -40, 111, -120, -115, -115,
	-214, 403, -215, 63, 65, 66, 67, 68, 73, 74,
	75, -65, -37, -40, -37, -37, -37, -40, -127, 120,
	255, 161, 250, 244, 274, 275, 295, 248, 296, 237,
	229, 234, 247, 245, 231, 246, 230, 243, 240, 253,
	252, 254, 265, 256, 261, 263, 262, 260, -40, -37,
	-39, -39, -37, -31, 24, -80, -81, 86, -79, -114,
	19, -232, -232, -232, -232, 65, -232, 257, 402, 402,
	365, 366, 123, -37, -38, -37, -37, -37, -143, -142,
	63, -142, 298, 298, 65, 65, -175, -114, -54, 60,
	58, -93, -176, -2, -54, 141, 21, 6, 8, 9,
	10, 19, -111, 59, 25, -54, 60, -229, 58, 365,
	59, 182, 58, 58, 383, 384, 157, 58, 58, 57,
	-176, 31, 81, 178, 31, 81, -129, -114, 144, -114,
	156, 399, 33, 128, 175, -114, 26, 63, 73, -114,
	-178, -180, 365, -179, 57, 151, 71, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 61, -173, -89, 65,
	-89, 60, -115, 220, 219, 218, -191, 56, 73, 184,
	-191, 56, -163, -190, 58, -40, -159, -158, -114, -40,
	155, -114, -176, 60, -187, 183, -40, -40, -70, 73,
	81, 74, 75, -65, 21, 22, 23, -71, -75, -78,
	69, -231, 100, 98, 99, 84, -65, 98, -65, -65,
	-65, -65, -65, -65, 61, -79, -232, -232, -164, -115,
	-231, 60, 65, 60, 60, -232, 60, 371, 372, -40,
	58, -61, 365, -40, -90, 17, 16, -5, -3, -231,
	21, 24, -232, -33, 44, 45, -27, -232, -37, 59,
	-232, -232, -117, -116, 25, -114, 63, 123, -231, 403,
	59, 398, -232, -232, -232, -232, 59, 57, 59, -139,
	58, -139, -139, -149, 235, -139, 235, -149, -139, -139,
	-139, -139, -139, -139, 25, -232, 59, 11, 59, 11,
	-232, -37, -83, -81, 89, -40, -232, -120, -232, 403,
	403, 248, 248, -114, -232, -232, -232, -232, -143, -143,
	60, 60, 60, 58, 58, -95, 387, -175, 60, 60,
	-232, 25, -164, 203, -110, 86, -114, -202, -204, 224,
	-18, -15, -6, -8, -7, -10, -9, -11, -12, -13,
	-14, -23, -3, 143, -16, -17, -29, 10, 9, 20,
	33, 207, 208, 213, 209, 153, -30, 176, -24, 8,
	350, 166, 167, -111, 19, -234, -114, 109, 90, 63,
	-151, 59, 132, -114, -176, -176, 58, 58, 58, -40,
	-159, 155, -114, 60, -65, 73, 175, 73, 157, 58,
	58, 383, 384, 58, 31, 81, 178, 31, 81, -129,
	144, 63, 97, -177, 56, -179, 365, 58, 367, 61,
	-166, 90, 63, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 60, -89, 219, 220, -212, 9, -212,
	10, 58, 58, -176, -232, -232, 59, 365, 365, -231,
	-231, 60, -178, 358, 73, 74, 75, -65, -231, -65,
	-231, -65, -231, -71, -65, -65, -65, -36, 162, -65,
	80, -232, -232, 60, 59, -40, 60, -187, 56, -212,
	60, -189, 60, 248, -91, 19, 34, -40, -87, -88,
	-40, -86, -2, -31, 70, -232, -39, -217, 400, -116,
	111, -121, -38, -215, -128, -217, -217, -127, 120, 161,
	-125, -40, -142, 61, -127, -65, -65, -65, -65, 362,
	-86, 88, -40, 87, 298, 298, -95, -175, -176, -58,
	12, 58, 60, -58, -178, -2, -184, 57, 204, 224,
	-40, 401, -204, 224, -202, -86, -40, -26, -26, -26,
	-206, -114, -205, -26, -223, -222, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 340, -114, -114, -114,
	-200, 40, 210, 211, 212, -40, -114, -231, -82, -110,
	203, 60, -234, -234, -234, -234, -114, 120, 269, 33,
	122, -234, -234, 134, 60, 60, -176, -176, -176, 60,
	60, 58, 58, -129, 58, -176, -176, 58, 58, -40,
	-65, 73, 175, 73, 157, 63, 73, -114, -181, -179,
	-114, 65, -195, 56, 77, 65, -195, -195, -195, -195,
	-195, -196, 199, 200, 65, -197, -196, 65, -89, -162,
	-162, -164, -176, 60, -187, -58, -158, 90, -114, 80,
	90, -114, 80, -159, -159, -178, -177, -65, -65, -65,
	-36, 80, -65, -36, -65, 147, -115, -232, 10, 9,
	371, 372, 60, 225, 377, 378, 168, 379, 183, 380,
	381, 298, 9, 100, 59, 18, 59, -89, -90, -232,
	-32, 47, -231, 123, -232, -232, -232, -232, 59, -232,
	-232, 59, -232, 19, -232, 59, -232, 19, -231, -35,
	357, -40, -58, 60, 60, -178, -40, -93, -95, -178,
	-185, 365, -40, -202, -203, -204, -204, -202, 401, 88,
	-90, 87, -19, -15, -16, -18, 224, -107, 11, -49,
	-42, -43, -44, -45, -56, -78, -231, -54, 59, -207,
	-124, 205, 25, -100, -126, 226, -104, 309, 308, -115,
	319, -102, 307, 259, 306, -195, 59, -114, 11, 11,
	11, 11, -204, 224, -73, -72, -73, 224, 204, -212,
	60, 60, 60, 183, -58, -159, -159, -176, 60, 60,
	-176, -176, 60, -129, 58, -231, 60, 59, -191, -191,
	60, 60, -178, -232, -232, -177, -212, -232, -232, -232,
	-65, -54, -187, -162, -162, 365, -61, 16, -61, -61,
	-61, 65, 378, 168, 380, 16, 42, -40, -40, -88,
	-91, -37, -232, 169, -86, 111, -65, -65, -65, -65,
	-65, -65, -232, 63, -178, -58, -178, -177, 60, -58,
	-177, 399, 401, -204, 88, 88, -91, -202, 89, 89,
	-203, -55, 29, -54, -54, -49, -233, 11, 57, 33,
	59, -50, -52, -51, -53, 46, 50, 52, 47, 48,
	49, 53, -124, -42, -231, -123, 169, -122, 25, -120,
	63, -205, -114, 206, -129, 59, -100, 226, -101, -105,
	310, 312, 90, 123, -119, -114, 63, 31, 33, -222,
	29, -203, -232, -203, -178, -178, 358, 60, 60, 60,
	-212, 60, 60, 183, -176, -114, -179, -212, -212, 147,
	-178, -177, -58, -58, 58, -212, 56, -212, 56, -61,
	-61, 382, -120, 43, -41, 11, 16, -232, -232, -232,
	-232, -232, -232, -34, 100, 365, -177, -178, -178, -40,
	88, -204, 401, -16, -19, 143, -17, 143, 401, 88,
	-96, 169, -54, -96, 57, -42, -99, -103, -79, -43,
	-44, -44, -43, -44, 46, 46, 46, 51, 46, 51,
	46, -51, -120, -232, -57, 54, 142, 55, -231, -122,
	19, -104, -101, 59, 311, 313, 314, 56, 77, -40,
	-115, -143, -164, 88, 401, -177, -177, -58, -58, -178,
	-178, 358, 60, -232, -54, -177, -212, -164, 9, 10,
	123, -58, -42, -218, -219, -40, -232, 363, 53, 368,
	-177, 88, 89, -40, -40, -63, 33, 38, -2, -231,
	-231, -58, -42, -58, -41, 59, 90, -47, -46, 56,
	57, -48, 56, -46, 46, 46, -209, 365, 138, 138,
	138, -97, -114, -2, -105, -106, 315, 312, 318, 90,
	88, -177, -177, 58, 60, -162, -162, -115, -84, 13,
	-232, -86, 59, 43, 364, 369, 143, -202, -19, -19,
	-98, 56, -99, -74, -76, -75, -231, -2, -92, -94,
	6, -114, -112, -113, -97, -86, -58, -58, -103, -40,
	-40, 58, -40, 58, -231, -231, -231, -232, 59, 312,
	316, 317, -40, -164, -212, -212, -85, 14, 16, -232,
	-219, 43, 401, 30, -98, 59, -232, -232, -232, 59,
	123, -232, -90, -86, -93, -208, -210, 388, 389, 390,
	391, 392, 393, 394, 395, -93, -93, -93, -123, -114,
	60, -40, -72, 365, 88, 157, -76, 38, -2, -231,
	-94, -114, -90, 60, 60, 59, -232, -232, -232, -57,
	368, 143, 9, -74, -2, -210, -209, 369, -99, -232,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 0, -2, 0, 0,
	0, 0, 1, 3, 7, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 0, 922, 922, 502, 503,
	504, 507, 0, 0, 993, 983, 984, 985, 986, 987,
	988, 989, 990, 992, 926, 927, 0, 0, 0, 0,
	0, 925, 0, 0, 228, 280, 280, 280, 928, 929,
	930, 931, 932, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 0, 0, 0, 922, 0, 922, 0,
	845, 0, 0, -2, -2, 0, 0, 935, 0, 616,
	933, 934, 0, 922, 0, 0, 508, 505, 506, 224,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 515, 0, 236, 393, 389, 240, 241, 242, 243,
	244, 376, 310, 339, 340, 376, 363, 383, 376, 383,
	346, 376, 383, 396, 396, 396, 396, 396, 354, 355,
	356, 357, 358, 359, 360, 0, 0, 330, 376, 376,
	376, 376, 376, 336, 337, 338, 365, 366, 367, 368,
	369, 370, 371, 372, 0, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 378, 328, 378, 380, 380,
	326, 327, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 171, 172, 0, 0, 0,
	0, 0, 0, 0, 25, 0, 27, 225, 0, 994,
	0, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 517, 0, 520, 229, 230, 231, 232,
	233, 234, 235, 0, 509, 511, 0, -2, 0, 0,
	0, 0, 0, 1048, -2, -2, 247, 0, 249, 0,
	251, 0, 253, 254, 0, 256, 258, 509, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 395, 391, 390,
	0, 309, 0, 396, 376, 364, 396, 0, 396, 396,
	347, 348, 399, 0, 399, 399, 399, 399, 0, 0,
	386, 386, 333, 334, 335, 0, 321, 0, 378, 329,
	323, 324, 0, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 158, 0, 208, 0, 178, 174, 175,
	176, 173, 0, 0, 847, 0, -2, -2, 936, 923,
	23, 0, 617, 937, 0, 0, 107, 0, 0, 0,
	511, 52, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 523, 519, 0, 938, 0, 0, 0, 512,
	435, 0, 443, -2, 0, 448, 499, 500, 0, 1137,
	0, 447, 0, 438, 440, 0, 498, 511, 248, 0,
	0, 0, 255, 257, 0, 261, 262, 0, 0, 284,
	0, 0, 281, 687, 688, 0, 690, 691, 692, 693,
	694, 0, 0, 0, 0, 0, 0, 0, 721, 722,
	723, 724, 0, 726, 0, -2, 851, 845, 853, 854,
	855, 856, 857, 858, 859, 636, 637, 0, 0, 903,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 759, 770,
	770, 770, 770, 770, 770, 770, 0, 0, 0, 0,
	0, 282, 283, 394, 239, 392, 245, 0, 399, 396,
	399, 0, 0, 399, 399, 349, 400, 0, 0, 350,
	351, 352, 353, 0, 374, 0, 331, 0, 0, 332,
	0, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0, 88, 89,
	512, 0, 0, 63, 64, 78, 0, 511, 56, 0,
	0, 42, 511, 61, -2, 0, 0, 0, 0, 77,
	80, 0, 82, 83, 0, 0, 0, 522, 518, 0,
	454, 376, 376, -2, 0, 874, 874, 874, 874, 0,
	467, 939, 0, 0, 0, 0, 0, 0, 0, 498,
	0, 0, 0, 442, 0, 0, 626, 0, 632, 634,
	0, 0, 0, 0, 436, 437, 439, 441, 445, 498,
	0, 512, 279, 250, 509, 252, 376, 376, 305, 0,
	0, 0, 268, 0, 0, 285, 0, 860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 712, 713, 714, 715,
	716, 717, 718, 725, 93, 632, 0, 869, 0, 0,
	685, 527, 541, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 0, 835,
	0, 0, 0, 0, 0, 0, 762, 0, 763, 764,
	765, 766, 767, 768, 769, 815, 0, 817, 818, 819,
	820, 821, 822, 825, 826, 827, 828, 829, 832, 0,
	541, 0, 0, 377, 341, 399, 343, 384, 385, 344,
	345, 401, 397, 398, 396, 0, 396, 0, 0, 373,
	0, 381, 0, 0, 0, 0, 0, 449, -2, -2,
	-2, -2, 0, 0, 0, -2, 0, 0, -2, 0,
	0, 209, 210, 206, 179, 177, 582, 583, 0, 0,
	848, 0, 161, 28, 995, 108, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 0, 41,
	512, 0, 73, 74, 511, 62, 0, 0, 0, 516,
	524, 525, 526, 403, 0, 874, 1137, 459, 466, 458,
	874, 0, 462, 875, 876, 463, 464, 465, 0, 0,
	940, 941, 942, 509, 474, 475, 0, 0, 509, 510,
	511, 498, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 0, 631, 1138, 629, 0, 0, 0, 0, 0,
	0, 675, 676, 677, 678, 0, 668, 669, 670, 671,
	672, 673, 674, 633, 0, 658, 0, 0, 0, 626,
	446, 0, 0, 300, 0, 303, 0, 0, 0, 0,
	0, 0, 276, 0, 861, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 709, 829, 720,
	-2, 710, 781, 782, 707, 850, 0, 708, 719, 684,
	727, 0, 902, 877, 0, 0, 531, 93, 534, 529,
	0, 0, 0, 0, 543, 549, 545, 0, 847, 849,
	0, 948, 949, -2, -2, -2, -2, -2, -2, -2,
	-2, 0, 0, 549, 0, 0, 0, 0, 0, 376,
	376, 786, 376, 380, 789, 790, 791, 376, 794, 796,
	797, 798, 799, 380, 801, 802, 803, 804, 805, 376,
	376, 808, 809, 376, 376, 812, 376, 376, 0, 0,
	0, 0, 0, 0, 538, 843, 838, 0, 0, 845,
	0, 756, 757, 758, 760, 0, 771, 816, 0, 0,
	0, 0, 0, 0, 0, 542, 0, 0, 342, 399,
	375, 399, 387, 388, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 93, 0, 0, 212, 213, 214, 215,
	216, 0, 841, 0, 0, 206, -2, 26, 163, 0,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 37, 79, 0, 0,
	0, 0, 0, 0, 0, 512, 0, 84, 85, 0,
	432, 404, 0, 406, 0, 424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 455, 456, 0,
	460, 874, 0, 943, 944, 0, 938, 0, 476, 477,
	938, 0, 0, 0, 0, 0, 0, 490, 845, 0,
	0, 0, 0, 403, 483, 0, 627, 628, 630, 662,
	0, 664, 666, 638, 0, 0, 0, 645, 681, 682,
	683, 0, 0, 0, 0, 0, 679, 0, 650, 652,
	653, 654, 655, 0, 0, 0, 660, 661, 0, 513,
	0, 301, 0, 304, 306, 307, 263, 272, 273, 0,
	286, 0, 0, 686, 881, 0, 0, 869, 95, 0,
	532, 533, -2, 537, 535, 536, 528, 728, 0, 0,
	554, 734, 546, 550, 0, 552, 553, 0, 541, 947,
	0, 0, 554, 554, 735, 736, 0, 0, 0, 783,
	1137, 396, 787, 788, 792, 793, 795, 800, 806, 807,
	810, 811, 813, 814, 0, 741, 0, 0, 0, 0,
	0, 869, 0, 839, 0, 0, 754, 755, 761, 823,
	824, 0, 0, 833, 772, 773, 774, 775, 361, 362,
	379, 382, 624, 0, 0, 622, 0, 0, 622, 403,
	94, 0, 217, 0, 0, 0, 584, 20, 180, 0,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 869, 0, 139, 140, 527, 527, 527, 0,
	527, 0, 0, 0, 127, 0, 0, 834, 914, 99,
	100, 201, 202, 841, 0, 0, -2, 163, 163, -2,
	163, 163, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 33, 35, 0, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 47,
	0, 81, 0, 402, 0, 407, 0, 0, 0, 410,
	0, 425, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 377, 461, 945, 946, 468, 0, 469,
	0, 0, 0, 0, 307, 484, 0, 0, 0, 0,
	0, 403, 432, 308, 663, 665, 667, 639, 0, 641,
	0, 643, 0, 646, 679, 651, 0, 647, 0, 679,
	0, 635, 659, 0, 0, 0, 302, 259, 0, 269,
	0, 0, 278, 0, 90, 0, 0, 878, 870, 871,
	874, 877, 93, 539, 530, 729, 544, 730, 0, 551,
	547, 0, 0, 950, -2, 731, 732, 0, 376, 786,
	0, 0, 784, 785, 0, 0, 0, 0, 0, 0,
	836, 753, 844, 0, 830, 831, 622, 0, 0, 403,
	0, 0, 624, 403, 14, -2, 219, 0, 207, 0,
	842, 0, 183, 0, 0, 877, 0, 924, 0, 0,
	115, -2, 117, 0, 0, 960, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 122, 123, 124,
	0, 0, 0, 0, 0, 0, 203, 203, 205, 0,
	0, 162, 164, 165, 166, 167, -2, -2, -2, 1104,
	-2, 168, 169, 29, 39, 938, 0, 0, 0, 65,
	67, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	43, 45, 0, 46, 0, 86, 87, 433, 0, 408,
	413, 411, 414, 426, 427, 415, 416, 417, 418, 419,
	420, 421, 428, 429, 422, 423, 430, 431, 457, 509,
	509, 0, 0, 403, 482, 485, 491, 492, 493, 494,
	495, 496, 497, 0, 0, 432, 938, 632, 632, 632,
	648, 0, 680, 649, 656, 0, 514, 307, 0, 0,
	274, 275, 277, 0, 0, 0, 0, 0, 0, 297,
	0, -2, 882, 0, 0, 0, 0, 873, 881, 96,
	0, 540, 0, 0, 733, 737, 742, 738, 0, 740,
	743, 0, 745, 0, 747, 0, 749, 0, 0, 0,
	0, 840, 403, 622, 403, 432, 623, 0, 622, 432,
	18, 0, 218, 19, 0, 134, 181, 0, 0, 184,
	881, 0, 145, 143, 139, 146, 0, 0, 0, 0,
	0, 561, 563, 564, 565, 597, 0, 599, 0, 0,
	0, 121, 598, 111, 0, 0, 907, 159, 160, 0,
	0, 0, -2, 0, 918, 915, 0, 125, 128, 129,
	130, 131, 132, 0, 199, 204, 0, 0, 207, 49,
	403, 403, 54, 0, 68, 0, 0, 0, 40, 938,
	0, 0, 75, 48, 0, 0, 405, 0, 938, 938,
	0, 403, 432, 486, 488, 479, 481, -2, -2, -2,
	657, 0, 260, 264, 266, 0, 288, 0, 290, 291,
	292, 293, 294, 295, 296, 0, 0, 879, 880, 872,
	91, 559, 555, 0, 0, 548, 0, 0, 0, 0,
	0, 776, 752, 837, 432, 403, 11, 9, 625, 403,
	13, 0, 0, 135, 185, 182, 198, 0, 0, 0,
	0, 109, 0, 615, -2, 0, 0, 105, 106, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 607, 0,
	0, 0, 0, 0, 0, 618, 0, 600, 0, 602,
	603, 118, 597, 0, 119, 0, 112, 0, 114, 148,
	0, 0, 0, 0, 399, 919, 920, 921, 917, 961,
	0, 0, 200, 0, 432, 432, 66, 69, 71, 53,
	58, 403, 403, 0, 0, 0, 409, 470, 471, 0,
	432, 938, 487, 489, 0, 265, 0, 267, 0, 287,
	289, 298, 0, 883, 622, 0, 0, 557, 739, 744,
	746, 748, 750, 0, 0, 0, 8, 12, 432, 220,
	21, 136, 0, 141, 142, 0, 144, 0, 0, 147,
	0, 0, 614, 622, 0, 622, 559, 904, 0, 562,
	593, 595, 0, 590, 605, 606, 608, 0, 610, 0,
	612, 613, 566, 567, 568, 0, 0, 0, 0, 601,
	0, 908, 113, 0, 0, 151, 152, 909, 910, 911,
	0, 913, 126, 133, 0, 50, 51, 70, 72, 432,
	432, 76, 57, 434, 0, 478, 480, 0, 0, 0,
	0, 862, 560, 0, 866, 868, 751, 0, 0, 0,
	10, 0, 0, 0, 0, 896, 0, 0, -2, 0,
	0, 869, 622, 104, 622, 0, 0, 587, 594, 0,
	0, 588, 0, 589, 609, 611, 580, 0, 0, 0,
	0, 0, 585, -2, 149, 150, 0, 0, 156, 0,
	22, 59, 60, 0, 473, 938, 938, 299, 864, 0,
	556, 0, 0, 777, 0, 780, 137, 0, 0, 145,
	97, 0, 896, 884, 898, 900, 0, 93, 0, 890,
	-2, 892, 894, 895, 0, 877, 103, 869, 905, 906,
	591, 0, 596, 0, 0, 0, 0, 599, 0, 153,
	154, 155, 912, 0, 270, 271, 92, 0, 0, 558,
	867, 778, 0, 0, 98, 0, 901, -2, 0, 0,
	0, 110, 102, 877, 0, 0, 570, 572, 573, 574,
	575, 576, 577, 578, 579, 0, 0, 0, 618, 586,
	472, 865, 863, 0, 0, 0, 899, 0, -2, 0,
	891, 893, 101, 592, 569, 0, 619, 620, 621, 568,
	0, 138, 0, 887, 93, 571, 581, 779, 897, -2,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 401,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 402, 3, 403, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:430
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:435
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:436
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:442
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:448
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 8:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:473
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:493
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:514
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:530
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:582
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:593
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:605
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:632
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:646
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:673
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[4].colIdent},
					TableName: yyDollar[8].tableName,
					Time:      yyDollar[5].str,
					Event:     yyDollar[6].strs,
					Body:      yyDollar[12].blockStatement,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:698
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: ColumnType{Type: "enum", EnumValues: yyDollar[7].strs},
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:709
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:719
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:723
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[4].colIdent.String(),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:732
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:    true,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:753
		{
			// Convert table names to multiple Grant statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: GrantPrivilege,
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      yyDollar[2].strs,
						TableName:       tableName,
						Grantees:        yyDollar[7].strs,
						WithGrantOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:775
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:    false,
						Privileges: yyDollar[2].strs,
						TableName:  tableName,
						Grantees:   yyDollar[7].strs,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:796
		{
			// Convert table names to multiple Revoke statements (one per table)
			var stmts []Statement
			for _, tableName := range yyDollar[5].tableNames {
				stmts = append(stmts, &DDL{
					Action: RevokePrivilege,
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    yyDollar[2].strs,
						TableName:     tableName,
						Grantees:      yyDollar[7].strs,
						CascadeOption: true,
					},
				})
			}
			if len(stmts) == 1 {
				yyVAL.statement = stmts[0]
			} else {
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:820
		{
			yyVAL.statement = &DDL{
				Action: AddColumn,
				Table:  yyDollar[3].tableName,
				Column: yyDollar[6].columnDefinition,
			}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:828
		{
			yyVAL.statement = &DDL{
				Action:       AlterColumnSetDefault,
				Table:        yyDollar[3].tableName,
				ColumnName:   yyDollar[6].colIdent,
				DefaultValue: yyDollar[9].expr,
			}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:837
		{
			yyVAL.statement = &DDL{
				Action:     AlterColumnDropDefault,
				Table:      yyDollar[3].tableName,
				ColumnName: yyDollar[6].colIdent,
			}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:845
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[6].colIdent,
				Type: ColumnType{NotNull: NewBoolVal(true)},
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnSetNotNull,
				Table:      yyDollar[3].tableName,
				ColumnName: yyDollar[6].colIdent,
				Column:     colDef,
			}
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:858
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[6].colIdent,
				Type: ColumnType{NotNull: NewBoolVal(false)},
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnDropNotNull,
				Table:      yyDollar[3].tableName,
				ColumnName: yyDollar[6].colIdent,
				Column:     colDef,
			}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:871
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[6].colIdent,
				Type: yyDollar[8].columnType,
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnType,
				Table:      yyDollar[3].tableName,
				ColumnName: yyDollar[6].colIdent,
				Column:     colDef,
			}
		}
	case 38:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:884
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[6].colIdent,
				Type: yyDollar[10].columnType,
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnType,
				Table:      yyDollar[3].tableName,
				ColumnName: yyDollar[6].colIdent,
				Column:     colDef,
			}
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:898
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[5].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 40:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:912
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.statement = &DDL{
				Action: AddColumn,
				Table:  yyDollar[4].tableName,
				Column: yyDollar[7].columnDefinition,
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:934
		{
			yyVAL.statement = &DDL{
				Action: AddColumn,
				Table:  yyDollar[4].tableName,
				Column: yyDollar[6].columnDefinition,
			}
		}
	case 43:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:942
		{
			yyVAL.statement = &DDL{
				Action:       AlterColumnSetDefault,
				Table:        yyDollar[4].tableName,
				ColumnName:   yyDollar[7].colIdent,
				DefaultValue: yyDollar[10].expr,
			}
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.statement = &DDL{
				Action:     AlterColumnDropDefault,
				Table:      yyDollar[4].tableName,
				ColumnName: yyDollar[7].colIdent,
			}
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:959
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[7].colIdent,
				Type: ColumnType{NotNull: NewBoolVal(true)},
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnSetNotNull,
				Table:      yyDollar[4].tableName,
				ColumnName: yyDollar[7].colIdent,
				Column:     colDef,
			}
		}
	case 46:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:972
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[7].colIdent,
				Type: ColumnType{NotNull: NewBoolVal(false)},
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnDropNotNull,
				Table:      yyDollar[4].tableName,
				ColumnName: yyDollar[7].colIdent,
				Column:     colDef,
			}
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:985
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[7].colIdent,
				Type: yyDollar[9].columnType,
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnType,
				Table:      yyDollar[4].tableName,
				ColumnName: yyDollar[7].colIdent,
				Column:     colDef,
			}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:998
		{
			colDef := &ColumnDefinition{
				Name: yyDollar[7].colIdent,
				Type: yyDollar[11].columnType,
			}
			yyVAL.statement = &DDL{
				Action:     AlterColumnType,
				Table:      yyDollar[4].tableName,
				ColumnName: yyDollar[7].colIdent,
				Column:     colDef,
			}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1011
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:              yyDollar[6].colIdent,
					Unique:            true,
					Primary:           false,
					Constraint:        true,
					ConstraintOptions: yyDollar[11].constraintOptions,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1027
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  true,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1045
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[6].colIdent,
					Unique:     true,
					Primary:    false,
					Clustered:  false,
					Constraint: true,
					Options:    yyDollar[12].indexOptions,
					Partition:  yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1063
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[3].tableName,
				NewName:    yyDollar[3].tableName,
				ForeignKey: yyDollar[5].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[6].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				IndexSpec: &IndexSpec{
					Name:    NewColIdent(""),
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1123
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 58:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1137
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:              yyDollar[7].colIdent,
					Unique:            true,
					Primary:           false,
					Constraint:        true,
					ConstraintOptions: yyDollar[12].constraintOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 59:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 60:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1172
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1190
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1199
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.statement = &DDL{
				Action:     DropColumn,
				Table:      yyDollar[3].tableName,
				ColumnName: yyDollar[6].colIdent,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1216
		{
			yyVAL.statement = &DDL{
				Action:         DropConstraint,
				Table:          yyDollar[3].tableName,
				ConstraintName: yyDollar[6].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1224
		{
			yyVAL.statement = &DDL{
				Action:         AddConstraintCheck,
				Table:          yyDollar[3].tableName,
				ConstraintName: yyDollar[6].colIdent,
				CheckExpr:      NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1233
		{
			yyVAL.statement = &DDL{
				Action:         AddConstraintCheck,
				Table:          yyDollar[3].tableName,
				ConstraintName: yyDollar[6].colIdent,
				CheckExpr:      NewWhere(WhereStr, yyDollar[9].expr),
				NoInherit:      true,
			}
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1243
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					Exclusions:     yyDollar[9].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1281
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      "GIST",
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:1295
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.statement = &DDL{
				Action:  AddExclusion,
				Table:   yyDollar[3].tableName,
				NewName: yyDollar[3].tableName,
				Exclusion: &ExclusionDefinition{
					ConstraintName: yyDollar[6].colIdent,
					IndexType:      yyDollar[9].colIdent.String(),
					Exclusions:     yyDollar[11].exclusionPairs,
					Where:          NewWhere(WhereStr, yyDollar[13].expr),
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1322
		{
			yyVAL.statement = &DDL{
				Action:     DropColumn,
				Table:      yyDollar[4].tableName,
				ColumnName: yyDollar[7].colIdent,
			}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1330
		{
			yyVAL.statement = &DDL{
				Action:         DropConstraint,
				Table:          yyDollar[4].tableName,
				ConstraintName: yyDollar[7].colIdent,
			}
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.statement = &DDL{
				Action:         AddConstraintCheck,
				Table:          yyDollar[4].tableName,
				ConstraintName: yyDollar[7].colIdent,
				CheckExpr:      NewWhere(WhereStr, yyDollar[10].expr),
			}
		}
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.statement = &DDL{
				Action:         AddConstraintCheck,
				Table:          yyDollar[4].tableName,
				ConstraintName: yyDollar[7].colIdent,
				CheckExpr:      NewWhere(WhereStr, yyDollar[10].expr),
				NoInherit:      true,
			}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1357
		{
			yyVAL.statement = &DDL{
				Action:  RenameIndex,
				Table:   yyDollar[3].tableName,
				NewName: TableName{Name: NewTableIdent(yyDollar[6].colIdent.String())},
			}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.statement = &DDL{
				Action:  RenameTable,
				Table:   yyDollar[3].tableName,
				NewName: TableName{Name: NewTableIdent(yyDollar[6].colIdent.String())},
			}
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1373
		{
			yyVAL.statement = &DDL{
				Action:        RenameColumn,
				Table:         yyDollar[3].tableName,
				ColumnName:    yyDollar[6].colIdent,
				NewColumnName: yyDollar[8].colIdent,
			}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1382
		{
			yyVAL.statement = &DDL{
				Action:       AlterTypeAddValue,
				Table:        yyDollar[3].tableName,
				IfExists:     false,
				DefaultValue: &SQLVal{Type: StrVal, Val: yyDollar[6].bytes},
			}
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.statement = &DDL{
				Action:       AlterTypeAddValue,
				Table:        yyDollar[3].tableName,
				IfExists:     true,
				DefaultValue: &SQLVal{Type: StrVal, Val: yyDollar[9].bytes},
			}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1402
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1413
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     String(yyDollar[4].tableName),
					Comment:    "NULL",
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1424
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    string(yyDollar[8].bytes),
				},
			}
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1435
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    string(yyDollar[10].bytes),
				},
			}
		}
	case 87:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1457
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     yyDollar[4].tableIdent.String() + "." + yyDollar[6].tableIdent.String() + "." + yyDollar[8].colIdent.String(),
					Comment:    "NULL",
				},
			}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1474
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 91:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 92:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1489
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1495
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1499
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1509
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1516
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 98:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1528
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1540
		{
			yyVAL.str = InsertStr
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1544
		{
			yyVAL.str = ReplaceStr
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1550
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1560
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1569
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1570
		{
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1583
		{
			yyVAL.partitions = nil
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1587
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1593
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1597
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1601
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1605
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1611
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1615
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1628
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1632
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1638
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1643
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1647
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1653
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1660
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1667
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1674
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1682
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1692
		{
			yyVAL.str = ""
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1708
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1714
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1735
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1739
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1789
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1800
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1805
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1817
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1832
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1856
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1860
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1864
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1868
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1884
		{
			yyVAL.str = SessionStr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1888
		{
			yyVAL.str = GlobalStr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1893
		{
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1894
		{
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1898
		{
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1899
		{
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1900
		{
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1901
		{
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1902
		{
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1903
		{
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1904
		{
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1908
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1912
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1916
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1920
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1926
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1930
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1939
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1955
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1959
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1964
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1973
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1986
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2015
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2025
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2030
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2040
		{
			yyVAL.exprs = nil
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2050
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2052
		{
			yyVAL.empty = struct{}{}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.bytes = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2059
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2063
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.bytes = nil
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2072
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2076
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2080
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2088
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2093
		{
			yyVAL.expr = nil
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2097
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2102
		{
			yyVAL.expr = nil
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2106
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2111
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2115
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2120
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2124
		{
			yyVAL.bytes = nil
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2147
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2160
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2164
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2168
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2172
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2176
		{
			yyVAL.TableSpec = yyDollar[1].TableSpec
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2183
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2199
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2210
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2214
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2220
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2233
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2238
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2243
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2248
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2254
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2259
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2264
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2269
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2274
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2279
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2284
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2289
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2294
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2303
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2313
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2318
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2323
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 264:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2330
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 265:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2337
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[10].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[10].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2346
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 267:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2353
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[10].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[10].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2362
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[4].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[4].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2369
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[7].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[7].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 270:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2377
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[13].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[13].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 271:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2387
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[12].colIdent
			yyDollar[1].columnType.ReferenceDeferrable = BoolVal(yyDollar[13].constraintOptions.Deferrable)
			yyDollar[1].columnType.ReferenceInitiallyDeferred = BoolVal(yyDollar[13].constraintOptions.InitiallyDeferred)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2398
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2403
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2408
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 275:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2413
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2419
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2425
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2432
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2439
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2445
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2451
		{
			// Check if it's a simple value that should be stored as Value
			if val, ok := yyDollar[2].expr.(*SQLVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: val}
			} else if val, ok := yyDollar[2].expr.(BoolVal); ok {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: NewBoolSQLVal(bool(val))}
			} else {
				yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
			}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2464
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2470
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2476
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2480
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2485
		{
			yyVAL.sequence = &Sequence{}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2489
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2494
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2499
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2504
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2509
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2514
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2519
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2524
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2529
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2534
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2539
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2544
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2549
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2556
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2560
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2564
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, NewIntVal(yyDollar[3].bytes))
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2568
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2572
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2585
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2589
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2595
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2600
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2835
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2839
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2888
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2893
		{
			yyVAL.optVal = nil
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2897
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2902
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2906
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2924
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.optVal = nil
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2936
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2940
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2988
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2993
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2997
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3001
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3039
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3043
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3049
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3059
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3063
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3072
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3076
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3080
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3092
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3096
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3100
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3112
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3127
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.indexPartition = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3217
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3221
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3237
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3246
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3250
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3254
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3270
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: NewIntVal(yyDollar[3].bytes), Direction: yyDollar[5].str}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3280
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3284
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3292
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3296
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3300
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3318
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[3].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3324
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[6].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3332
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[6].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 470:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3340
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[9].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 471:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3348
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyDollar[1].foreignKeyDefinition.ConstraintOptions = yyDollar[9].constraintOptions
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 472:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 473:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3369
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 478:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3398
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 480:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: yyDollar[10].constraintOptions,
			}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:           yyDollar[4].indexColumns,
				Options:           yyDollar[6].indexOptions,
				Partition:         yyDollar[7].indexPartition,
				ConstraintOptions: yyDollar[8].constraintOptions,
			}
		}
	case 482:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3442
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3460
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
			}
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3475
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 487:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3483
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      "GIST",
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
			}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3500
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent.String(),
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3511
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3515
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "="}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: yyDollar[3].colIdent.String()}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.exclusionPair = ExclusionPair{Column: yyDollar[1].colIdent, Operator: "&&"}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3533
		{
			// For expressions, we'll use a special column name to indicate it's an expression
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "="}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: yyDollar[3].colIdent.String()}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.exclusionPair = ExclusionPair{Column: NewColIdent(String(yyDollar[1].expr)), Operator: "&&"}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3548
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3552
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3556
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3588
		{
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3589
		{
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3613
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3620
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3630
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3634
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3639
		{
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3640
		{
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3644
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3648
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3658
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3662
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3671
		{
			setAllowComments(yylex, true)
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.bytes2 = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3685
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.str = UnionStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3695
		{
			yyVAL.str = UnionAllStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3699
		{
			yyVAL.str = UnionDistinctStr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.str = ""
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3708
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3712
		{
			yyVAL.str = SQLCacheStr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3721
		{
			yyVAL.str = DistinctStr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3726
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3730
		{
			yyVAL.str = StraightJoinHint
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.selectExprs = nil
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3745
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3749
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3780
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.overExpr = nil
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3804
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3808
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3813
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3817
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3827
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3850
		{
			yyVAL.strs = []string{}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3854
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3860
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3864
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3870
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3882
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3886
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3890
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3904
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3908
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3914
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3923
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3946
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3950
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3954
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3958
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3966
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3970
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3981
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3986
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3990
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3994
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4001
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.str = JoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.str = JoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.str = JoinStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4021
		{
			yyVAL.str = StraightJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4027
		{
			yyVAL.str = LeftJoinStr
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4031
		{
			yyVAL.str = LeftJoinStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4035
		{
			yyVAL.str = RightJoinStr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4039
		{
			yyVAL.str = RightJoinStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4045
		{
			yyVAL.str = NaturalJoinStr
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4049
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4059
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4069
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4073
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4078
		{
			yyVAL.indexHints = nil
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4082
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4090
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4099
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4104
		{
			yyVAL.columns = nil
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4108
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4114
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4134
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4152
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4168
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, All: true}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4184
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4188
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[5].expr, Any: true}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4200
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4204
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4208
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4212
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4216
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4220
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4228
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixRegexCiStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4232
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4236
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: PosixNotRegexCiStr, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4240
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4253
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4261
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.str = IsNullStr
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4271
		{
			yyVAL.str = IsNotNullStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4275
		{
			yyVAL.str = IsTrueStr
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.str = IsNotTrueStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.str = IsFalseStr
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.str = IsNotFalseStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4293
		{
			yyVAL.str = EqualStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4297
		{
			yyVAL.str = LessThanStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.str = GreaterThanStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4305
		{
			yyVAL.str = LessEqualStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.str = GreaterEqualStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4313
		{
			yyVAL.str = NotEqualStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.str = PosixRegexStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4338
		{
			yyVAL.expr = nil
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4342
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4348
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4362
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4372
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4378
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4382
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4386
		{
			// PostgreSQL date literal syntax: DATE '2022-01-01'
			// This is syntactic sugar for '2022-01-01', so just use the string value
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.expr = yyDollar[1].arrayConstructor
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4428
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4432
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4436
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4452
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4460
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4464
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4468
		{
			colType := yyDollar[3].columnType
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4473
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4477
		{
			timestampType := ColumnType{Type: "timestamp", Timezone: BoolVal(true)}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &timestampType}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4482
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4486
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4490
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4498
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4520
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4528
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4536
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4574
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4578
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4582
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4594
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4612
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4617
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 739:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4621
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4625
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("coalesce"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4633
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 743:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4637
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 744:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4641
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 745:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4645
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 746:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4649
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 747:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4653
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 748:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4657
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4661
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 750:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4665
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 751:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4669
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 752:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4673
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4677
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4681
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4686
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4709
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.expr = &FuncExpr{
				Name:  NewColIdent("current_timestamp"),
				Exprs: SelectExprs{&AliasedExpr{Expr: NewIntVal(yyDollar[3].bytes)}},
			}
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4756
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4788
		{
			yyVAL.str = ""
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4792
		{
			yyVAL.str = BooleanModeStr
		}
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4796
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 779:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4800
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.str = QueryExpansionStr
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4814
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4854
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4866
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4906
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4956
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4960
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4968
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4972
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4984
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type + "[]"}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + "[]"}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " with time zone"}
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " without time zone"}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5020
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].colIdent.val}
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].colIdent.val) + "." + string(yyDollar[3].colIdent.val)}
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5029
		{
			yyVAL.expr = nil
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5033
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.str = string("")
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5052
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5058
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5063
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5065
		{
			yyVAL.empty = struct{}{}
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5068
		{
			yyVAL.expr = nil
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5072
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5078
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5082
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5096
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5102
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5111
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5116
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5120
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5124
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5128
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5132
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5140
		{
			yyVAL.expr = &NullVal{}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5146
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5150
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5155
		{
			yyVAL.exprs = nil
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5159
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5164
		{
			yyVAL.expr = nil
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5168
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5174
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5178
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5184
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5189
		{
			yyVAL.orderBy = nil
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5193
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5199
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5203
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5209
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5214
		{
			yyVAL.str = AscScr
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5218
		{
			yyVAL.str = AscScr
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5222
		{
			yyVAL.str = DescScr
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5227
		{
			yyVAL.limit = nil
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5231
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5235
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5239
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5244
		{
			yyVAL.str = ""
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5248
		{
			yyVAL.str = ForUpdateStr
		}
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5252
		{
			yyVAL.str = ShareModeStr
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5265
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5269
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5273
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 887:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5278
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5282
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 889:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5286
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5293
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5297
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5303
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5307
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5311
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5315
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5320
		{
			yyVAL.updateExprs = nil
		}
	case 897:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5324
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5330
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5334
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5340
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5344
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5350
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5356
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5366
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5370
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5376
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5382
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5386
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5392
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5396
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5400
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5405
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5409
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5415
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5421
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5428
		{
			yyVAL.bytes = []byte("charset")
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5435
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5439
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5443
		{
			yyVAL.expr = &Default{}
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5448
		{
			yyVAL.empty = struct{}{}
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5450
		{
			yyVAL.empty = struct{}{}
		}
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5453
		{
			yyVAL.str = ""
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5455
		{
			yyVAL.str = IgnoreStr
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5459
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5463
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5470
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5474
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5478
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5482
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5488
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5492
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5497
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5504
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5510
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5517
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: false,
			}
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5524
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5531
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: true,
			}
		}
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5538
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5545
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: true,
			}
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5552
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        true,
				InitiallyDeferred: false,
			}
		}
	case 945:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5559
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: false,
			}
		}
	case 946:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5566
		{
			yyVAL.constraintOptions = &ConstraintOptions{
				Deferrable:        false,
				InitiallyDeferred: true,
			}
		}
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5576
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5580
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: nil}
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5587
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5591
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5598
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5602
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5606
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5610
		{
			yyVAL.arrayElement = NewHexNum(yyDollar[1].bytes)
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5614
		{
			yyVAL.arrayElement = NewValArg(yyDollar[1].bytes)
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5618
		{
			yyVAL.arrayElement = &NullVal{}
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5622
		{
			yyVAL.arrayElement = BoolVal(true)
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5626
		{
			yyVAL.arrayElement = BoolVal(false)
		}
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5630
		{
			// Convert ConvertType to ColumnType
			convertType := yyDollar[3].convertType
			colType := ColumnType{
				Type:    convertType.Type,
				Length:  convertType.Length,
				Scale:   convertType.Scale,
				Charset: convertType.Charset,
			}
			yyVAL.arrayElement = &CastExpr{Expr: yyDollar[1].expr, Type: &colType}
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5644
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5648
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5677
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5681
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5685
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5693
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5697
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5701
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5705
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5709
		{
			yyVAL.str = "ALL PRIVILEGES"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5713
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5719
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5723
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].str)
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5729
		{
			yyVAL.strs = []string{yyDollar[1].colIdent.String()}
		}
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5733
		{
			yyVAL.strs = append(yyVAL.strs, yyDollar[3].colIdent.String())
		}
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5890
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5899
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
