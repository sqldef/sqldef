// Code generated by goyacc -v y.output -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const OPTION = 57459
const PRIVILEGES = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const MATERIALIZED = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const CONSTRAINT = 57471
const REFERENCES = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const FOREIGN = 57475
const KEY_BLOCK_SIZE = 57476
const POLICY = 57477
const WHILE = 57478
const EXTENSION = 57479
const EXCLUDE = 57480
const UNIQUE = 57481
const KEY = 57482
const SHOW = 57483
const DESCRIBE = 57484
const EXPLAIN = 57485
const DATE = 57486
const ESCAPE = 57487
const REPAIR = 57488
const OPTIMIZE = 57489
const TRUNCATE = 57490
const EXEC = 57491
const EXECUTE = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TYPE = 57500
const RETURN = 57501
const STATUS = 57502
const VARIABLES = 57503
const RESTRICT = 57504
const CASCADE = 57505
const NO = 57506
const ACTION = 57507
const PERMISSIVE = 57508
const RESTRICTIVE = 57509
const PUBLIC = 57510
const CURRENT_USER = 57511
const SESSION_USER = 57512
const PAD_INDEX = 57513
const FILLFACTOR = 57514
const IGNORE_DUP_KEY = 57515
const STATISTICS_NORECOMPUTE = 57516
const STATISTICS_INCREMENTAL = 57517
const ALLOW_ROW_LOCKS = 57518
const ALLOW_PAGE_LOCKS = 57519
const DISTANCE = 57520
const M = 57521
const EUCLIDEAN = 57522
const COSINE = 57523
const BEFORE = 57524
const AFTER = 57525
const EACH = 57526
const ROW = 57527
const SCROLL = 57528
const CURSOR = 57529
const OPEN = 57530
const CLOSE = 57531
const FETCH = 57532
const PRIOR = 57533
const FIRST = 57534
const LAST = 57535
const DEALLOCATE = 57536
const INSTEAD = 57537
const OF = 57538
const OUTPUT = 57539
const HANDLER = 57540
const CONTINUE = 57541
const EXIT = 57542
const SQLEXCEPTION = 57543
const SQLWARNING = 57544
const SQLSTATE = 57545
const FOUND = 57546
const DEFERRABLE = 57547
const INITIALLY = 57548
const IMMEDIATE = 57549
const DEFERRED = 57550
const CONCURRENTLY = 57551
const ASYNC = 57552
const SQL = 57553
const SECURITY = 57554
const BEGIN = 57555
const START = 57556
const TRANSACTION = 57557
const COMMIT = 57558
const ROLLBACK = 57559
const BIT = 57560
const TINYINT = 57561
const SMALLINT = 57562
const SMALLSERIAL = 57563
const MEDIUMINT = 57564
const INT = 57565
const INTEGER = 57566
const SERIAL = 57567
const BIGINT = 57568
const BIGSERIAL = 57569
const INTNUM = 57570
const REAL = 57571
const DOUBLE = 57572
const PRECISION = 57573
const FLOAT_TYPE = 57574
const DECIMAL = 57575
const NUMERIC = 57576
const SMALLMONEY = 57577
const MONEY = 57578
const TIME = 57579
const TIMESTAMP = 57580
const DATETIME = 57581
const YEAR = 57582
const DATETIMEOFFSET = 57583
const DATETIME2 = 57584
const SMALLDATETIME = 57585
const CHAR = 57586
const VARCHAR = 57587
const VARYING = 57588
const BOOL = 57589
const CHARACTER = 57590
const VARBINARY = 57591
const NCHAR = 57592
const NVARCHAR = 57593
const NTEXT = 57594
const UUID = 57595
const TEXT = 57596
const TINYTEXT = 57597
const MEDIUMTEXT = 57598
const LONGTEXT = 57599
const CITEXT = 57600
const TSTZRANGE = 57601
const TSRANGE = 57602
const INT4RANGE = 57603
const INT8RANGE = 57604
const NUMRANGE = 57605
const DATERANGE = 57606
const BLOB = 57607
const TINYBLOB = 57608
const MEDIUMBLOB = 57609
const LONGBLOB = 57610
const JSON = 57611
const JSONB = 57612
const ENUM = 57613
const GEOMETRY = 57614
const POINT = 57615
const LINESTRING = 57616
const POLYGON = 57617
const GEOMETRYCOLLECTION = 57618
const MULTIPOINT = 57619
const MULTILINESTRING = 57620
const MULTIPOLYGON = 57621
const VECTOR = 57622
const VARIADIC = 57623
const ARRAY = 57624
const NOW = 57625
const GETDATE = 57626
const BPCHAR = 57627
const TEXT_PATTERN_OPS = 57628
const NULLX = 57629
const AUTO_INCREMENT = 57630
const APPROXNUM = 57631
const SIGNED = 57632
const UNSIGNED = 57633
const ZEROFILL = 57634
const ZONE = 57635
const AUTOINCREMENT = 57636
const DATABASES = 57637
const TABLES = 57638
const VSCHEMA_TABLES = 57639
const EXTENDED = 57640
const FULL = 57641
const PROCESSLIST = 57642
const NAMES = 57643
const CHARSET = 57644
const GLOBAL = 57645
const SESSION = 57646
const ISOLATION = 57647
const LEVEL = 57648
const READ = 57649
const WRITE = 57650
const ONLY = 57651
const REPEATABLE = 57652
const COMMITTED = 57653
const UNCOMMITTED = 57654
const SERIALIZABLE = 57655
const NEW = 57656
const CONCAT_NULL_YIELDS_NULL = 57657
const CURSOR_CLOSE_ON_COMMIT = 57658
const QUOTED_IDENTIFIER = 57659
const ARITHABORT = 57660
const FMTONLY = 57661
const NOCOUNT = 57662
const NOEXEC = 57663
const NUMERIC_ROUNDABORT = 57664
const ANSI_DEFAULTS = 57665
const ANSI_NULL_DFLT_OFF = 57666
const ANSI_NULL_DFLT_ON = 57667
const ANSI_NULLS = 57668
const ANSI_PADDING = 57669
const ANSI_WARNINGS = 57670
const FORCEPLAN = 57671
const SHOWPLAN_ALL = 57672
const SHOWPLAN_TEXT = 57673
const SHOWPLAN_XML = 57674
const IMPLICIT_TRANSACTIONS = 57675
const REMOTE_PROC_TRANSACTIONS = 57676
const XACT_ABORT = 57677
const CURRENT_TIMESTAMP = 57678
const DATABASE = 57679
const CURRENT_DATE = 57680
const CURRENT_TIME = 57681
const LOCALTIME = 57682
const LOCALTIMESTAMP = 57683
const UTC_DATE = 57684
const UTC_TIME = 57685
const UTC_TIMESTAMP = 57686
const REPLACE = 57687
const CONVERT = 57688
const CAST = 57689
const SUBSTR = 57690
const SUBSTRING = 57691
const GROUP_CONCAT = 57692
const SEPARATOR = 57693
const INHERIT = 57694
const LEAD = 57695
const LAG = 57696
const MATCH = 57697
const AGAINST = 57698
const BOOLEAN = 57699
const LANGUAGE = 57700
const WITH = 57701
const WITHOUT = 57702
const PARSER = 57703
const QUERY = 57704
const EXPANSION = 57705
const UNUSED = 57706
const VIRTUAL = 57707
const STORED = 57708
const GENERATED = 57709
const ALWAYS = 57710
const IDENTITY = 57711
const SEQUENCE = 57712
const INCREMENT = 57713
const MINVALUE = 57714
const CACHE = 57715
const CYCLE = 57716
const OWNED = 57717
const NONE = 57718
const CLUSTERED = 57719
const NONCLUSTERED = 57720
const REPLICATION = 57721
const COLUMNSTORE = 57722
const INCLUDE = 57723
const HOLDLOCK = 57724
const NOLOCK = 57725
const NOWAIT = 57726
const PAGLOCK = 57727
const ROWLOCK = 57728
const TABLOCK = 57729
const UPDLOCK = 57730
const READUNCOMMITTED = 57731
const DEFINER = 57732
const INVOKER = 57733
const TYPECAST = 57734
const CHECK = 57735
const OVER = 57736

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"OPTION",
	"PRIVILEGES",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"TSTZRANGE",
	"TSRANGE",
	"INT4RANGE",
	"INT8RANGE",
	"NUMRANGE",
	"DATERANGE",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	138, 563,
	-2, 261,
	-1, 210,
	123, 984,
	-2, 978,
	-1, 211,
	123, 985,
	-2, 898,
	-1, 478,
	123, 988,
	-2, 982,
	-1, 479,
	123, 985,
	-2, 983,
	-1, 516,
	61, 530,
	-2, 527,
	-1, 546,
	123, 986,
	-2, 377,
	-1, 698,
	123, 986,
	-2, 377,
	-1, 719,
	299, 995,
	-2, 886,
	-1, 776,
	299, 995,
	-2, 612,
	-1, 807,
	123, 985,
	-2, 465,
	-1, 813,
	5, 63,
	-2, 24,
	-1, 819,
	5, 63,
	-2, 26,
	-1, 984,
	299, 995,
	-2, 612,
	-1, 1164,
	299, 995,
	-2, 465,
	-1, 1241,
	299, 995,
	-2, 612,
	-1, 1305,
	299, 995,
	-2, 886,
	-1, 1429,
	5, 64,
	-2, 745,
	-1, 1523,
	5, 63,
	-2, 25,
	-1, 1539,
	204, 91,
	-2, 668,
	-1, 1577,
	299, 995,
	-2, 241,
	-1, 1578,
	299, 995,
	-2, 241,
	-1, 1802,
	90, 980,
	-2, 968,
	-1, 1905,
	57, 77,
	59, 77,
	-2, 79,
	-1, 2091,
	5, 63,
	-2, 937,
	-1, 2116,
	5, 63,
	-2, 86,
	-1, 2161,
	59, 1131,
	60, 1131,
	-2, 598,
	-1, 2203,
	5, 64,
	-2, 938,
	-1, 2237,
	5, 63,
	-2, 940,
	-1, 2259,
	5, 64,
	-2, 941,
}

const yyPrivate = 57344

const yyLast = 12920

var yyAct = [...]int16{
	700, 2010, 678, 2109, 2212, 2028, 2154, 2160, 2155, 2151,
	1926, 39, 39, 710, 1256, 826, 2078, 1217, 196, 2036,
	42, 2114, 1763, 2011, 206, 207, 1292, 208, 219, 221,
	2101, 920, 1939, 1991, 1938, 1275, 1279, 919, 1278, 1914,
	1771, 1290, 1796, 1781, 2004, 1293, 1780, 756, 1272, 1067,
	1793, 1546, 246, 1334, 1789, 1517, 1541, 1337, 1512, 1103,
	1050, 1651, 859, 1814, 1139, 188, 1163, 37, 1422, 432,
	1378, 1786, 508, 448, 1336, 762, 1924, 585, 1431, 1335,
	1093, 358, 1194, 1094, 950, 1660, 450, 1082, 452, 1116,
	415, 676, 248, 966, 651, 668, 1039, 214, 468, 629,
	853, 517, 681, 378, 512, 628, 342, 469, 1191, 552,
	224, 398, 545, 373, 677, 543, 382, 596, 593, 1688,
	417, 572, 1157, 15, 1494, 1249, 1035, 804, 889, 1892,
	413, 899, 899, 692, 44, 1007, 763, 803, 1250, 477,
	892, 893, 894, 895, 896, 889, 1234, 226, 899, 958,
	865, 1276, 464, 465, 744, 1010, 1493, 518, 519, 1870,
	816, 747, 1307, 1296, 1295, 2213, 2214, 2215, 2216, 2217,
	2218, 2219, 2220, 993, 1297, 541, 1504, 897, 898, 890,
	891, 892, 893, 894, 895, 896, 889, 1298, 2260, 899,
	2192, 235, 237, 2257, 1850, 2139, 1214, 252, 252, 252,
	252, 332, 336, 337, 1383, 1064, 1374, 1382, 2073, 227,
	228, 392, 2110, 888, 887, 897, 898, 890, 891, 892,
	893, 894, 895, 896, 889, 1725, 1726, 899, 660, 1222,
	1223, 375, 39, 2250, 416, 879, 597, 598, 1210, 659,
	661, 1760, 370, 371, 369, 196, 2191, 1704, 1411, 515,
	308, 308, 308, 308, 312, 312, 312, 312, 757, 835,
	1853, 835, 229, 2127, 2185, 2186, 2126, 2047, 2048, 2128,
	563, 311, 311, 311, 311, 2184, 309, 309, 309, 309,
	888, 887, 897, 898, 890, 891, 892, 893, 894, 895,
	896, 889, 1836, 2138, 899, 2046, 355, 1291, 1022, 876,
	875, 574, 359, 758, 1021, 359, 363, 1303, 1940, 419,
	1941, 433, 368, 937, 338, 362, 340, 877, 1929, 423,
	1309, 1310, 560, 1686, 562, 561, 516, 1029, 425, 352,
	1305, 795, 1697, 410, 1204, 457, 458, 794, 451, 413,
	414, 434, 435, 436, 437, 395, 1448, 1446, 195, 2056,
	39, 252, 1527, 339, 216, 426, 213, 2132, 2131, 1299,
	1300, 1302, 36, 2059, 401, 1301, 1958, 496, 497, 203,
	478, 2123, 483, 39, 2060, 1792, 619, 473, 1932, 408,
	1869, 396, 1871, 333, 1531, 877, 511, 2057, 44, 397,
	1090, 1526, 518, 519, 816, 1104, 1954, 1271, 1661, 1662,
	531, 44, 2005, 481, 308, 456, 822, 823, 312, 44,
	462, 2234, 466, 467, 566, 1645, 840, 476, 663, 474,
	871, 900, 900, 868, 484, 311, 1791, 186, 183, 359,
	309, 534, 533, 359, 878, 841, 494, 495, 900, 488,
	504, 659, 1062, 491, 528, 178, 521, 525, 394, 216,
	44, 213, 404, 513, 399, 409, 605, 204, 521, 190,
	343, 216, 1927, 213, 406, 405, 526, 395, 179, 1967,
	180, 1720, 184, 185, 1687, 191, 621, 876, 875, 900,
	535, 537, 900, 1235, 2074, 1708, 624, 625, 1377, 2251,
	630, 482, 577, 630, 662, 877, 580, 2147, 583, 584,
	1727, 994, 878, 39, 2001, 828, 1572, 1957, 652, 749,
	225, 835, 589, 590, 591, 592, 1308, 900, 835, 44,
	189, 1237, 186, 183, 602, 631, 604, 1383, 554, 746,
	613, 609, 610, 611, 186, 183, 433, 876, 875, 1203,
	178, 2113, 1375, 1376, 540, 566, 816, 556, 1307, 1296,
	1295, 1043, 178, 334, 335, 877, 1425, 875, 595, 599,
	1297, 205, 632, 179, 854, 180, 2198, 184, 185, 1862,
	648, 374, 854, 1298, 877, 179, 1056, 180, 834, 184,
	185, 620, 518, 519, 900, 890, 891, 892, 893, 894,
	895, 896, 889, 376, 360, 899, 1403, 638, 634, 514,
	2112, 522, 523, 181, 1790, 1542, 1543, 806, 1731, 862,
	637, 2111, 878, 402, 2137, 664, 182, 649, 1036, 403,
	827, 1733, 429, 39, 832, 431, 44, 766, 630, 743,
	2037, 1060, 1059, 745, 630, 650, 202, 842, 838, 837,
	344, 345, 750, 748, 1841, 879, 2040, 843, 39, 782,
	813, 393, 819, 346, 814, 780, 814, 761, 783, 554,
	759, 786, 787, 879, 876, 875, 879, 652, 44, 240,
	242, 1728, 878, 1752, 1573, 1574, 1575, 241, 556, 808,
	809, 524, 877, 1291, 201, 876, 875, 200, 234, 824,
	831, 878, 411, 1303, 412, 218, 1083, 1084, 181, 245,
	176, 177, 1666, 877, 876, 875, 1309, 1310, 44, 232,
	181, 182, 1640, 845, 1751, 847, 1305, 814, 407, 829,
	864, 636, 877, 182, 818, 393, 825, 1372, 830, 1371,
	1057, 639, 490, 833, 876, 875, 44, 1456, 239, 836,
	805, 1487, 640, 490, 844, 1299, 1300, 1302, 876, 875,
	236, 1301, 877, 827, 856, 860, 861, 863, 394, 493,
	876, 875, 2206, 869, 252, 2076, 877, 1943, 991, 1086,
	1531, 918, 1874, 1737, 938, 914, 1238, 395, 877, 941,
	39, 923, 924, 2041, 2039, 2038, 940, 971, 876, 875,
	220, 876, 875, 779, 873, 176, 177, 622, 1750, 878,
	421, 806, 1026, 420, 992, 351, 877, 176, 177, 877,
	349, 806, 827, 652, 627, 1864, 1002, 308, 238, 501,
	878, 312, 989, 876, 875, 489, 972, 1033, 1729, 1730,
	1732, 1734, 1735, 500, 1661, 1662, 630, 499, 311, 878,
	1061, 877, 789, 309, 1063, 2129, 987, 1016, 1438, 44,
	1437, 223, 652, 587, 586, 1041, 2099, 2029, 2031, 814,
	1017, 1018, 757, 1020, 757, 1942, 1397, 675, 1096, 878,
	876, 875, 746, 652, 1027, 554, 998, 960, 961, 962,
	963, 964, 965, 878, 1195, 900, 44, 1465, 877, 816,
	1042, 1307, 1296, 1295, 1396, 878, 1117, 329, 330, 331,
	1395, 790, 1308, 1297, 1673, 1672, 1394, 758, 856, 758,
	1393, 1392, 1391, 1390, 1389, 1671, 1298, 370, 1388, 1145,
	1386, 1899, 14, 878, 1154, 1154, 878, 1900, 1706, 1053,
	1273, 222, 1087, 1156, 805, 1058, 1195, 1091, 1025, 510,
	1034, 39, 39, 1085, 805, 2030, 1081, 1092, 1032, 356,
	1123, 354, 1996, 370, 971, 1196, 353, 814, 878, 1151,
	348, 478, 1088, 814, 1121, 1122, 1120, 509, 814, 1652,
	1097, 2226, 510, 1009, 1014, 1015, 1100, 9, 12, 13,
	1108, 1110, 1111, 10, 11, 1118, 530, 510, 1109, 1218,
	1653, 1089, 510, 972, 1143, 1412, 1413, 1414, 1177, 1522,
	1101, 1652, 1170, 1868, 1806, 878, 1857, 521, 1158, 1159,
	644, 642, 1140, 1236, 1141, 1152, 1155, 918, 1119, 1168,
	645, 643, 1653, 1947, 1169, 1432, 1291, 1433, 1434, 764,
	765, 806, 806, 1005, 1004, 1856, 1303, 582, 578, 578,
	529, 581, 1709, 1226, 1218, 1663, 1654, 1650, 1477, 1309,
	1310, 1476, 1274, 44, 1475, 1946, 1313, 2183, 1474, 1305,
	1473, 1270, 1472, 1471, 816, 1470, 1307, 1296, 1295, 578,
	1024, 1023, 996, 603, 601, 1848, 879, 600, 1297, 1260,
	571, 1068, 2122, 1975, 44, 1080, 1237, 423, 1299, 1300,
	1302, 1298, 934, 1228, 1301, 1070, 1242, 933, 1243, 652,
	1846, 521, 1188, 1189, 2121, 939, 939, 1312, 44, 44,
	626, 498, 1387, 1531, 1019, 1380, 935, 934, 770, 769,
	1213, 888, 887, 897, 898, 890, 891, 892, 893, 894,
	895, 896, 889, 768, 1117, 899, 646, 594, 575, 1160,
	1161, 879, 536, 1051, 879, 1190, 1895, 1916, 1919, 1920,
	1921, 1917, 521, 1918, 1922, 44, 655, 2102, 2103, 210,
	44, 213, 1036, 1384, 805, 805, 459, 1144, 1251, 1252,
	788, 44, 2244, 2243, 1398, 1069, 1051, 2242, 1483, 2229,
	1212, 742, 1215, 1216, 2179, 879, 888, 887, 897, 898,
	890, 891, 892, 893, 894, 895, 896, 889, 2205, 879,
	899, 1291, 1483, 2140, 879, 1230, 2144, 879, 816, 741,
	1418, 1303, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 851, 2063, 1118, 1309, 1310, 1406, 1911, 879, 938,
	851, 1960, 186, 183, 1305, 2089, 1236, 851, 1959, 39,
	2090, 1908, 740, 1444, 739, 1308, 1051, 1881, 806, 652,
	178, 1483, 1833, 851, 1831, 654, 520, 1443, 1445, 478,
	521, 665, 576, 1299, 1300, 1302, 1402, 1830, 1977, 1301,
	1827, 1826, 1976, 179, 527, 180, 1464, 184, 185, 1855,
	1485, 851, 1821, 851, 1820, 851, 1741, 1909, 1531, 490,
	1713, 1714, 1711, 1712, 1819, 2227, 851, 1677, 1539, 1520,
	1568, 1569, 1570, 814, 1740, 1577, 1158, 1523, 1410, 1231,
	879, 814, 1719, 1532, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
	1313, 1313, 1501, 1521, 652, 652, 1503, 1500, 1497, 1509,
	1646, 805, 1495, 1580, 1649, 1502, 1519, 1492, 1462, 1718,
	1579, 1535, 1536, 1537, 1717, 1544, 1498, 1499, 1483, 1482,
	1066, 851, 1409, 751, 1674, 2008, 652, 490, 181, 1218,
	1402, 1401, 851, 1255, 1051, 1254, 1716, 1533, 1051, 1221,
	1308, 182, 1715, 767, 1710, 900, 1679, 1530, 1149, 879,
	2152, 1510, 1648, 2098, 776, 777, 778, 44, 701, 1153,
	699, 703, 704, 705, 706, 851, 1102, 816, 702, 707,
	851, 850, 1655, 1656, 1657, 1658, 1659, 799, 798, 792,
	793, 1511, 1667, 1668, 792, 791, 1505, 1678, 568, 567,
	1529, 244, 243, 1992, 1036, 1581, 1992, 1508, 1507, 2236,
	817, 1681, 817, 1665, 1721, 1675, 1670, 1490, 1682, 1910,
	900, 1177, 1525, 1489, 1483, 1170, 1460, 1253, 1458, 521,
	1246, 1641, 1642, 1694, 1690, 176, 177, 827, 1689, 1245,
	1177, 1696, 1168, 1911, 1170, 1911, 633, 1169, 1231, 1698,
	1244, 2098, 1744, 1699, 1231, 1311, 1227, 1028, 618, 1052,
	870, 1168, 1006, 1676, 1755, 1000, 1169, 997, 796, 913,
	915, 916, 917, 921, 1459, 39, 1457, 2098, 1769, 785,
	926, 926, 926, 926, 926, 926, 926, 784, 781, 2201,
	1149, 1773, 1762, 618, 490, 492, 617, 1766, 776, 618,
	1911, 1772, 1807, 1774, 233, 1844, 879, 231, 1669, 942,
	943, 944, 945, 946, 947, 948, 949, 816, 952, 1705,
	954, 955, 956, 957, 959, 959, 959, 959, 959, 959,
	959, 1776, 983, 984, 985, 986, 1754, 1805, 359, 1815,
	1815, 879, 1799, 490, 1779, 1680, 230, 1483, 1778, 231,
	2045, 888, 887, 897, 898, 890, 891, 892, 893, 894,
	895, 896, 889, 1745, 1746, 899, 1935, 1787, 1753, 521,
	1784, 1817, 1816, 1231, 652, 652, 1916, 1919, 1920, 1921,
	1917, 1439, 1918, 1922, 1051, 851, 888, 887, 897, 898,
	890, 891, 892, 893, 894, 895, 896, 889, 1683, 995,
	899, 867, 866, 521, 776, 801, 800, 2174, 1739, 1764,
	797, 1765, 2172, 2135, 1530, 817, 1747, 2102, 2103, 1758,
	1978, 423, 1824, 888, 887, 897, 898, 890, 891, 892,
	893, 894, 895, 896, 889, 449, 1644, 899, 1643, 1506,
	1742, 1469, 453, 1408, 1405, 1404, 1748, 887, 897, 898,
	890, 891, 892, 893, 894, 895, 896, 889, 1812, 1373,
	899, 1248, 1247, 1225, 1211, 1210, 1209, 1208, 39, 1207,
	1828, 1829, 1206, 1205, 1098, 1055, 1031, 1030, 988, 926,
	926, 1834, 926, 926, 926, 926, 926, 926, 926, 926,
	926, 926, 926, 926, 926, 926, 926, 1837, 872, 812,
	811, 1822, 1823, 810, 775, 774, 1863, 1865, 1866, 1867,
	772, 752, 1859, 817, 666, 606, 1860, 1861, 1931, 921,
	252, 542, 1858, 538, 921, 39, 507, 446, 1901, 454,
	455, 623, 1945, 439, 438, 831, 1898, 427, 17, 1889,
	2152, 1379, 2105, 1880, 1890, 1486, 802, 641, 608, 1885,
	1313, 607, 461, 460, 365, 652, 1962, 814, 1897, 347,
	341, 192, 2022, 2020, 2108, 2107, 1951, 2023, 2021, 1923,
	2019, 2018, 1933, 308, 1930, 1936, 2230, 312, 1904, 1905,
	2024, 2190, 1920, 1921, 1265, 1266, 1990, 1219, 1949, 1906,
	1886, 953, 1799, 1875, 311, 506, 1953, 1513, 1948, 309,
	588, 755, 2199, 1950, 1791, 211, 487, 1963, 1083, 1084,
	486, 485, 1514, 1832, 1241, 475, 43, 43, 1784, 367,
	366, 1269, 1262, 197, 1045, 1263, 1046, 1047, 1048, 754,
	616, 217, 614, 1966, 612, 1261, 350, 1192, 2034, 1044,
	1979, 370, 1980, 2012, 1530, 1894, 1934, 1878, 1530, 1765,
	1818, 1197, 1882, 1883, 1049, 900, 1997, 1764, 821, 658,
	1257, 2197, 1983, 1872, 1258, 2042, 39, 1036, 1774, 2196,
	1998, 2146, 1505, 1811, 39, 1877, 2000, 1879, 1985, 1810,
	2007, 1218, 1961, 1884, 1891, 1989, 2014, 2015, 2013, 2017,
	900, 2016, 2025, 1151, 2, 1764, 1809, 814, 2054, 470,
	471, 472, 2044, 35, 1808, 2006, 1724, 1723, 2043, 1218,
	193, 926, 926, 926, 2009, 187, 657, 656, 926, 926,
	926, 926, 1400, 2252, 1749, 1399, 2075, 900, 532, 1038,
	1040, 1907, 839, 1799, 1054, 1, 1545, 1964, 19, 18,
	1784, 2052, 2077, 463, 1784, 1784, 1784, 1784, 1784, 1430,
	900, 936, 2053, 696, 2058, 1956, 1241, 679, 1784, 2211,
	2117, 2035, 926, 2115, 1540, 1788, 2065, 1965, 1538, 2066,
	1571, 1664, 2091, 570, 2097, 1995, 814, 2106, 400, 1488,
	1530, 539, 21, 1894, 1759, 1524, 820, 615, 2080, 2081,
	1647, 1065, 383, 372, 846, 502, 194, 16, 1385, 2083,
	384, 381, 2116, 380, 379, 377, 814, 39, 2124, 2130,
	573, 418, 424, 257, 1986, 2095, 259, 258, 1987, 1988,
	370, 2153, 2012, 2162, 2115, 1784, 256, 255, 251, 370,
	217, 2012, 249, 1894, 2156, 250, 217, 43, 852, 217,
	217, 1784, 247, 2163, 1773, 2165, 217, 1794, 1012, 2042,
	197, 2148, 2169, 1944, 1772, 1774, 1774, 2149, 2150, 817,
	2158, 635, 2133, 2134, 814, 1233, 1218, 817, 2180, 912,
	670, 2125, 1801, 2159, 2141, 1516, 2195, 2145, 1765, 1463,
	1193, 680, 1107, 2189, 1995, 695, 2182, 694, 693, 2088,
	881, 2194, 1783, 2200, 1902, 2061, 2062, 1915, 2082, 1913,
	1912, 2104, 1578, 827, 2100, 1782, 827, 827, 827, 1852,
	2225, 2208, 2072, 1264, 2094, 1757, 2096, 2119, 2210, 2224,
	1304, 2221, 2222, 2223, 1294, 1037, 1267, 8, 1306, 1289,
	7, 6, 5, 4, 2143, 1288, 2162, 2240, 1764, 217,
	2235, 1287, 1286, 2239, 217, 2156, 217, 217, 1285, 1283,
	1284, 2166, 1281, 217, 2241, 479, 2163, 217, 217, 2232,
	2248, 1282, 1280, 217, 1259, 815, 3, 217, 0, 0,
	217, 217, 2237, 2253, 0, 0, 814, 0, 43, 2255,
	2156, 0, 2256, 370, 2258, 2012, 888, 887, 897, 898,
	890, 891, 892, 893, 894, 895, 896, 889, 0, 0,
	899, 0, 2167, 0, 2168, 0, 2254, 0, 0, 0,
	814, 0, 1894, 0, 0, 217, 0, 0, 0, 217,
	0, 926, 926, 0, 0, 2209, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 926, 926, 926, 0,
	217, 0, 0, 0, 1530, 217, 217, 217, 0, 0,
	1995, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	1765, 1307, 1296, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 1736, 1297, 0, 0, 217, 0, 0, 0,
	0, 422, 0, 0, 428, 0, 1298, 430, 43, 1765,
	0, 0, 0, 653, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 441, 442, 443, 444, 1785, 0, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 447, 0, 0,
	217, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
	1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
	1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
	1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 0,
	0, 0, 807, 217, 217, 0, 1291, 0, 0, 0,
	0, 0, 1929, 217, 0, 0, 1303, 199, 43, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 1825, 0, 0, 217, 0, 1305,
	0, 0, 44, 43, 198, 0, 212, 215, 216, 0,
	213, 0, 0, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 0, 1299, 1300,
	1302, 926, 0, 0, 1301, 0, 883, 0, 0, 886,
	900, 0, 0, 0, 0, 901, 902, 903, 904, 905,
	906, 907, 1851, 884, 885, 882, 908, 909, 910, 911,
	888, 887, 897, 898, 890, 891, 892, 893, 894, 895,
	896, 889, 0, 0, 899, 186, 183, 0, 0, 394,
	0, 186, 183, 0, 0, 386, 0, 385, 0, 389,
	390, 393, 0, 178, 0, 0, 0, 387, 395, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 667,
	184, 185, 179, 0, 180, 0, 184, 185, 0, 0,
	216, 0, 213, 1925, 0, 43, 0, 753, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 771,
	773, 0, 0, 0, 0, 0, 807, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 653, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 0, 0, 0, 926,
	0, 0, 926, 0, 926, 0, 926, 0, 926, 926,
	0, 0, 0, 186, 183, 0, 215, 653, 0, 0,
	0, 0, 215, 0, 0, 215, 215, 0, 0, 0,
	0, 178, 215, 212, 0, 0, 0, 0, 653, 0,
	0, 0, 0, 0, 0, 2188, 1068, 0, 391, 0,
	1080, 0, 855, 857, 179, 0, 180, 0, 184, 185,
	1070, 181, 1424, 0, 858, 1785, 0, 181, 0, 1785,
	1785, 1785, 1785, 1785, 182, 0, 0, 0, 880, 0,
	182, 0, 0, 1925, 922, 2032, 0, 888, 887, 897,
	898, 890, 891, 892, 893, 894, 895, 896, 889, 0,
	0, 899, 0, 0, 0, 0, 479, 43, 0, 0,
	0, 0, 0, 925, 927, 928, 929, 930, 931, 932,
	0, 216, 0, 213, 0, 215, 0, 0, 951, 0,
	215, 0, 215, 215, 0, 0, 0, 0, 0, 215,
	1069, 480, 0, 480, 215, 0, 0, 0, 0, 215,
	1785, 0, 0, 215, 0, 0, 215, 215, 176, 177,
	990, 388, 2092, 2093, 176, 177, 1785, 0, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 0, 0, 0, 181,
	0, 0, 817, 0, 186, 183, 807, 807, 0, 0,
	0, 215, 182, 0, 0, 569, 855, 0, 0, 0,
	0, 816, 178, 1307, 1296, 1295, 0, 1955, 0, 0,
	0, 1333, 0, 0, 0, 1297, 0, 816, 0, 1307,
	1296, 1295, 0, 0, 0, 179, 0, 180, 1298, 184,
	185, 1297, 0, 0, 0, 0, 215, 0, 2157, 0,
	817, 215, 215, 215, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 2175,
	2176, 2177, 1981, 0, 0, 1095, 0, 0, 0, 1099,
	0, 0, 215, 0, 1105, 1106, 176, 177, 0, 0,
	0, 0, 0, 1768, 0, 0, 0, 888, 887, 897,
	898, 890, 891, 892, 893, 894, 895, 896, 889, 2055,
	0, 899, 1112, 0, 0, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	922, 0, 0, 0, 0, 922, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1291, 0,
	0, 0, 0, 1162, 1187, 0, 0, 0, 1303, 2157,
	0, 34, 2238, 217, 1291, 1381, 0, 0, 0, 0,
	181, 1309, 1310, 0, 1303, 0, 0, 0, 0, 0,
	0, 1305, 0, 182, 0, 0, 364, 1309, 1310, 0,
	0, 900, 0, 0, 2157, 0, 817, 1305, 569, 215,
	215, 0, 1224, 0, 479, 0, 0, 0, 0, 215,
	1299, 1300, 1302, 807, 653, 0, 1301, 0, 27, 29,
	0, 22, 0, 0, 0, 0, 1299, 1300, 1302, 0,
	0, 0, 1301, 215, 23, 1531, 28, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 1003, 0, 0,
	0, 0, 0, 0, 0, 0, 24, 25, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
	1333, 1333, 1333, 1333, 1333, 1333, 1333, 0, 0, 653,
	653, 0, 0, 0, 1415, 1416, 1417, 0, 0, 0,
	0, 0, 1419, 1420, 1421, 0, 0, 0, 1428, 0,
	0, 0, 0, 1440, 1441, 0, 1442, 1308, 1013, 1013,
	1013, 653, 0, 0, 1447, 0, 1449, 1450, 1451, 20,
	0, 1452, 1453, 1308, 1454, 1455, 0, 0, 0, 0,
	0, 0, 569, 0, 215, 925, 0, 1146, 1147, 1148,
	1150, 900, 569, 0, 1466, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 1767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 2002, 1198, 1199, 1200, 1201, 0, 1202,
	0, 0, 0, 0, 0, 0, 816, 0, 1307, 1296,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 26, 0, 1515, 1518, 0, 0,
	1220, 0, 0, 1298, 0, 0, 30, 31, 0, 33,
	0, 0, 1528, 0, 0, 0, 0, 1229, 0, 1232,
	0, 0, 0, 0, 1239, 1240, 0, 0, 0, 0,
	1534, 0, 217, 217, 0, 0, 0, 0, 212, 0,
	43, 0, 1576, 0, 951, 0, 0, 0, 0, 0,
	0, 1268, 0, 0, 0, 0, 0, 0, 2003, 0,
	0, 0, 480, 0, 1013, 1013, 0, 0, 1013, 1013,
	1013, 0, 0, 0, 212, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 1013, 1013, 1013, 1407,
	0, 0, 0, 1291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 655, 1309, 1310, 44, 653,
	653, 1095, 0, 1095, 0, 0, 1305, 0, 0, 0,
	0, 0, 569, 569, 1426, 1427, 1903, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 1436, 0, 0, 0, 1299, 1300, 1302, 1695, 0,
	0, 1301, 0, 0, 1684, 1685, 0, 0, 216, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 1707, 0, 1467, 0, 0, 0,
	0, 186, 183, 0, 0, 0, 217, 0, 1700, 1701,
	1702, 1703, 1478, 1479, 0, 1480, 1481, 0, 0, 178,
	0, 0, 0, 43, 654, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 1743, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 180, 0, 184, 185, 0, 0,
	0, 186, 183, 0, 1761, 0, 0, 0, 0, 0,
	0, 0, 217, 217, 0, 0, 0, 0, 0, 178,
	0, 217, 217, 0, 1113, 1114, 1115, 0, 0, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 720, 179, 721, 180, 0, 184, 185, 0, 0,
	0, 711, 712, 1013, 0, 1333, 922, 922, 0, 1468,
	653, 521, 0, 0, 210, 701, 698, 699, 703, 704,
	705, 706, 1308, 0, 0, 702, 707, 564, 565, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 719, 0,
	0, 0, 816, 1013, 1307, 1296, 1295, 0, 0, 0,
	480, 0, 0, 1013, 0, 0, 1297, 0, 217, 569,
	0, 0, 684, 685, 0, 0, 0, 0, 736, 1298,
	686, 0, 2002, 682, 683, 688, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 183, 217,
	182, 0, 0, 217, 0, 0, 734, 217, 217, 217,
	217, 217, 0, 0, 0, 178, 0, 0, 0, 217,
	1440, 217, 1447, 0, 689, 217, 0, 0, 0, 0,
	0, 43, 0, 215, 0, 0, 0, 181, 179, 43,
	180, 0, 184, 185, 1835, 0, 0, 1854, 0, 697,
	182, 0, 0, 0, 0, 0, 0, 0, 999, 547,
	548, 550, 0, 217, 0, 0, 0, 553, 551, 564,
	565, 216, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 0, 0, 217, 1291,
	1887, 1888, 1518, 0, 1722, 0, 0, 0, 0, 1303,
	0, 0, 0, 0, 217, 549, 0, 0, 0, 0,
	1738, 0, 1309, 1310, 0, 0, 0, 690, 691, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	1756, 0, 0, 722, 176, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 183, 0, 361, 0, 0,
	0, 1299, 1300, 1302, 0, 0, 0, 1301, 0, 0,
	0, 738, 178, 723, 724, 0, 0, 0, 0, 0,
	0, 0, 43, 181, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 182, 180, 2164, 184,
	185, 0, 0, 0, 709, 0, 0, 0, 0, 0,
	0, 0, 1968, 0, 0, 1969, 0, 1970, 0, 1971,
	0, 1972, 1973, 0, 0, 0, 725, 735, 731, 732,
	729, 730, 728, 727, 726, 737, 713, 714, 715, 716,
	718, 1993, 0, 568, 567, 717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 733, 0, 217, 0, 0, 0, 0, 0,
	0, 2051, 0, 0, 0, 0, 0, 0, 816, 0,
	1307, 1296, 1295, 0, 0, 555, 563, 0, 0, 0,
	1838, 2164, 1297, 0, 1839, 1840, 0, 1365, 1308, 1842,
	1843, 1845, 1847, 1849, 0, 1298, 0, 0, 0, 0,
	181, 0, 2079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 1328, 1327, 0, 44, 2086, 1326,
	2087, 1329, 1330, 1331, 1332, 0, 1873, 0, 560, 1348,
	562, 561, 0, 0, 0, 1351, 1350, 1349, 1529, 0,
	1355, 1356, 1357, 1358, 1360, 1359, 1323, 1324, 1325, 0,
	0, 0, 0, 1353, 1354, 0, 1352, 0, 0, 0,
	0, 1320, 1319, 0, 0, 1314, 1315, 1316, 1317, 0,
	1318, 0, 1321, 0, 0, 0, 0, 0, 0, 1322,
	1777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 183, 0, 0, 0, 0, 0, 176, 177, 0,
	1367, 0, 1366, 1370, 0, 1291, 1952, 0, 178, 0,
	0, 0, 1368, 0, 0, 1303, 0, 0, 2170, 0,
	0, 2171, 215, 0, 2173, 0, 0, 0, 1309, 1310,
	216, 179, 213, 180, 0, 184, 185, 0, 1305, 0,
	0, 0, 1974, 0, 0, 0, 0, 0, 2187, 0,
	0, 210, 0, 213, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 2079, 0, 1984, 0, 1299, 1300, 1302,
	0, 0, 0, 1301, 0, 0, 922, 0, 215, 215,
	0, 0, 0, 0, 0, 0, 0, 215, 1928, 0,
	0, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 186, 183, 324, 325, 326, 328, 327,
	0, 0, 0, 0, 2027, 2231, 922, 1344, 1343, 0,
	0, 178, 0, 0, 186, 183, 0, 1338, 1345, 1346,
	1347, 0, 0, 209, 0, 0, 0, 0, 1339, 1340,
	1341, 1342, 178, 0, 179, 0, 180, 0, 184, 185,
	0, 0, 2064, 0, 0, 0, 0, 0, 2067, 2068,
	2069, 2070, 2071, 0, 0, 179, 181, 180, 0, 184,
	185, 0, 0, 0, 1982, 0, 0, 0, 0, 182,
	0, 0, 0, 816, 0, 1307, 1296, 1295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 215,
	1298, 0, 212, 215, 215, 215, 215, 215, 0, 1362,
	1361, 1363, 1364, 0, 1308, 2026, 0, 215, 0, 0,
	0, 2033, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2136, 176, 177, 2181, 1369, 2142, 0, 215,
	0, 0, 0, 0, 1893, 0, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 213,
	0, 0, 182, 0, 215, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 2178, 0, 0, 0, 0, 0,
	215, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	1291, 0, 0, 186, 183, 0, 357, 0, 0, 0,
	1303, 0, 0, 2193, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 1309, 1310, 0, 0, 2202, 2203, 2204,
	0, 0, 0, 1305, 0, 2207, 0, 0, 0, 0,
	186, 183, 0, 0, 179, 0, 180, 0, 184, 185,
	0, 0, 0, 0, 0, 0, 176, 177, 178, 0,
	0, 0, 1299, 1300, 1302, 0, 0, 0, 1301, 0,
	0, 212, 0, 0, 0, 0, 0, 176, 177, 0,
	212, 179, 0, 180, 0, 184, 185, 1277, 0, 0,
	0, 2245, 2246, 2247, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 2259, 0, 0, 170, 0, 126,
	0, 0, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1928, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 181,
	816, 0, 1307, 1296, 1295, 199, 112, 117, 141, 105,
	0, 0, 182, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 0, 1298, 61, 55,
	44, 110, 198, 0, 0, 64, 181, 82, 142, 1308,
	45, 0, 0, 186, 183, 148, 155, 107, 0, 182,
	159, 104, 103, 0, 212, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 876, 875, 87, 88, 123, 137, 0,
	0, 1770, 0, 0, 179, 144, 180, 0, 184, 185,
	0, 877, 0, 0, 0, 0, 176, 177, 0, 0,
	0, 0, 0, 186, 183, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 0, 1291, 0, 0,
	0, 1795, 0, 0, 179, 0, 180, 1303, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 0, 0, 0, 1803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	1300, 1302, 0, 0, 0, 1301, 0, 0, 878, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 1775, 0, 0, 1804, 1802, 1798,
	1797, 0, 182, 0, 0, 132, 0, 0, 0, 0,
	1800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 181,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 182, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 0, 1308, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 44, 0, 176, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 0, 816, 0, 1307, 1296, 1295, 0,
	112, 117, 141, 105, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	0, 1298, 61, 55, 216, 110, 213, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 186, 183, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 41, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 876, 875, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 184, 185, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 183, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 0, 1937, 0, 0, 179, 0,
	180, 1303, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 0, 1803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1300, 1302, 0, 0, 0, 1301,
	0, 0, 878, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 0, 1775, 0,
	0, 1804, 1802, 0, 0, 0, 182, 0, 0, 132,
	0, 0, 0, 0, 1800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 181, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 182, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 0,
	1308, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 44, 0,
	176, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 816, 0, 1307,
	1296, 1295, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 1298, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 186, 183, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	876, 875, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 0, 179, 144, 180, 0, 184, 185, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 1803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 1300, 1302, 0,
	0, 0, 1301, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 1813, 0, 0, 0, 1804, 1802, 0, 0, 0,
	182, 0, 0, 132, 0, 0, 0, 0, 1800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 289, 0, 170,
	0, 126, 0, 1308, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 210, 0, 213, 254, 0, 253, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	141, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 81, 0, 124, 0, 0, 0,
	61, 55, 0, 110, 268, 0, 298, 64, 0, 82,
	142, 0, 45, 0, 0, 186, 183, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 41, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 290, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 0, 179, 144, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 310, 0, 324, 325, 326, 328, 327, 291, 292,
	293, 297, 295, 294, 296, 262, 264, 0, 260, 263,
	269, 265, 266, 267, 281, 270, 271, 272, 273, 274,
	283, 282, 284, 285, 286, 287, 275, 276, 277, 278,
	279, 280, 288, 299, 300, 301, 302, 303, 304, 305,
	306, 307, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 182, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 261, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 0, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 0, 0, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 44, 0, 848, 0,
	849, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 816, 0, 1307, 1296, 1295,
	0, 0, 112, 117, 141, 105, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	124, 0, 1298, 0, 61, 55, 0, 110, 967, 0,
	982, 64, 0, 82, 142, 0, 45, 0, 0, 186,
	183, 148, 155, 107, 0, 0, 159, 104, 103, 0,
	0, 0, 0, 0, 0, 96, 41, 178, 173, 0,
	0, 162, 114, 153, 79, 90, 0, 86, 0, 969,
	0, 87, 88, 123, 137, 0, 0, 2084, 2085, 0,
	179, 144, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 46, 83, 146, 149, 69,
	133, 58, 92, 139, 93, 115, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1303, 979, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 0, 1309, 1310, 0, 976, 975,
	0, 0, 981, 1142, 970, 1305, 0, 0, 0, 978,
	977, 0, 260, 968, 0, 0, 0, 0, 974, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1300, 1302, 0, 0, 0,
	1301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 181, 52, 73, 156, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 182, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 72,
	66, 67, 119, 120, 167, 168, 169, 143, 63, 0,
	70, 71, 0, 151, 0, 0, 0, 122, 0, 0,
	0, 174, 261, 0, 0, 0, 0, 0, 0, 98,
	47, 102, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 106, 101, 127, 129, 138, 147, 157,
	164, 140, 176, 177, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 1308, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 503, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 816,
	0, 1307, 1296, 1295, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 1298, 0, 61, 55,
	0, 110, 967, 0, 982, 64, 0, 82, 142, 0,
	45, 0, 0, 186, 183, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 969, 0, 87, 88, 123, 137, 0,
	0, 2249, 0, 0, 179, 144, 180, 0, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 979, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 0, 1309,
	1310, 0, 976, 975, 0, 0, 981, 980, 970, 1305,
	0, 0, 0, 978, 977, 0, 260, 968, 0, 0,
	0, 0, 974, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 1300,
	1302, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 0, 0, 0, 0, 0, 40, 0,
	0, 0, 182, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 261, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 150,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 1308, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 816, 0, 1307, 1296, 1295, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1876, 0, 81, 0, 124, 0,
	1298, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 186, 183, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 41, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 876, 875, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 184, 185, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 1300, 1302, 0, 0, 0, 1301, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 1775, 0, 0,
	0, 0, 40, 0, 0, 0, 182, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 1308,
	0, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 210, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 0, 816, 0,
	1307, 1296, 1295, 0, 112, 117, 141, 105, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 0, 1298, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 186, 183, 148, 155, 107, 0, 0, 159, 104,
	103, 2118, 0, 0, 0, 0, 0, 96, 41, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 0,
	0, 0, 179, 144, 180, 0, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1309, 1310,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 1300, 1302,
	0, 0, 0, 1301, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 0, 2120, 0, 0, 0, 40, 0, 0, 0,
	182, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 0, 1308, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 647, 816, 0, 1307, 1296, 1295, 0, 112, 117,
	141, 105, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 124, 0, 0, 1298,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 186, 183, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 41, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 2233, 0, 179, 144, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1300, 1302, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 181, 52, 73, 156, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 182, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 0, 0, 59, 60, 0, 0, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	161, 150, 0, 109, 163, 77, 97, 172, 99, 100,
	135, 56, 118, 0, 94, 75, 38, 0, 0, 80,
	49, 89, 50, 78, 111, 0, 76, 0, 152, 121,
	0, 0, 0, 170, 0, 126, 0, 0, 1308, 0,
	0, 113, 154, 116, 145, 108, 136, 65, 125, 165,
	95, 131, 166, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 160,
	91, 62, 175, 0, 134, 48, 128, 0, 0, 54,
	57, 171, 158, 85, 84, 816, 0, 1307, 1296, 1295,
	0, 0, 112, 117, 141, 105, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	124, 0, 1298, 0, 61, 55, 0, 110, 0, 0,
	0, 64, 0, 82, 142, 0, 45, 0, 0, 186,
	183, 148, 155, 107, 0, 0, 159, 104, 103, 0,
	0, 0, 0, 0, 0, 96, 41, 178, 173, 0,
	0, 162, 114, 153, 79, 90, 0, 86, 0, 0,
	0, 87, 88, 123, 137, 0, 0, 2228, 0, 0,
	179, 144, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 46, 83, 146, 149, 69,
	133, 58, 92, 139, 93, 115, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1310, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1299, 1300, 1302, 0, 0, 0,
	1301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 181, 52, 73, 156, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 182, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 72,
	66, 67, 119, 120, 167, 168, 169, 143, 63, 0,
	70, 71, 0, 151, 0, 0, 0, 122, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 98,
	47, 102, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 0, 106, 101, 127, 129, 138, 147, 157,
	164, 140, 176, 177, 161, 150, 0, 109, 163, 77,
	97, 172, 99, 100, 135, 56, 118, 0, 94, 75,
	0, 0, 0, 80, 49, 89, 50, 78, 111, 0,
	76, 0, 152, 121, 0, 0, 0, 170, 0, 126,
	0, 1308, 0, 0, 0, 113, 154, 116, 145, 108,
	136, 65, 125, 165, 95, 131, 166, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 160, 91, 62, 175, 0, 134, 48,
	128, 0, 0, 54, 57, 171, 158, 85, 84, 816,
	0, 1307, 1296, 1295, 0, 0, 112, 117, 141, 105,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 124, 0, 1298, 0, 61, 55,
	0, 110, 0, 0, 0, 64, 0, 82, 142, 0,
	45, 0, 0, 186, 183, 148, 155, 107, 0, 0,
	159, 104, 103, 0, 0, 0, 0, 0, 0, 96,
	41, 178, 173, 0, 0, 162, 114, 153, 79, 90,
	0, 86, 0, 0, 0, 87, 88, 123, 137, 0,
	0, 0, 0, 0, 179, 144, 180, 0, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 46,
	83, 146, 149, 69, 133, 58, 92, 139, 93, 115,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1309,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 1300,
	1302, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 0, 0, 181,
	52, 73, 156, 1277, 0, 0, 0, 0, 40, 0,
	0, 0, 182, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 72, 66, 67, 119, 120, 167, 168,
	169, 143, 63, 0, 70, 71, 0, 151, 0, 0,
	0, 122, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 98, 47, 102, 0, 0, 0, 0,
	0, 0, 0, 59, 60, 0, 0, 106, 101, 127,
	129, 138, 147, 157, 164, 140, 176, 177, 161, 2161,
	0, 109, 163, 77, 97, 172, 99, 100, 135, 56,
	118, 0, 94, 75, 0, 0, 0, 80, 49, 89,
	50, 78, 111, 0, 76, 0, 152, 121, 0, 0,
	0, 170, 0, 126, 0, 1308, 0, 0, 0, 113,
	154, 116, 145, 108, 136, 65, 125, 165, 95, 131,
	166, 521, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 160, 91, 62,
	175, 0, 134, 48, 128, 0, 0, 54, 57, 171,
	158, 85, 84, 816, 0, 1307, 1296, 1295, 0, 0,
	112, 117, 141, 105, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 124, 0,
	1298, 0, 61, 55, 0, 110, 0, 0, 0, 64,
	0, 82, 142, 0, 45, 0, 0, 186, 183, 148,
	155, 107, 0, 0, 159, 104, 103, 0, 0, 0,
	0, 0, 0, 96, 0, 178, 173, 0, 0, 162,
	114, 153, 79, 90, 0, 86, 0, 0, 0, 87,
	88, 123, 137, 0, 0, 0, 0, 0, 179, 144,
	180, 0, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 46, 83, 146, 149, 69, 133, 58,
	92, 139, 93, 115, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1999, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 1300, 1302, 0, 0, 0, 1301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 181, 52, 73, 156, 1775, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 72, 66, 67,
	119, 120, 167, 168, 169, 143, 63, 0, 70, 71,
	0, 151, 0, 0, 0, 122, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 98, 47, 102,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 0,
	0, 106, 101, 127, 129, 138, 147, 157, 164, 140,
	176, 177, 161, 150, 0, 109, 163, 77, 97, 172,
	99, 100, 135, 56, 118, 0, 94, 75, 0, 0,
	0, 80, 49, 89, 50, 78, 111, 0, 76, 0,
	152, 121, 0, 0, 0, 170, 0, 126, 0, 1308,
	0, 0, 0, 113, 154, 116, 145, 108, 136, 65,
	125, 165, 95, 131, 166, 0, 0, 0, 216, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 160, 91, 62, 175, 0, 134, 48, 128, 0,
	0, 54, 57, 171, 158, 85, 84, 816, 0, 1307,
	1296, 1295, 0, 0, 112, 117, 141, 105, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 124, 0, 1298, 0, 61, 55, 0, 110,
	0, 0, 0, 64, 0, 82, 142, 0, 45, 0,
	0, 186, 183, 148, 155, 107, 0, 0, 159, 104,
	103, 0, 0, 0, 0, 0, 0, 96, 0, 178,
	173, 0, 0, 162, 114, 153, 79, 90, 0, 86,
	0, 0, 0, 87, 88, 123, 137, 0, 0, 1994,
	0, 0, 179, 144, 180, 0, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 46, 83, 146,
	149, 69, 133, 58, 92, 139, 93, 115, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1309, 1310, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1299, 1300, 1302, 0,
	0, 0, 1301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 181, 52, 73,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 72, 66, 67, 119, 120, 167, 168, 169, 143,
	63, 0, 70, 71, 0, 151, 0, 0, 0, 122,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 98, 47, 102, 0, 0, 0, 0, 0, 0,
	0, 59, 60, 0, 0, 106, 101, 127, 129, 138,
	147, 157, 164, 140, 176, 177, 161, 150, 0, 109,
	163, 77, 97, 172, 99, 100, 135, 56, 118, 0,
	94, 75, 0, 0, 0, 80, 49, 89, 50, 78,
	111, 0, 76, 0, 152, 121, 0, 0, 0, 170,
	0, 126, 0, 1308, 0, 0, 0, 113, 154, 116,
	145, 108, 136, 65, 125, 165, 95, 131, 166, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 160, 91, 62, 175, 0,
	134, 48, 128, 0, 0, 54, 57, 171, 158, 85,
	84, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	141, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 124, 0, 0, 0,
	61, 55, 0, 110, 0, 0, 0, 64, 0, 82,
	142, 0, 45, 0, 0, 186, 183, 148, 155, 107,
	0, 0, 159, 104, 103, 0, 0, 0, 0, 0,
	0, 96, 0, 178, 173, 0, 0, 162, 114, 153,
	79, 90, 0, 86, 0, 0, 0, 87, 88, 123,
	137, 0, 0, 0, 0, 0, 179, 144, 180, 0,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 46, 83, 146, 149, 69, 133, 58, 92, 139,
	93, 115, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 0, 210, 0, 546, 547, 548, 550,
	0, 0, 0, 0, 0, 553, 551, 564, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 186, 183, 0,
	0, 181, 52, 73, 156, 0, 816, 0, 1307, 1296,
	1295, 0, 0, 0, 182, 178, 0, 132, 0, 0,
	1297, 0, 0, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 179, 0,
	180, 0, 184, 185, 68, 72, 66, 67, 119, 120,
	167, 168, 169, 143, 63, 0, 70, 71, 0, 151,
	0, 0, 0, 122, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 98, 47, 102, 0, 0,
	0, 0, 0, 673, 0, 59, 60, 0, 1896, 106,
	101, 127, 129, 138, 147, 157, 164, 140, 176, 177,
	672, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 720, 0, 721, 0, 0, 558, 559, 0,
	0, 0, 711, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 0, 0, 210, 701, 698, 699, 703,
	704, 705, 706, 1291, 0, 0, 702, 707, 564, 565,
	674, 0, 0, 1303, 0, 669, 687, 0, 0, 719,
	0, 0, 0, 555, 563, 0, 1309, 1310, 0, 0,
	0, 0, 0, 181, 0, 0, 1305, 0, 0, 0,
	0, 0, 0, 684, 685, 0, 182, 0, 0, 736,
	0, 686, 0, 0, 1164, 683, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1300, 1302, 186, 183,
	816, 1301, 1307, 1296, 1295, 0, 560, 734, 562, 561,
	0, 0, 0, 0, 1297, 0, 178, 0, 0, 0,
	0, 0, 0, 568, 567, 1166, 0, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 180, 0, 184, 185, 0, 0, 0, 0, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 1171, 0, 324, 325, 326, 328, 327, 1175, 691,
	1167, 0, 1179, 1178, 1180, 1165, 1182, 0, 0, 0,
	1186, 1183, 1185, 1184, 722, 1181, 0, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1303, 0, 0,
	1172, 1173, 1308, 0, 0, 0, 0, 0, 0, 0,
	1309, 1310, 738, 0, 723, 724, 0, 0, 0, 0,
	1305, 1174, 1176, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 1299,
	1300, 1302, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 725, 735, 731,
	732, 729, 730, 728, 727, 726, 737, 713, 714, 715,
	716, 718, 0, 0, 568, 567, 717, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 671,
	0, 0, 0, 0, 0, 0, 720, 0, 721, 0,
	0, 176, 177, 733, 0, 0, 711, 712, 0, 0,
	0, 0, 0, 0, 2049, 0, 521, 0, 0, 210,
	701, 698, 699, 703, 704, 705, 706, 0, 0, 0,
	702, 707, 564, 565, 674, 2050, 0, 0, 0, 669,
	687, 0, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 685, 0,
	0, 0, 0, 736, 0, 686, 0, 0, 682, 683,
	688, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 673, 0, 0, 0, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	0, 672, 0, 179, 0, 180, 671, 184, 185, 0,
	0, 0, 0, 720, 697, 721, 0, 0, 0, 0,
	0, 0, 0, 711, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 0, 210, 701, 698, 699,
	703, 704, 705, 706, 0, 0, 0, 702, 707, 564,
	565, 674, 0, 0, 0, 0, 669, 687, 0, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 690, 691, 684, 685, 1011, 0, 0, 0,
	736, 0, 686, 0, 0, 682, 683, 688, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	183, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 738, 178, 723, 724,
	0, 0, 0, 0, 0, 0, 689, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 182, 180, 0, 184, 185, 0, 0, 0, 709,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 735, 731, 732, 729, 730, 728, 727, 726,
	737, 713, 714, 715, 716, 718, 0, 0, 568, 567,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 690,
	691, 0, 0, 0, 0, 176, 177, 733, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 723, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 735,
	731, 732, 729, 730, 728, 727, 726, 737, 713, 714,
	715, 716, 718, 0, 0, 568, 567, 717, 673, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 672, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 0, 720, 0, 721,
	0, 0, 176, 177, 733, 0, 0, 711, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 0, 879,
	210, 701, 698, 699, 703, 704, 705, 706, 0, 0,
	0, 702, 707, 564, 565, 674, 0, 0, 0, 0,
	669, 687, 0, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 684, 685,
	0, 0, 0, 0, 736, 0, 686, 0, 0, 682,
	683, 688, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 183, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 673, 0, 0, 0, 0,
	689, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 179, 0, 180, 671, 184, 185,
	0, 0, 0, 0, 720, 697, 721, 0, 0, 0,
	0, 0, 0, 0, 711, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 210, 701, 698,
	699, 703, 704, 705, 706, 0, 0, 0, 702, 707,
	564, 565, 674, 0, 0, 0, 0, 669, 687, 0,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 690, 691, 684, 685, 1011, 0, 0,
	0, 736, 0, 686, 0, 0, 682, 683, 688, 722,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 183, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 738, 178, 723,
	724, 0, 0, 0, 0, 0, 0, 689, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 182, 180, 0, 184, 185, 0, 0, 0,
	709, 0, 697, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 735, 731, 732, 729, 730, 728, 727,
	726, 737, 713, 714, 715, 716, 718, 0, 0, 568,
	567, 717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	690, 691, 0, 0, 0, 0, 176, 177, 733, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 723, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 725,
	735, 731, 732, 729, 730, 728, 727, 726, 737, 713,
	714, 715, 716, 718, 0, 0, 568, 567, 717, 0,
	0, 0, 0, 0, 816, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 671,
	0, 0, 0, 176, 177, 733, 720, 0, 721, 0,
	0, 0, 0, 0, 0, 0, 711, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 521, 0, 0, 210,
	701, 698, 699, 703, 704, 705, 706, 0, 0, 0,
	702, 707, 564, 565, 674, 0, 0, 0, 0, 669,
	687, 0, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 685, 0,
	0, 0, 0, 736, 0, 686, 0, 0, 682, 683,
	688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 183, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 673, 0, 0, 0, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 179, 0, 180, 671, 184, 185, 0,
	0, 0, 0, 720, 697, 721, 0, 0, 0, 0,
	0, 0, 0, 711, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 0, 210, 701, 698, 699,
	703, 704, 705, 706, 0, 0, 0, 702, 707, 564,
	565, 674, 0, 0, 0, 0, 669, 687, 0, 0,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 690, 691, 684, 685, 0, 0, 0, 0,
	736, 0, 686, 0, 0, 682, 683, 688, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	183, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 738, 178, 723, 724,
	0, 0, 0, 0, 0, 0, 689, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 182, 180, 0, 184, 185, 0, 0, 0, 709,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 735, 731, 732, 729, 730, 728, 727, 726,
	737, 713, 714, 715, 716, 718, 0, 0, 568, 567,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 690,
	691, 0, 0, 0, 0, 176, 177, 733, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 723, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 735,
	731, 732, 729, 730, 728, 727, 726, 737, 713, 714,
	715, 716, 718, 0, 0, 568, 567, 717, 0, 0,
	0, 720, 0, 721, 0, 0, 0, 0, 0, 0,
	0, 711, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 0, 0, 210, 701, 698, 699, 703, 704,
	705, 706, 176, 177, 733, 702, 707, 564, 565, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 685, 0, 0, 0, 0, 736, 0,
	686, 0, 0, 682, 683, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 183, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	180, 0, 184, 185, 0, 0, 0, 0, 720, 697,
	721, 0, 0, 0, 0, 0, 0, 0, 711, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
	0, 210, 701, 698, 699, 703, 704, 705, 706, 0,
	0, 0, 702, 707, 564, 565, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 690, 691, 684,
	685, 0, 0, 0, 0, 736, 0, 686, 0, 0,
	682, 683, 688, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 183, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 738, 178, 723, 724, 0, 0, 0, 0, 0,
	0, 689, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 182, 180, 0, 184,
	185, 0, 0, 0, 709, 0, 697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 735, 731, 732,
	729, 730, 728, 727, 726, 737, 713, 714, 715, 716,
	718, 0, 289, 568, 567, 717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 253, 0, 690, 691, 0, 0, 0, 0,
	176, 177, 733, 0, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 544,
	723, 724, 210, 0, 546, 547, 548, 550, 0, 268,
	181, 298, 0, 553, 551, 564, 565, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 549, 0, 725, 735, 731, 732, 729, 730, 728,
	727, 726, 737, 713, 714, 715, 716, 718, 0, 0,
	568, 567, 717, 0, 0, 186, 183, 0, 0, 0,
	0, 0, 1691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 0, 0, 0, 176, 177, 733,
	0, 0, 0, 0, 0, 0, 179, 0, 180, 0,
	184, 185, 0, 1692, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 310, 0, 324, 325,
	326, 328, 327, 291, 292, 293, 297, 295, 294, 296,
	262, 264, 0, 260, 263, 269, 265, 266, 267, 281,
	270, 271, 272, 273, 274, 283, 282, 284, 285, 286,
	287, 275, 276, 277, 278, 279, 280, 288, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 0, 0, 0,
	0, 1001, 0, 0, 0, 558, 559, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 1171,
	0, 324, 325, 326, 328, 327, 1693, 0, 1167, 0,
	1179, 1178, 1180, 1165, 1182, 0, 0, 0, 1186, 1183,
	1185, 1184, 0, 1181, 0, 0, 0, 0, 0, 0,
	0, 555, 563, 0, 0, 0, 0, 0, 1172, 1173,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 182, 0, 0, 0, 0, 1174,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 560, 0, 562, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
}

var yyPact = [...]int16{
	851, -1000, -1000, -289, -1000, -1000, -1000, -1000, 1750, 2992,
	8245, 8245, 378, 321, 1775, 851, -1000, 4669, 549, 546,
	498, 229, 421, 1099, 4190, 5073, 558, 647, 788, 367,
	-1000, -250, -185, -1000, -100, 1560, -1000, -1000, 574, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1518, 551, -1000,
	607, 675, 532, -1000, 1412, -1000, 5824, 5824, 5824, 5824,
	327, 1099, 1099, 367, 124, 367, 1774, 441, 1773, 879,
	-1000, -1000, 687, -1000, 1881, 682, -1000, -1000, 367, -1000,
	875, -1000, 870, -1000, 5073, 868, -1000, -1000, -1000, -1000,
	4389, 8245, -1000, 3790, 2770, 1768, 1864, -1000, 1863, -1000,
	5073, 4426, 1099, 194, 2461, 308, -179, 1, -1000, -1000,
	-1000, -1000, -1000, 680, 677, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1633, 65, 1749, 1633, 1749, -1000, 1633, 1749,
	46, 46, 46, 46, 46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1746, 1745,
	-1000, 1633, 1633, 1633, 1633, 1633, -1000, -1000, 1633, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1739, 1633, 1647,
	90, 1654, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 308,
	308, 308, 1743, 5073, 1099, 1110, 1767, 1766, 5073, -255,
	5073, 5073, 1961, -1000, -1000, -1000, 164, 5073, 1859, 7437,
	5824, 9457, 5073, 1855, 1854, -1000, 1850, 5073, 684, -1000,
	-1000, 5073, 1554, 628, 5073, 5073, 1099, 1048, 740, 736,
	-1000, 722, 6629, -1000, 1829, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1738, 911, 1099, 296, 188, 1615, 310,
	620, 309, 1213, 287, -1000, -1000, -1000, 967, -1000, 1099,
	-1000, 1989, -1000, -1000, 275, -1000, 274, 858, 1079, 5073,
	1735, 159, 1733, 12511, 1015, -1000, -293, -1000, -8, -1000,
	1075, 1201, 46, 1004, 1633, -1000, 46, 976, 46, 46,
	-1000, -1000, 734, 1837, 734, 734, 734, 734, 1074, 1074,
	-140, -140, -1000, -1000, -1000, -1000, 1012, -1000, -1000, 1009,
	1647, -1000, -1000, 1008, 5073, 1099, 1727, 1765, 1762, 5073,
	5073, 5073, 1879, 390, -1000, -1000, 1877, 1875, 1510, -1000,
	-1000, 163, -1000, -1000, 441, 1099, -1000, 674, -1000, -1000,
	-1000, -1000, -1000, -1000, 1744, 1099, 1047, -1000, 673, 340,
	5073, 1505, 340, 575, 611, -1000, 1761, -1000, -1000, 948,
	947, 1073, 7841, 194, -1000, -1000, -1000, 3457, -1000, 1977,
	1910, 84, 268, -237, 1200, -1000, -1000, 1726, -1000, -1000,
	11785, -1000, 1183, 1181, -1000, 1148, 1120, -2, 1099, -1000,
	-235, 99, -31, -1000, -1000, 1615, -1000, 1723, 11785, 1874,
	-1000, 1840, 797, -1000, 10033, -1000, -273, -1000, -1000, 964,
	-1000, -273, -1000, -1000, -1000, 1615, -1000, 1070, 1056, 1055,
	1722, 1717, -1000, 1716, -1000, -1000, 1615, 1615, 1615, 670,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 734, 1498, 46,
	734, 1497, 1489, 734, 734, -1000, -1000, 1109, 781, -1000,
	-1000, -1000, -1000, 1405, -1000, 1400, -1000, 83, 77, -1000,
	1478, 1621, -1000, 1398, 1618, 1760, 1098, 5073, 5073, 1715,
	1712, 1711, 1581, 367, 1581, 1909, 223, 5073, 1961, 348,
	1961, 441, 8649, 1099, -1000, -1000, -1000, 340, 202, -1000,
	-1000, -1000, -1000, 340, 459, 278, 1099, -1000, -1000, -1000,
	501, 5073, -1000, -1000, -1000, -1000, -1000, 6225, -1000, -1000,
	1391, -1000, 261, 261, 1633, 11785, 576, 576, -246, 1614,
	266, -237, 1615, 263, 1710, -1000, 3457, 606, -1000, 11785,
	2475, 1615, 1615, 1615, 1615, 11638, -1000, -1000, 657, -1000,
	-1000, -1000, 12123, 12123, 12123, 12123, 12123, 12123, 12123, 1034,
	1054, 1053, -1000, -1000, -1000, -1000, 14, -1000, -273, -1000,
	1043, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 663, 656,
	-1000, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 11785,
	1615, 1820, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
	1615, 1615, 1615, 6632, 1615, 1615, 1615, 1615, -1000, -1000,
	-1000, -1000, -1000, -1000, -237, 1690, -1000, -1000, -1000, 858,
	-1000, 11785, 348, 744, 115, -1000, 1610, -1000, 1007, 1477,
	3775, 1475, -1000, 12459, -1000, -1000, -1000, 1144, -1000, -1000,
	-1000, -1000, 974, -1000, 973, 1472, 10755, 11266, 11266, 8649,
	-1000, -1000, 734, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46, 1051, 46, -6, -12, -1000, 1006, -1000, 1005,
	1098, 1099, 5073, 1467, 1596, -1000, 269, 261, 1689, 1688,
	1098, 348, 3457, -1000, 1922, 1994, -1000, 1581, 5073, -1000,
	410, 1888, -1000, -1000, 1905, -1000, 1595, -1000, -1000, 1504,
	1961, -1000, 1687, 200, 598, 340, 452, -1000, -1000, 1099,
	-1000, -1000, 286, 1099, -1000, -1000, -1000, -1000, -1000, -1000,
	1024, 3457, 1851, -1000, -1000, 1851, -1000, -1000, 709, 906,
	-1000, -1000, 918, 208, 891, -1000, 11785, 1099, -237, 1686,
	11785, 1099, 3457, 1386, 214, 11785, 11785, 907, -1000, -1000,
	288, 3643, 949, 866, 12123, 12123, 12123, 12123, 12123, 12123,
	12123, 12123, 12123, 12123, 12123, 12123, 12123, 12123, 12123, 951,
	6228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1106, -1000, 1581, 4426, 1144, 1144, 1144,
	1369, 11638, 625, 1376, 1376, 13, 11638, 13, 13, 13,
	13, 13, 73, -1000, -1000, -1000, -1000, -291, -1000, -1000,
	7437, 8649, 11266, 11266, 10244, 11785, 11266, 11266, 11266, 1883,
	850, 625, 4426, 1902, 1144, 1144, 1144, 1144, -1000, 1144,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 276, -1000,
	-1000, -1000, -1000, -1000, -1000, 1685, 1684, 1681, 1679, 1678,
	1677, 1676, -1000, 11266, 11266, 11266, 11266, -1000, 1099, 1615,
	606, 1359, -153, 11785, 1675, 797, -1000, -1000, 1466, -273,
	-1000, -1000, -179, -1000, -1000, -1000, -1000, 1144, 11266, 1250,
	-1000, -1000, 458, 653, 1250, 1250, 1615, -1000, 734, -1000,
	734, -1000, -1000, 1460, 1449, 1440, 1674, 1673, -260, 1004,
	1098, 1098, 1437, 1355, 1353, 1913, 1918, 1581, 1871, 1810,
	-1000, 1144, 1866, 1099, -1000, -1000, -1000, -1000, -1000, 196,
	844, 1099, 8733, 1469, -1000, 4056, 597, 593, -1000, -1000,
	-1000, 1671, 148, 344, 1755, 2699, 149, -1000, 1102, 830,
	1049, 828, 824, 823, 822, 821, 820, 816, 810, 804,
	776, -1000, -1000, -1000, -1000, -1000, 1851, -1000, 1986, -1000,
	-1000, -1000, 1982, 1351, -1000, 220, 1657, 1656, 3457, 606,
	1655, 1342, 1024, -1000, -121, 288, 477, -1000, -1000, 922,
	-1000, -1000, 2902, 12123, 12123, 12123, -1000, -1000, -1000, -1000,
	949, 12123, 12123, 12123, 2151, 2902, 2692, 70, 1611, 13,
	29, 29, 12, 12, 12, 12, 12, 476, 476, -1000,
	-1000, -1000, 180, -1000, 1144, 1144, -1000, -1000, -1000, 11785,
	-1000, 1144, -1000, -273, 1042, -1000, -1000, 962, 1615, -1000,
	1250, 1250, 791, 1592, 12270, 1633, 1034, 1633, 1654, 1647,
	-1000, 90, -1000, -1000, 106, 1029, 105, 1633, 1633, 1633,
	-1000, -1000, 1633, 1633, -1000, 1633, 1633, 712, 1487, 1485,
	1250, 11266, -1000, 798, -1000, 11785, 1144, 5073, -1000, -1000,
	-1000, -1000, -1000, 1653, 1000, 998, 997, 995, 993, 989,
	986, 983, 1250, 1144, 1584, 1250, 1250, 1339, -1000, 11785,
	214, 1759, -1000, -1000, 681, -1000, 1433, 1427, -1000, -1000,
	1250, 11266, -287, -1000, -1000, 1023, -1000, -1000, 5821, -287,
	-287, 11266, -1000, -1000, -1000, -1000, -260, 1098, 3457, 1930,
	1651, 1418, 1417, -260, 1930, 1024, 1848, 11785, 11785, 1922,
	-1000, 1581, -1000, -1000, 1883, -1000, -1000, 929, -1000, 1581,
	1435, 189, 122, 11785, -1000, 3726, -1000, 8733, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1922, 11785, -1000, -1000, -1000, -1000, -1000, 389, 3123, 1099,
	1099, 1099, 466, 11785, 1094, 11785, -1000, -1000, -1000, -1000,
	-1000, 5073, 1415, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 578, -1000, 3457, 3457, 1650, 1648, 258, -1000, 1099,
	-1000, -174, 2699, 1099, -1000, 982, -1000, -1000, 913, 981,
	913, 913, 913, 913, 913, 201, 980, 637, -1000, 576,
	576, 1930, 11785, 825, 11785, 3457, 1237, 214, 1099, 1024,
	1755, -1000, -1000, -1000, -1000, 2902, 2902, 2902, -1000, 2151,
	2902, 1588, -1000, 12123, 12123, 69, -1000, -1000, 625, -1000,
	60, -1000, -273, -1000, -1000, -1000, -1000, 12532, 951, 11785,
	-1000, 271, -1000, -1000, -1000, 1647, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12532, 12123, 12123, 12123,
	12123, -126, 1459, 840, -1000, 11785, 398, -1000, -1000, 977,
	1364, 1233, 1231, 1362, 1356, 1334, 1329, 1252, -1000, -1000,
	-1000, -1000, 324, 1099, 606, -1000, 1967, -157, 440, -1000,
	-1000, -1000, -1000, -1000, 1615, -1000, -1000, 650, -1000, -1000,
	1144, 1930, 1244, 1226, 1024, 11785, 348, -260, -260, 1930,
	1024, -1000, -1000, 1985, 698, 655, 1579, -1000, 669, 1913,
	1144, 1642, -1000, -1000, -135, 11785, 8733, 10374, 625, 10374,
	-1000, 8733, 2915, 1913, 4694, 378, 4169, 400, 1578, 401,
	160, -1000, -1000, -1000, 4609, 945, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1099, 1963, 1955, 1938, 1932, 5501, 11785, 11785, -1000,
	1901, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1234, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1224, 1222, 3457, 3457, 1634, 1615, 1211, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 858, 858, -1000,
	-1000, -1000, -1000, -1000, -1000, 1207, 1194, 1024, -1000, 1192,
	1755, -1000, -1000, 12123, 2902, 2902, -18, -1000, 962, -1000,
	1144, 1633, -1000, 1633, 1144, 585, -1000, -1000, -1000, 1144,
	1516, 1081, 1016, 175, 1615, -108, -1000, 625, 11785, 1219,
	-1000, 970, -1000, 941, -1000, -1000, -1000, -1000, -1000, -1000,
	5073, -1000, 214, 576, 576, -1000, -1000, -1000, 193, 799,
	797, 797, 938, -9, -1000, 1917, 603, 7033, -1000, 1024,
	1930, 1024, 1755, 625, 1187, 1930, 1930, 1024, 1755, -1000,
	1818, 11785, 11785, 11785, -1000, 1848, -1000, 11266, -1000, -1000,
	-281, 625, 3726, 4062, -1000, -1000, 1058, 10170, -1000, 1848,
	8733, 832, -1000, 838, -1000, 10374, 3507, 5073, 1230, 1456,
	1600, -1000, -1000, -1000, 1849, 388, 293, 1099, 174, 5824,
	-1000, -1000, 1897, 1577, 5013, -14, -1000, -1000, -1000, 775,
	644, 992, -1000, 1835, -1000, -1000, 3123, 1844, -1000, -1000,
	-1000, -1000, -1000, 10374, -1000, 1501, 1144, 844, 195, 4056,
	-1000, 285, 1178, 1171, 3457, 1099, -1000, 2699, -1000, -1000,
	1930, 1024, 1755, 322, -1000, 2902, -1000, -1000, -1000, -1000,
	-1000, 12123, -1000, -1000, 12123, -1000, 12123, -1000, 12123, -1000,
	12123, 12123, 1144, 1020, 625, -1000, 1212, 1208, 1632, -1000,
	-1000, -1000, 797, -1000, 797, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2589, -1000, 1916, 1144, -1000, 1755, 1024, -1000,
	-1000, -1000, 1024, 1024, 1755, -1000, 1813, 625, 625, -1000,
	-1000, 1465, 11785, 9541, -1000, -1000, -1000, -1000, 540, 9137,
	361, 3350, 233, 5073, -1000, 233, 1348, 400, -1000, -1000,
	4426, 400, 400, 400, 400, 400, -1000, 1795, 1794, -1000,
	1787, 1786, 1804, 5073, 1168, 388, 803, 1615, -1000, 5073,
	-1000, 1849, 1889, -1000, 565, 5417, 1577, -14, 1561, -1000,
	-28, -58, 10608, 8649, 734, -1000, -1000, -1000, -1000, -1000,
	1099, 2931, -1000, 119, 185, -1000, 140, -1000, 152, 1024,
	1024, 1162, 1144, -1000, -1000, 1755, -1000, 5073, 1551, 1551,
	1551, 1551, 1551, 108, -1000, -1000, -1000, -1000, 1099, -1000,
	-1000, -1000, 642, 11785, -1000, -1000, -1000, 1755, 1755, -1000,
	-1000, 1930, 400, 625, -1000, -1000, 6309, -1000, -1000, 11785,
	-1000, 11785, 10374, -1000, 1202, 1615, -1000, 1930, 400, 1454,
	1462, -1000, 766, 1600, 1631, 1756, 1101, -1000, -1000, -1000,
	-1000, 1789, -1000, 1788, -1000, -1000, -1000, -1000, -164, 473,
	462, 403, 1099, -1000, 1581, 7522, -1000, -1000, 1041, -1000,
	150, -1000, -1000, -1000, 1561, -14, -61, -1000, -1000, -1000,
	-1000, 625, 755, -1000, 1558, -1000, 10374, -1000, -1000, 133,
	-1000, 1755, 1755, -1000, -1000, -1000, 1625, -1000, -1000, -1000,
	-1000, -1000, 1144, 240, -184, 1143, 8649, 1147, -1000, 625,
	-1000, -1000, 1928, 1511, 354, 8733, 7117, 5098, 1754, 4426,
	1615, -1000, 9053, 1099, 1922, 1454, -1000, 1930, 4426, 11785,
	-1000, -1000, 11785, 1624, -1000, 11785, -1000, -1000, -1000, -1000,
	1619, 1615, 1615, 1615, 1125, -1000, -1000, -1000, 565, -1000,
	4377, -1000, 994, -1000, -1000, -1000, -49, -64, -1000, 11785,
	2343, -1000, -1000, -1000, -1000, 1099, -1000, 1808, -129, -190,
	-1000, -1000, -1000, 1144, 11785, 1925, 1915, -1000, 154, 832,
	-1000, -1000, 1842, 1374, 1500, -1000, -1000, 11119, 1144, 1139,
	-1000, -1000, 639, -1000, -1000, 1125, 1913, -1000, 1922, -1000,
	625, 625, 348, 625, -234, 348, 348, 348, 2467, 1099,
	-1000, -1000, 883, -1000, -1000, -1000, -1000, 625, 8329, 1119,
	-1000, 1803, -1000, -1000, -1000, -1000, 11785, 11785, 7926, 254,
	-1000, 1615, -1000, -1000, 1441, 9861, 1099, -1000, -1000, 1913,
	1117, 1113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1084, 1084, 1084, 803, -1000, -1000, 6713, -1000, -1000,
	-143, 625, 1501, 346, 1984, -1000, 1615, -1000, 1581, -1000,
	-1000, -1000, -1000, -1000, -234, -1000, -1000, -1000, -164, -1000,
	-186, -1000, 4426, 1500, 1144, -1000, -1000, -192, 1488, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 2236, 1964, 37, 41, 2235, 2234, 2232, 2231, 2222,
	2220, 2219, 2218, 2212, 2211, 2205, 36, 26, 45, 38,
	40, 2203, 2202, 2201, 2200, 2199, 2198, 2197, 96, 2196,
	2195, 2194, 2190, 108, 2185, 2183, 2182, 2179, 68, 196,
	135, 155, 2118, 33, 76, 46, 43, 2175, 30, 2174,
	2171, 81, 2170, 39, 2169, 2167, 71, 2164, 2162, 5,
	176, 95, 114, 47, 2160, 2159, 91, 2140, 2158, 2157,
	133, 2155, 2152, 89, 31, 63, 6, 13, 8, 2151,
	102, 2, 2150, 82, 84, 2149, 2147, 2146, 126, 2145,
	55, 87, 14, 58, 2143, 15, 7, 125, 44, 21,
	9, 1, 50, 34, 2142, 23, 42, 32, 2141, 65,
	2139, 110, 48, 60, 20, 1875, 0, 67, 146, 2135,
	2131, 2123, 2501, 139, 10, 54, 64, 2117, 66, 93,
	52, 92, 2112, 2105, 2102, 2098, 53, 79, 74, 57,
	2097, 2096, 2087, 2086, 2083, 86, 2082, 2108, 355, 109,
	69, 77, 2081, 2080, 90, 117, 73, 88, 118, 348,
	699, 2075, 2074, 2073, 2071, 116, 80, 83, 103, 2070,
	62, 104, 362, 99, 17, 1973, 105, 211, 2068, 2067,
	2066, 2065, 2064, 2063, 2062, 94, 100, 137, 127, 70,
	205, 49, 2061, 2060, 2057, 2056, 75, 2055, 2054, 2052,
	59, 2051, 2049, 101, 72, 111, 115, 112, 2048, 2043,
	61, 85, 2041, 106, 107, 2040, 98, 35, 22, 151,
	56, 2038, 2035, 2034, 19, 2031, 2030, 2029, 3, 4,
	2027, 2025, 2024, 2023, 2021, 2019, 78, 2013, 156, 2012,
	16, 2009, 2008, 51, 2006, 2005, 2004, 2002, 867, 2389,
	2001, 1107, 113, 2000, 149,
}

var yyR1 = [...]uint8{
	0, 245, 2, 2, 2, 1, 1, 1, 1, 24,
	24, 24, 24, 24, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 22, 22, 22, 22, 22, 22, 247, 247,
	3, 3, 4, 5, 5, 6, 6, 7, 7, 31,
	31, 8, 9, 9, 9, 250, 250, 51, 51, 98,
	98, 10, 10, 10, 10, 11, 11, 11, 221, 221,
	220, 222, 222, 223, 223, 225, 225, 224, 224, 224,
	224, 224, 224, 224, 226, 226, 226, 226, 12, 12,
	12, 12, 12, 215, 215, 215, 215, 215, 13, 13,
	218, 218, 218, 16, 16, 16, 16, 17, 17, 18,
	18, 18, 20, 20, 103, 103, 107, 107, 107, 108,
	108, 108, 108, 237, 237, 127, 127, 246, 246, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 213, 213,
	213, 213, 214, 214, 214, 214, 216, 216, 217, 217,
	217, 217, 217, 217, 219, 219, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 14, 14, 32,
	32, 75, 75, 15, 113, 113, 194, 194, 194, 195,
	195, 195, 195, 195, 195, 197, 197, 198, 198, 120,
	120, 199, 199, 23, 23, 23, 23, 23, 23, 23,
	23, 27, 179, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 165, 165, 166, 166, 167, 167, 167, 167,
	159, 159, 159, 159, 130, 130, 130, 130, 130, 130,
	130, 130, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 205, 205, 205, 205, 205, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 207, 207, 207,
	207, 208, 209, 201, 201, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 149,
	149, 149, 149, 149, 149, 200, 200, 196, 196, 196,
	132, 132, 132, 132, 132, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 140, 137, 137, 141, 138,
	138, 142, 144, 145, 145, 156, 156, 157, 157, 157,
	139, 139, 143, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 131, 131, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 146, 146, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 158, 158, 147, 147, 148, 148, 148,
	155, 155, 155, 152, 152, 153, 153, 154, 154, 154,
	150, 150, 150, 151, 151, 151, 161, 190, 190, 190,
	192, 192, 193, 193, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 178, 178,
	210, 210, 211, 211, 212, 212, 189, 189, 189, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	177, 177, 187, 187, 188, 188, 185, 185, 185, 185,
	185, 185, 186, 168, 168, 168, 168, 168, 169, 169,
	170, 170, 170, 170, 162, 162, 163, 163, 164, 164,
	203, 203, 203, 241, 241, 241, 241, 241, 241, 242,
	242, 204, 204, 171, 171, 174, 174, 172, 172, 172,
	175, 175, 173, 173, 176, 176, 183, 183, 183, 183,
	252, 252, 181, 181, 181, 182, 182, 182, 253, 28,
	29, 29, 30, 30, 30, 35, 35, 35, 33, 33,
	34, 34, 40, 40, 39, 39, 41, 41, 41, 41,
	119, 119, 119, 118, 118, 238, 238, 238, 238, 238,
	43, 43, 44, 44, 45, 45, 46, 46, 46, 228,
	228, 227, 227, 229, 229, 229, 229, 229, 229, 229,
	229, 58, 58, 95, 95, 95, 99, 99, 47, 47,
	47, 47, 48, 48, 49, 49, 50, 50, 125, 125,
	124, 124, 124, 52, 52, 52, 54, 53, 53, 53,
	53, 55, 55, 57, 57, 56, 56, 59, 59, 59,
	59, 60, 60, 97, 97, 42, 42, 42, 42, 42,
	42, 42, 42, 110, 110, 62, 62, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 72, 72, 72, 72, 72, 72, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	38, 38, 73, 73, 73, 80, 74, 74, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 70, 70,
	70, 70, 70, 70, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 254, 254, 71,
	71, 71, 71, 36, 36, 36, 36, 36, 126, 126,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 84, 84, 37, 37,
	82, 82, 83, 112, 112, 85, 85, 81, 81, 81,
	81, 230, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 63, 63, 86, 86, 87, 87, 239, 239,
	240, 88, 88, 89, 89, 90, 91, 91, 91, 92,
	92, 92, 92, 93, 93, 93, 65, 65, 65, 65,
	65, 65, 94, 94, 96, 96, 96, 96, 100, 100,
	76, 76, 78, 78, 77, 79, 101, 101, 105, 102,
	102, 106, 106, 106, 106, 106, 25, 26, 104, 104,
	104, 121, 121, 121, 111, 111, 109, 109, 116, 117,
	117, 117, 117, 117, 122, 122, 122, 123, 123, 231,
	231, 231, 232, 232, 232, 233, 233, 234, 235, 235,
	236, 236, 236, 244, 244, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 248, 249,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	6, 6, 6, 6, 2, 13, 12, 14, 14, 13,
	12, 13, 12, 10, 7, 10, 7, 11, 11, 9,
	13, 16, 5, 8, 7, 10, 6, 9, 7, 8,
	8, 6, 7, 7, 3, 6, 3, 6, 3, 6,
	11, 13, 13, 14, 14, 6, 6, 7, 1, 1,
	4, 6, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 1, 1, 1, 3, 0,
	4, 3, 4, 5, 4, 2, 6, 6, 1, 3,
	3, 0, 1, 1, 1, 1, 3, 1, 2, 3,
	1, 2, 1, 1, 1, 2, 3, 4, 2, 2,
	2, 3, 5, 0, 2, 2, 2, 2, 3, 5,
	1, 2, 3, 7, 10, 1, 1, 5, 5, 3,
	5, 3, 1, 3, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 3, 0,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	4, 2, 3, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 4, 1,
	1, 0, 1, 2, 0, 3, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 3, 5, 5, 7, 3, 5, 3,
	5, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	3, 3, 7, 9, 1, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 3, 2, 4, 2, 4, 2,
	2, 3, 2, 3, 2, 7, 9, 3, 3, 6,
	9, 9, 6, 6, 8, 8, 5, 8, 7, 4,
	0, 2, 4, 6, 2, 4, 2, 1, 1, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 2, 2,
	2, 2, 1, 1, 2, 0, 4, 3, 4, 3,
	3, 3, 3, 3, 3, 3, 2, 4, 6, 2,
	3, 2, 3, 1, 3, 0, 2, 0, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 3, 0, 1, 0, 5, 0, 3, 5,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 2, 1, 1, 4, 5, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 3, 3,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 5, 3,
	3, 2, 3, 2, 3, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 4, 1, 2, 5, 5, 8, 8, 13, 11,
	1, 1, 2, 2, 10, 8, 9, 7, 7, 5,
	0, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	2, 0, 3, 0, 1, 1, 3, 1, 1, 2,
	1, 3, 1, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 1, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 3, 6, 4, 7,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 0,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	2, 1, 2, 0, 3, 1, 1, 3, 4, 4,
	4, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	4, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	2, 2, 2, 2, 2, 2, 2, 3, 2, 2,
	2, 3, 1, 1, 1, 1, 2, 1, 4, 5,
	5, 5, 5, 6, 4, 4, 6, 6, 8, 6,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 9,
	7, 5, 4, 4, 3, 3, 3, 1, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 2, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 6, 6, 4, 5, 4, 4,
	4, 4, 4, 4, 4, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 0, 2, 1, 1, 3,
	5, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 3, 0, 2, 1, 3,
	1, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 1, 3, 1, 1, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 0, 1, 4, 1, 3,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -245, -2, -1, -21, -22, -23, -24, -27, 126,
	132, 133, 127, 128, 71, 412, -179, 58, -241, -242,
	297, -199, 139, 152, 174, 175, 382, 136, 154, 137,
	394, 395, 156, 397, 79, -175, -172, -117, 21, -116,
	319, 151, -114, -115, 61, 131, 200, 385, 80, 25,
	27, 305, 311, 199, 84, 120, 16, 85, 206, 394,
	395, 119, 76, 363, 126, 52, 355, 356, 353, 204,
	365, 366, 354, 312, 211, 20, 31, 10, 28, 159,
	24, 113, 128, 201, 89, 88, 162, 166, 167, 26,
	160, 75, 207, 209, 19, 55, 150, 11, 384, 13,
	14, 399, 386, 143, 142, 100, 398, 138, 50, 8,
	122, 29, 97, 46, 157, 210, 48, 98, 17, 357,
	358, 34, 372, 168, 115, 53, 40, 400, 81, 401,
	73, 56, 326, 205, 79, 15, 51, 169, 402, 208,
	406, 99, 129, 362, 176, 49, 202, 403, 136, 203,
	6, 368, 33, 158, 47, 137, 313, 404, 87, 141,
	74, 5, 156, 9, 405, 54, 57, 359, 360, 361,
	38, 86, 12, 153, 376, 77, 407, 408, 152, 175,
	177, 310, 323, 135, 179, 180, 134, -175, -109, 142,
	138, 154, 56, -2, -180, -159, -116, -115, 63, 36,
	138, 138, 138, 140, 228, 140, -116, -116, -81, 143,
	61, -115, -122, 63, -56, -122, 61, -115, 137, -116,
	143, -116, 143, 63, -111, 143, 397, 394, 395, 362,
	56, 59, 135, 56, 137, -116, 143, -116, 143, 63,
	137, 145, 138, 60, 59, -160, -130, -132, -131, -134,
	-133, -135, -116, 63, 61, -140, -141, -144, -142, -143,
	264, 374, 261, 265, 262, 267, 268, 269, 120, 266,
	271, 272, 273, 274, 275, 282, 283, 284, 285, 286,
	287, 270, 277, 276, 278, 279, 280, 281, 288, 33,
	161, 254, 255, 256, 259, 258, 260, 257, 122, 289,
	290, 291, 292, 293, 294, 295, 296, 297, -136, -137,
	247, -138, -139, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 246, 249, 250, 251, 253, 252, -160,
	-160, -160, -116, 56, 226, 227, -116, -116, -111, 229,
	-111, 56, -213, 19, 199, 200, 212, 56, 81, 123,
	25, 123, -111, 81, 81, -56, 81, 137, -51, -56,
	-172, 137, -51, -56, 326, 56, 26, 26, -56, -81,
	-116, -116, -183, -252, 377, 37, -159, -161, -168, -162,
	-163, -164, -165, -184, -169, 146, 144, 156, 410, 148,
	149, 297, -177, 150, 138, 157, 73, 81, -205, 146,
	-208, 56, 305, 311, 144, 157, 156, 410, 71, 147,
	25, 384, 386, 31, 32, -154, 413, 299, -152, 308,
	123, 123, -147, 58, -146, 263, -148, 58, -147, -148,
	-147, -148, -150, 265, -150, -150, -150, -150, 58, 58,
	-147, -147, -147, -147, -147, -147, 58, -147, -156, 58,
	-145, 248, -157, 58, 56, 57, -56, -116, -116, 56,
	56, 56, -56, -237, 407, 408, -56, -56, -216, -214,
	8, 9, 10, 213, -56, 26, -117, -123, -114, -115,
	-122, -130, -123, -114, -56, 26, 26, 26, -51, 141,
	59, -51, 11, 131, -56, -56, -116, -116, 63, 97,
	97, 97, -181, 59, -117, 71, 36, 58, -204, 56,
	81, -116, -171, 157, -177, 61, 138, -203, 394, 395,
	-248, 58, -177, -177, 61, 138, 157, 61, 157, 73,
	19, -116, 9, 157, 157, -204, 63, -56, 58, -201,
	385, 16, 58, -206, 58, -207, 63, 64, 65, 110,
	66, 73, -149, 72, -62, 300, -70, 161, 254, 255,
	353, 356, 355, 301, 74, 75, -116, 371, 370, -122,
	-209, 65, 414, -153, 309, 63, 61, -150, 65, -147,
	-150, 65, 61, -150, -150, -151, 120, 119, 33, -151,
	-151, -151, -151, -158, 63, -158, -155, 376, 377, -155,
	65, 65, -156, 65, -56, -116, 58, 56, 56, -56,
	-56, -56, 25, 140, 25, -194, 25, 56, 59, 213,
	-213, -116, 123, 57, -116, -116, 63, 141, -176, -173,
	-116, 185, -56, 11, -176, -120, 146, -165, -168, 156,
	131, 56, 63, 73, 63, 73, 63, 90, -117, -252,
	-188, -185, -116, -115, 157, 58, 10, 9, 19, 155,
	144, 156, 410, 150, -203, 61, 58, -42, -61, 81,
	-67, 31, 26, 9, 76, -248, -66, -62, -81, -230,
	-79, -80, 120, 121, 109, 110, 117, 82, 122, 161,
	254, 255, -70, -68, -69, -71, -233, 186, 63, 64,
	-116, 62, 72, 65, 66, 67, 68, 73, -122, 331,
	-77, 48, 49, 363, 364, 365, 366, 372, 367, 85,
	38, 40, 270, 300, 301, 353, 361, 360, 359, 357,
	358, 355, 356, 409, 143, 354, 115, 362, 298, 61,
	61, 61, 61, -203, 156, -171, -116, 396, -205, 410,
	-149, -248, 58, -42, 25, 31, -63, 65, 110, -206,
	58, -207, -196, 409, 65, 66, -196, -248, 63, 63,
	63, -147, 58, -147, 58, 58, -248, -248, -248, 123,
	-151, 60, -150, -151, 60, 60, -151, -151, 61, 61,
	120, 60, 59, 60, 254, 254, 60, 59, 60, 59,
	58, 57, 56, -187, -188, -70, -116, -115, -56, -56,
	58, 58, 58, -3, -4, -5, 6, -248, -111, -3,
	-195, 19, 183, 184, -56, -214, -95, -116, 157, -216,
	-213, -117, -116, -176, 376, 59, -176, 180, 179, -247,
	138, 157, -116, 146, -168, -56, -182, -117, 63, 65,
	60, 59, -147, -186, 303, -147, -186, -147, -42, -170,
	179, 180, 33, 181, -170, 396, 58, 57, 157, -203,
	-248, 157, 58, -188, -249, 80, 79, 97, 214, 60,
	-42, -64, 100, 81, 98, 99, 84, 106, 105, 116,
	109, 110, 111, 112, 113, 114, 115, 107, 108, 119,
	409, 90, 91, 92, 93, 94, 95, 96, 101, 102,
	103, 104, -110, -248, -80, -248, -248, -248, -61, -3,
	-74, -248, -42, 124, 125, -67, -248, -67, -67, -67,
	-67, -67, -67, 63, 63, 63, -234, 299, -196, 63,
	123, 123, -248, -248, -248, -248, -248, -248, -248, -248,
	-84, -42, -248, 41, -248, -248, -248, -248, -254, -248,
	-254, -254, -254, -254, -254, -254, -129, 120, 265, 161,
	256, -136, -131, 271, 270, 251, 250, 262, 261, 235,
	255, 254, 122, -248, -248, -248, -248, -203, 58, -204,
	-42, -95, 60, 58, 386, 59, 65, 60, -206, 63,
	60, 302, -130, -249, 60, 60, 60, -40, 24, -39,
	-41, 111, -42, -122, -39, -39, -117, -151, -150, 63,
	-150, 310, 310, 65, 65, -187, -116, -56, 60, 58,
	58, 58, -187, -95, -188, -88, 15, -30, 5, -28,
	-253, -3, -56, 141, 21, 6, 8, 9, 10, 19,
	-113, 59, 25, -216, -246, 58, 376, 132, -173, 180,
	179, -116, 156, -116, -190, -192, 376, -191, 57, 151,
	71, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	61, -185, -91, 27, 28, -91, 60, -204, 56, 73,
	182, -204, 56, -166, -167, -42, -116, -203, 58, -42,
	-171, -188, 60, -200, 181, -42, -42, -72, 73, 81,
	74, 75, -67, 21, 22, 23, -73, -77, -80, 69,
	100, 98, 99, 84, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -126,
	61, 63, 255, -129, 61, -81, -249, -249, -249, 59,
	-249, -3, -66, 63, -116, -66, -116, 413, -117, -117,
	-39, -39, -42, -128, 120, 261, 161, 256, -138, -137,
	-139, 247, 286, 287, 307, 254, 308, -136, 259, 258,
	260, 271, 262, 267, 269, 268, 266, -42, -41, -41,
	-39, -33, 24, -82, -83, 86, -81, 19, -249, -249,
	-249, -249, -249, 263, 58, 58, 58, 58, 58, 58,
	58, 58, -39, -40, -39, -39, -39, -174, -116, -248,
	-249, 60, 382, 383, -42, 58, -63, 60, -154, -249,
	-39, 59, -249, -119, -118, 25, -116, 63, 123, -249,
	-249, -248, -151, -151, 60, 60, 60, 58, 58, -97,
	398, -187, -187, 60, 60, 60, -92, 17, 16, -6,
	-4, -248, 21, 24, -35, 44, 45, -29, -249, 25,
	-174, 201, -112, 86, -116, -217, -219, 230, -19, -16,
	-7, -9, -8, -11, -10, -12, -13, -14, -15, -25,
	-4, 143, -17, -18, -31, 10, 9, 20, 33, 205,
	206, 211, 207, 153, -32, 176, -26, 8, 362, 166,
	167, 56, -251, -116, 109, 110, 111, 112, 114, 106,
	105, 116, 123, 90, 91, 92, 63, 59, 58, 65,
	66, 67, 68, -115, -136, -137, -138, -139, 271, 282,
	283, 284, 285, 262, 261, 272, 273, 274, 73, 81,
	80, 79, 100, 97, 98, 84, 85, 86, 87, 89,
	88, 364, 363, 365, 366, 31, 146, 144, 156, 410,
	147, 132, 134, 58, 58, 394, 395, 144, -189, 56,
	-191, 376, 58, 378, 61, -178, 90, 63, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, -91, 9,
	10, 60, 59, 376, 58, 58, -188, -249, 58, 60,
	-190, 369, 73, 74, 75, -67, -67, -67, -73, -67,
	-67, -67, -38, 162, 80, 376, -249, -249, -42, -249,
	-235, -236, 63, 65, 66, -249, -249, 59, 57, 59,
	-147, -147, -147, -157, -156, -145, 241, -147, 241, -147,
	-147, -147, -147, -147, -147, -147, 25, 59, 11, 59,
	11, -249, -39, -85, -83, 89, -42, -249, -122, 58,
	65, 65, 65, 65, 65, 65, 65, 65, -249, -249,
	-249, -249, 60, 59, -42, -200, 56, 60, -202, 60,
	60, -249, -41, -238, 411, -118, 111, -123, -238, -238,
	-40, -97, -187, -188, -60, 12, 58, 60, 60, -97,
	-60, -190, -93, 19, 34, -42, -89, -90, -42, -88,
	-3, -33, 70, -3, -197, 57, 202, 230, -42, 412,
	-219, 230, -217, -88, -42, -28, -28, -28, -221, -116,
	-223, -220, 216, 217, -28, -244, -243, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, -116, -116,
	-116, -215, 40, 208, 209, 210, -42, -116, -248, -84,
	-56, 60, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	-251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
	134, -188, -188, 58, 58, 157, -116, -193, -191, -116,
	65, -210, 56, 77, 65, -210, -210, -210, -210, -210,
	-211, 197, 198, 65, -212, -211, 65, -170, -170, -60,
	-167, 90, 80, 79, -116, -166, -188, 60, -200, -174,
	-190, -189, -38, 80, -67, -67, 254, 414, 59, -196,
	-128, 120, 161, 254, -126, -42, -150, 61, -156, -128,
	-67, -67, -67, -67, 373, -88, 88, -42, 87, 65,
	60, 59, 60, 59, 60, 60, 60, 60, 60, 60,
	147, -116, -249, 10, 9, 382, 383, 60, 231, 388,
	389, 168, 390, 181, 391, 392, -248, 123, -249, -60,
	60, 60, -190, -42, -95, -97, -97, -60, -190, 9,
	100, 59, 18, 59, -91, -92, -249, -34, 47, -198,
	376, -42, -217, -218, -219, -219, -217, 412, 88, -92,
	87, -20, -16, -17, -19, 230, -109, 11, -51, -44,
	-45, -46, -47, -58, -80, -248, -56, 59, -222, -125,
	203, 25, 215, -102, -127, 232, -106, 321, 320, -117,
	331, -104, 319, 265, 318, -210, 59, -116, 11, 11,
	11, 11, -219, 230, -75, -74, -75, -113, 19, 60,
	60, 60, -188, -188, 58, -248, 60, 59, -204, -204,
	60, 60, -190, 60, -189, -67, 310, -236, -249, -249,
	-249, 59, -249, -249, 59, -249, 19, -249, 59, -249,
	19, -248, -37, 368, -42, 60, 65, 65, -56, -200,
	-170, -170, 376, -63, 16, -63, -63, -63, 65, 389,
	168, 391, 16, -249, 169, -88, 111, -190, -60, -190,
	-189, 60, -60, -60, -190, -189, 42, -42, -42, -90,
	-93, -39, 410, 412, -219, 88, 88, -93, -217, 89,
	89, -218, -57, 29, -56, -56, -51, -250, 11, 57,
	33, 59, -52, -54, -53, -55, 46, 50, 52, 47,
	48, 49, 53, -125, -44, -248, -124, 169, -122, 25,
	-220, -116, 204, -130, 19, 59, -102, 232, -103, -107,
	322, 324, 90, 123, -121, -116, 63, 31, 33, -243,
	29, -218, -249, -112, 201, -251, -231, 222, 81, 60,
	60, -188, -116, -191, -60, -190, -189, 147, -67, -67,
	-67, -67, -67, -67, -249, 63, 60, 60, 58, -63,
	-63, 393, -122, 16, -249, -189, -190, -190, -190, -189,
	43, -43, 11, -42, 88, -219, 412, -17, -20, 143,
	-18, 143, 412, 88, -98, 169, -56, -98, 57, -44,
	-101, -105, -81, -45, -46, -46, -45, -46, 46, 46,
	46, 51, 46, 51, 46, -53, -122, -249, -59, 54,
	142, 55, -248, -122, 19, -225, -224, 65, 220, 219,
	81, 218, -116, -106, -103, 59, 323, 325, 326, 56,
	77, -42, -117, -151, -174, 88, 230, 202, -232, 223,
	222, -190, -190, 60, -249, -189, -56, -249, -249, -249,
	-249, -249, -36, 100, 376, -174, 123, -239, -240, -42,
	-189, -189, -60, -44, 88, 89, -42, -42, -65, 33,
	38, -3, -248, -248, -60, -44, -60, -43, 59, 90,
	-49, -48, 56, 57, -50, 56, -48, 46, 46, -228,
	376, 138, 138, 138, -99, -116, -3, -226, 59, -219,
	230, 63, 41, 221, -107, -108, 327, 324, 330, 90,
	-218, 225, 224, -189, -189, 58, -249, 374, 53, 379,
	60, -117, -249, -88, 59, -86, 13, 143, -217, -20,
	-20, -100, 56, -101, -76, -78, -77, -248, -3, -94,
	-96, 6, -116, -114, -115, -99, -88, -60, -60, -105,
	-42, -42, 58, -42, 58, -248, -248, -248, -249, 59,
	-224, 88, -217, 63, 324, 328, 329, -42, 412, -174,
	43, 375, 380, -249, -240, -87, 14, 16, 412, 30,
	-100, 59, -249, -249, -249, 59, 123, -249, -92, -88,
	-95, -227, -229, 399, 400, 401, 402, 403, 404, 405,
	406, -95, -95, -95, -124, -116, 88, 412, 88, 60,
	43, -42, -74, 88, 157, -78, 38, -3, -248, -96,
	-116, -92, 60, 60, 59, -249, -249, -249, -59, 88,
	376, 143, 9, -76, -3, -229, -228, 379, -101, -249,
	380,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 0, -2,
	0, 0, 976, 0, 0, 4, 14, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	564, 565, 566, 569, 0, 0, 580, 577, 578, 979,
	980, 981, 982, 983, 978, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 0, 0, 977,
	0, 0, 0, 3, 0, 274, 330, 330, 330, 330,
	0, 0, 0, 974, 0, 974, 0, 897, 0, 0,
	-2, -2, 0, 986, 0, 685, 984, 985, 974, 44,
	0, 46, 0, 48, 0, 0, 570, 567, 568, 262,
	0, 0, 579, 0, 0, 263, 0, 267, 0, 269,
	0, 0, 0, 586, 0, 290, 477, 473, 295, 296,
	297, 298, 299, 0, 978, 380, 381, 382, 383, 384,
	422, 423, 465, 452, 467, 465, 467, 429, 465, 467,
	480, 480, 480, 480, 480, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 0, 0,
	413, 465, 465, 465, 465, 465, 419, 420, 465, 454,
	455, 456, 457, 458, 459, 460, 461, 0, 465, 405,
	403, 407, 412, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 399, 400, 410, 411, 291,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 77,
	581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 272, 588, 0, 591, 275, 276, 277, 278,
	279, 280, 281, 0, 571, 573, 0, 560, 0, 0,
	0, 0, 0, 0, 530, 531, 303, 0, 305, 0,
	307, 0, 309, 310, 0, 312, 314, 571, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 479, 475, 474,
	0, 0, 480, 0, 465, 453, 480, 0, 480, 480,
	430, 431, 483, 0, 483, 483, 483, 483, 0, 0,
	470, 470, 416, 417, 418, 421, 0, 395, 398, 0,
	405, 404, 401, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 144, 0, 246, 0, 216,
	212, 213, 214, 211, 0, 0, 899, 0, -2, -2,
	987, 32, 686, 988, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 259, 0, 265, 264, 268, 270, 0,
	0, 0, 0, 0, 592, 594, 590, 0, 543, 0,
	0, 574, 0, 560, 0, 526, -2, 0, 561, 562,
	995, 1168, 0, 0, 521, 523, 0, 560, 573, 304,
	0, 0, 0, 311, 313, 0, 317, 318, 995, 0,
	353, 0, 0, 331, 0, 334, -2, 337, 338, 0,
	340, 377, 343, 344, 345, 0, 347, 0, 0, 0,
	465, 465, 373, 0, 705, 706, 0, 0, 0, 0,
	351, 352, 478, 294, 476, 300, 301, 483, 0, 480,
	483, 0, 0, 483, 483, 432, 484, 0, 0, 433,
	434, 435, 436, 0, 463, 0, 414, 0, 0, 415,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 47, 49, 0, 36, 584,
	582, 583, 78, 0, 41, 0, 573, 55, 56, 260,
	0, 0, 9, 10, 11, 12, 13, 0, 593, 589,
	0, 534, 465, 465, 465, 995, 0, 0, 0, 0,
	0, 560, 0, 0, 0, 525, 0, 0, 695, 995,
	701, 703, 0, 0, 0, 995, 748, 749, 750, 751,
	752, 753, 995, 995, 995, 995, 995, 995, 995, 0,
	0, 0, 782, 783, 784, 785, 0, 787, -2, 903,
	897, 905, 906, 907, 908, 909, 910, 911, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 817, 827, 827, 827, 827,
	827, 827, 827, 0, 0, 0, 0, 0, 996, 519,
	520, 522, 524, 528, 560, 0, 574, 329, 306, 571,
	308, 995, 0, 0, 0, 354, 0, 912, 0, 0,
	0, 0, 336, 0, 339, 341, 342, 0, 348, 349,
	350, 369, 0, 371, 0, 0, -2, 995, 995, 0,
	424, 466, 483, 426, 468, 469, 427, 428, 485, 481,
	482, 480, 0, 480, 0, 0, 462, 0, 408, 0,
	0, 0, 0, 0, 532, 533, 465, -2, 0, 0,
	0, 0, 0, -2, 921, 0, 598, 0, 0, -2,
	0, 0, 247, 248, 244, 217, 215, 653, 654, 0,
	0, 900, 147, 34, 0, 0, 38, 42, 43, 0,
	58, 59, 574, 573, 57, 266, 587, 595, 596, 597,
	487, 0, 926, 539, 542, 926, 540, 538, 0, 571,
	550, 551, 0, 0, 571, 572, 995, 0, 560, 0,
	995, 573, 0, 0, 375, 995, 995, 0, 700, 1169,
	698, 995, 0, 0, 995, 995, 995, 995, 995, 995,
	995, 995, 995, 995, 995, 995, 995, 995, 995, 0,
	0, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 702, 0, 719, 0, 0, 0, 695, 63,
	0, 995, 746, 0, 0, 770, 995, 771, 772, 773,
	774, 775, 776, 778, 779, 780, 786, 0, 902, 904,
	0, 0, 995, 995, 995, 995, 995, 995, 995, 608,
	0, 887, 0, 0, 0, 0, 0, 0, 819, 0,
	820, 821, 822, 823, 824, 825, 826, 866, 0, 868,
	869, 870, 871, 872, 873, 0, 0, 0, 0, 385,
	0, 0, 885, 995, -2, 995, 995, 529, 0, 0,
	0, 0, 0, 995, 326, 0, 913, 332, 0, 377,
	335, 378, 477, 346, 370, 372, 374, 0, 995, 0,
	614, 616, 620, 0, 0, 0, 0, 425, 483, 464,
	483, 471, 472, 0, 0, 0, 0, 0, 693, 1168,
	0, 0, 0, 0, 0, 929, 0, 0, 602, 605,
	600, 63, 0, 0, 250, 251, 252, 253, 254, 0,
	893, 0, 0, 0, 33, 149, 0, 0, 585, 39,
	40, 0, 0, 574, 516, 488, 0, 490, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 535, 536, 927, 928, 537, 926, 544, 0, 552,
	553, 545, 0, 0, 284, 0, 0, 0, 0, 0,
	0, 0, 487, 559, 0, 696, 697, 699, 723, 0,
	725, 727, 707, 995, 995, 995, 711, 742, 743, 744,
	0, 995, 995, 995, 740, 715, 0, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 768,
	838, 839, 0, 781, 0, 0, 721, 722, 745, 995,
	954, 63, 766, 377, 0, 767, 777, 0, 899, 901,
	0, 0, 0, 0, -2, 465, 843, 465, 407, 405,
	847, 403, 849, 850, 851, 465, 854, 465, 465, 465,
	859, 860, 465, 465, 863, 465, 465, 0, 0, 0,
	0, 995, 609, 895, 890, 995, 0, 0, 814, 815,
	816, 818, 828, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 575, 995,
	375, 319, 322, 323, 0, 355, 0, 0, 379, 788,
	0, 995, 625, 617, 621, 0, 623, 624, 0, 625,
	625, -2, 450, 451, 406, 409, 693, 0, 0, 691,
	0, 0, 0, 693, 691, 487, 933, 995, 995, 921,
	65, 0, 603, 604, 608, 606, 607, 599, 64, 0,
	255, 0, 0, 995, 655, 29, 218, 0, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	921, 995, 125, 126, 598, 598, 598, 0, 598, 0,
	0, 0, 113, 995, 0, -2, 966, 69, 70, 239,
	240, 0, 0, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 0, 37, 0, 0, 0, 0, 0, 486, 0,
	491, 0, 0, 0, 494, 0, 509, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 0,
	0, 691, 995, 0, 995, 0, 0, 375, 0, 487,
	516, 376, 724, 726, 728, 708, 709, 710, 712, 740,
	716, 0, 713, 995, 995, 0, 704, 720, 747, -2,
	0, 998, 377, 1001, 1002, 794, 795, 0, 0, 995,
	840, 480, 844, 845, 846, 405, 852, 853, 855, 856,
	857, 858, 861, 862, 864, 865, 0, 995, 995, 995,
	995, 0, 921, 0, 891, 995, 0, 812, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 829, 830,
	831, 832, 0, 0, 0, 315, 0, 0, 0, 328,
	333, 789, 615, 790, 0, 622, 618, 0, 791, 792,
	0, 691, 0, 0, 487, 995, 0, 693, 693, 691,
	487, 23, 60, 0, 0, 930, 922, 923, 926, 929,
	63, 610, 601, -2, 257, 995, 245, 0, 894, 0,
	221, 0, 0, 929, 0, 976, 0, 0, 85, -2,
	0, 88, 93, 94, 0, 0, 1003, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 108, 109,
	110, 0, 0, 0, 0, 0, 0, -2, -2, 243,
	244, 148, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	35, 0, 0, 0, 0, 0, 517, 0, 492, 497,
	495, 498, 510, 511, 499, 500, 501, 502, 503, 504,
	505, 512, 513, 506, 507, 514, 515, 571, 571, 282,
	285, 286, 287, 288, 289, 0, 0, 487, 558, 0,
	516, 557, 714, 995, 741, 717, 0, 997, 0, 1000,
	0, 465, 843, 465, 0, 0, 841, 842, 848, 0,
	0, 0, 0, 0, 0, 888, 811, 896, 995, 0,
	879, 0, 881, 0, 882, 876, 878, 880, 883, 884,
	0, 576, 375, 0, 0, 324, 325, 327, 0, 0,
	0, 0, 0, 0, 366, 0, 0, 0, 793, 487,
	691, 487, 516, 692, 0, 691, 691, 487, 516, 934,
	0, 995, 995, 995, 925, 933, 66, 995, 611, 27,
	0, 256, 28, 0, 120, 219, 0, 0, 222, 933,
	0, 131, 129, 125, 132, 0, 0, 0, 0, 0,
	632, 634, 635, 636, 668, 0, 670, 0, 0, 0,
	92, 669, 0, 81, 0, 0, 959, 145, 146, 0,
	0, 0, -2, 0, 970, 967, 0, 111, 114, 115,
	116, 117, 118, 0, 237, 242, 0, 893, 0, 149,
	50, 989, 0, 0, 0, 0, 489, 0, 546, 547,
	691, 487, 516, 0, 555, 718, 769, 999, 796, 800,
	797, 995, 799, 801, 995, 803, 995, 805, 995, 807,
	995, 995, 0, 0, 892, 877, 0, 0, 0, 316,
	320, 321, 0, 357, 0, 359, 360, 361, 362, 363,
	364, 365, 0, 626, 0, 0, 619, 516, 487, 20,
	16, 694, 487, 487, 516, 22, 0, 931, 932, 924,
	61, 630, 995, 0, 121, 223, 220, 236, 0, 0,
	0, 0, 79, 0, 684, -2, 0, 0, 75, 76,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 676,
	0, 0, 0, 0, 0, 0, 687, 0, 671, 0,
	89, 668, 0, 90, 0, 0, 82, 0, 84, 134,
	0, 0, 995, 0, 483, 971, 972, 973, 969, 1004,
	0, 0, 238, 0, 0, 165, 992, 990, 0, 487,
	487, 0, 0, 493, 283, 516, 556, 0, 0, 0,
	0, 0, 0, 833, 810, 889, 874, 875, 0, 356,
	358, 367, 0, 995, 628, 15, 21, 516, 516, 19,
	935, 691, 0, 258, 30, 122, 0, 127, 128, 995,
	130, 995, 0, 133, 0, 0, 683, 691, 0, 691,
	630, 956, 0, 633, 664, 666, 0, 661, 674, 675,
	677, 0, 679, 0, 681, 682, 637, 638, 639, 0,
	0, 0, 0, 672, 0, 0, 95, 97, 0, 100,
	0, 102, 103, 960, 83, 0, 0, 137, 138, 961,
	962, 963, 0, 965, 112, 119, 0, 245, 52, 0,
	991, 516, 516, 51, 518, 554, 0, 798, 802, 804,
	806, 808, 0, 0, 0, 0, 0, 0, 918, 920,
	17, 18, 914, 631, 0, 0, 0, 0, 948, 0,
	0, -2, 0, 0, 921, 691, 74, 691, 0, 995,
	658, 665, 995, 0, 659, 995, 660, 678, 680, 651,
	0, 0, 0, 0, 0, 656, -2, 87, 0, 104,
	0, 98, 0, 101, 135, 136, 0, 0, 142, 995,
	0, 993, 994, 53, 54, 0, 809, 0, 0, 0,
	549, 368, 627, 0, 995, 916, 0, 123, 0, 0,
	131, 67, 0, 948, 936, 950, 952, 995, 63, 0,
	942, -2, 944, 946, 947, 0, 929, 73, 921, 957,
	958, 662, 0, 667, 0, 0, 0, 0, 670, 0,
	96, 105, 0, 99, 139, 140, 141, 964, 0, 0,
	834, 0, 837, 629, 919, 62, 995, 995, 0, 0,
	68, 0, 953, -2, 0, 0, 0, 80, 72, 929,
	0, 0, 641, 643, 644, 645, 646, 647, 648, 649,
	650, 0, 0, 0, 687, 657, 106, 0, 31, 548,
	835, 917, 915, 0, 0, 951, 0, -2, 0, 943,
	945, 71, 663, 640, 0, 688, 689, 690, 639, 107,
	0, 124, 0, 939, 63, 642, 652, 0, 949, -2,
	836,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 412,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 413, 3, 414, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:440
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:457
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:473
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:490
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    "",
				},
			}
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:507
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:526
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:545
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:558
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:563
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 16:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:583
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 17:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:603
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:624
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:645
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:667
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:683
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:700
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 23:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:720
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:735
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:746
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:758
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:769
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:785
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:813
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:826
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:840
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name:       yyDollar[3].tableName,
					Type:       yyDollar[5].columnType,
					EnumValues: yyDollar[5].columnType.EnumValues,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:852
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:856
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:893
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      privs,
						Grantees:        grantees,
						WithGrantOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:         true,
							Privileges:      privs,
							Grantees:        grantees,
							WithGrantOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:932
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    true,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    true,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:969
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: GrantPrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:         true,
						Privileges:      privs,
						Grantees:        grantees,
						WithGrantOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: GrantPrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:         true,
							Privileges:      privs,
							Grantees:        grantees,
							WithGrantOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1008
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1045
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    privs,
						Grantees:      grantees,
						CascadeOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:       false,
							Privileges:    privs,
							Grantees:      grantees,
							CascadeOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1084
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[5].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[5].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
						// RESTRICT is the default, no special flag needed
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[5].tableNames))
				for i, table := range yyDollar[5].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
							// RESTRICT is the default, no special flag needed
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1123
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1160
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:       false,
						Privileges:    privs,
						Grantees:      grantees,
						CascadeOption: true,
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:       false,
							Privileges:    privs,
							Grantees:      grantees,
							CascadeOption: true,
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1199
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}

			if len(yyDollar[4].tableNames) == 1 {
				yyVAL.statement = &DDL{
					Action: RevokePrivilege,
					Table:  yyDollar[4].tableNames[0],
					Grant: &Grant{
						IsGrant:    false,
						Privileges: privs,
						Grantees:   grantees,
						// RESTRICT is the default, no special flag needed
					},
				}
			} else {
				stmts := make([]Statement, len(yyDollar[4].tableNames))
				for i, table := range yyDollar[4].tableNames {
					stmts[i] = &DDL{
						Action: RevokePrivilege,
						Table:  table,
						Grant: &Grant{
							IsGrant:    false,
							Privileges: privs,
							Grantees:   grantees,
							// RESTRICT is the default, no special flag needed
						},
					}
				}
				yyVAL.statement = &MultiStatement{Statements: stmts}
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1239
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1248
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1268
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1278
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1299
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1313
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 52:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1327
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 53:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1347
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 54:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1383
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1391
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1400
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1415
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1423
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 62:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1430
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1436
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1457
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1469
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1481
		{
			yyVAL.str = InsertStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1485
		{
			yyVAL.str = ReplaceStr
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1491
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1510
		{
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1511
		{
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1524
		{
			yyVAL.partitions = nil
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1528
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1546
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1552
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1556
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1567
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1580
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1584
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1590
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1609
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1615
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1619
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1625
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1629
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1633
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1637
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1641
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1645
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1649
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1655
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1659
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1666
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1673
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1682
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1689
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1696
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1703
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1721
		{
			yyVAL.str = ""
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1743
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1750
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1764
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1768
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1772
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1779
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1797
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1801
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1808
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1829
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1834
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1839
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1846
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1850
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1871
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1875
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1879
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1903
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1913
		{
			yyVAL.str = SessionStr
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.str = GlobalStr
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2008
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2012
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2027
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2031
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2046
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2055
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2059
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2084
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2097
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2107
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2112
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2122
		{
			yyVAL.exprs = nil
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2123
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2127
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2132
		{
			yyVAL.empty = struct{}{}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.empty = struct{}{}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2137
		{
			yyVAL.bytes = nil
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2141
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2145
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2150
		{
			yyVAL.bytes = nil
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2154
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2158
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2162
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2166
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2170
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2175
		{
			yyVAL.expr = nil
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2179
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2184
		{
			yyVAL.expr = nil
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2202
		{
			yyVAL.bytes = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2206
		{
			yyVAL.bytes = nil
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2212
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2231
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2241
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2253
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2262
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2272
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2281
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2293
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2300
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2306
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2310
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2315
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2319
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2323
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2327
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2331
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2335
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2339
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2345
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      NewColIdent(""), // Default index type
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2354
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent, // GIST, btree, etc.
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2365
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2369
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2375
		{
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "=",
			}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2382
		{
			// AND token represents && in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "&&",
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2390
		{
			// OR token represents || in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "||",
			}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2398
		{
			// Handle all other operators and GIST-specific operators
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   string(yyDollar[3].colIdent.val),
			}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2408
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2412
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2417
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2422
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2428
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2439
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2453
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2466
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2471
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2476
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2481
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2487
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2492
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2497
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2502
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2507
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2512
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2517
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2522
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2527
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2536
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2546
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2551
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2556
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 320:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2563
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 321:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2570
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2578
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2583
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2588
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2593
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2599
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 327:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2605
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2612
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2619
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2631
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2639
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2643
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2647
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2653
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2657
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2661
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2665
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2669
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2673
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2677
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2681
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2685
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2689
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2693
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2699
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2703
		{
			yyVAL.expr = &TypedLiteral{Type: "date", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2707
		{
			yyVAL.expr = &TypedLiteral{Type: "time", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2711
		{
			yyVAL.expr = &TypedLiteral{Type: "timestamp", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2717
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2723
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2733
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.sequence = &Sequence{}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2742
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2747
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2752
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2757
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2762
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2767
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2772
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2777
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2782
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2787
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2792
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2797
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2802
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2809
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2813
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2817
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2821
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2825
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2829
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2834
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2838
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.bytes = nil
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2911
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2920
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3153
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3161
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3172
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3177
		{
			yyVAL.optVal = nil
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3181
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3186
		{
			yyVAL.optVal = nil
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3190
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3194
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3203
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3207
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3211
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3216
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3220
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3225
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3229
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3234
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3238
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3242
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3260
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3297
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3303
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3307
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3313
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3317
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3322
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3326
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3330
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3334
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3338
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3342
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3346
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3350
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3366
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3377
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3381
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3387
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3391
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3397
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3401
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3407
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3411
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3417
		{
			yyVAL.indexPartition = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3421
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3425
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3431
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3435
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3439
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3443
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3447
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3451
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3455
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3459
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3463
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3467
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3471
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3477
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3498
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3508
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3512
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3517
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3521
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3525
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), OperatorClass: string(yyDollar[2].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3529
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3539
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3544
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3551
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3558
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 547:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3565
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 548:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3574
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 549:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3585
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3596
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3600
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3604
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3608
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 554:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 555:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 556:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3635
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3646
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3657
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3675
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3679
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3683
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3689
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3693
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3715
		{
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3716
		{
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3736
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3740
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3746
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3750
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3754
		{
			yyVAL.colIdent = NewColIdent("ALL")
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3781
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3785
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3802
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3811
		{
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3812
		{
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3816
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3843
		{
			setAllowComments(yylex, true)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3847
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.bytes2 = nil
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3863
		{
			yyVAL.str = UnionStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3867
		{
			yyVAL.str = UnionAllStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.str = UnionDistinctStr
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3876
		{
			yyVAL.str = ""
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3880
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3884
		{
			yyVAL.str = SQLCacheStr
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.str = ""
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3893
		{
			yyVAL.str = DistinctStr
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.str = ""
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3902
		{
			yyVAL.str = StraightJoinHint
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.selectExprs = nil
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3917
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3921
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3927
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3939
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3944
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3948
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3952
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3959
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3964
		{
			yyVAL.overExpr = nil
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3968
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3972
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3976
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 629:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3980
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3985
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3989
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4009
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4013
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4017
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.strs = []string{}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4026
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4032
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4036
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4062
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4066
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4070
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 652:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4086
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4091
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4095
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4118
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4122
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4126
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4130
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4136
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4138
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4142
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4144
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4148
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4150
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4155
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4158
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4162
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4166
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4172
		{
			yyVAL.str = JoinStr
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4176
		{
			yyVAL.str = JoinStr
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4180
		{
			yyVAL.str = JoinStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4186
		{
			yyVAL.str = StraightJoinStr
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4192
		{
			yyVAL.str = LeftJoinStr
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4196
		{
			yyVAL.str = LeftJoinStr
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4200
		{
			yyVAL.str = RightJoinStr
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4204
		{
			yyVAL.str = RightJoinStr
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4210
		{
			yyVAL.str = NaturalJoinStr
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4214
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4228
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4234
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4238
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4243
		{
			yyVAL.indexHints = nil
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4247
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4251
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4255
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4260
		{
			yyVAL.expr = nil
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4269
		{
			yyVAL.columns = nil
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4273
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4291
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4303
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4313
		{
			yyVAL.str = ""
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4323
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4327
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4333
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4337
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4341
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4345
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4349
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4361
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4365
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4369
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4373
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4377
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4381
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4386
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4390
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4394
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.str = IsNullStr
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.str = IsNotNullStr
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.str = IsTrueStr
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.str = IsNotTrueStr
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4416
		{
			yyVAL.str = IsFalseStr
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4420
		{
			yyVAL.str = IsNotFalseStr
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4426
		{
			yyVAL.str = EqualStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4430
		{
			yyVAL.str = LessThanStr
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4434
		{
			yyVAL.str = GreaterThanStr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4438
		{
			yyVAL.str = LessEqualStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4442
		{
			yyVAL.str = GreaterEqualStr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4446
		{
			yyVAL.str = NotEqualStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4450
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4454
		{
			yyVAL.str = PosixRegexStr
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4458
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4462
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.expr = nil
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4475
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4481
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4485
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4489
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4495
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4501
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4505
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4511
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4515
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4519
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4523
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4527
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4531
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4535
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4591
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 769:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4595
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4599
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4603
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4607
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4615
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4629
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4633
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4637
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4645
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4653
		{
			yyVAL.expr = &TypedLiteral{Type: "date", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4657
		{
			yyVAL.expr = &TypedLiteral{Type: "time", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4661
		{
			yyVAL.expr = &TypedLiteral{Type: "timestamp", Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4665
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4673
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4677
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4687
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4691
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4695
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4707
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4717
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4725
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 797:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4730
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 798:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4734
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4738
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4742
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 801:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 802:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 803:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4754
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 804:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4758
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4762
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 806:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4766
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 807:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4770
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 808:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4774
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 809:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4778
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 810:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4782
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 811:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4786
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4790
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4795
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4818
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4830
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4834
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4849
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4890
		{
			yyVAL.str = ""
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4894
		{
			yyVAL.str = BooleanModeStr
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4898
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 836:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4902
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4906
		{
			yyVAL.str = QueryExpansionStr
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4912
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4916
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5054
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5062
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 875:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5074
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 877:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5078
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: NewIntVal(yyDollar[4].bytes)}
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 881:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5115
		{
			yyVAL.expr = nil
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5119
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5124
		{
			yyVAL.str = string("")
		}
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5128
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5134
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5138
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5144
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5149
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5151
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5154
		{
			yyVAL.expr = nil
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5158
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5164
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5168
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5172
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5176
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5182
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5188
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5192
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5197
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5202
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5206
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5210
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5214
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5218
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5222
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5226
		{
			yyVAL.expr = &NullVal{}
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5241
		{
			yyVAL.exprs = nil
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5245
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5250
		{
			yyVAL.expr = nil
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5254
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5260
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5264
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5270
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5275
		{
			yyVAL.orderBy = nil
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5279
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5285
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5289
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5295
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5300
		{
			yyVAL.str = AscScr
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5304
		{
			yyVAL.str = AscScr
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5308
		{
			yyVAL.str = DescScr
		}
	case 929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5313
		{
			yyVAL.limit = nil
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5317
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5321
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 932:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5325
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5330
		{
			yyVAL.str = ""
		}
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5334
		{
			yyVAL.str = ForUpdateStr
		}
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5338
		{
			yyVAL.str = ShareModeStr
		}
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5351
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5355
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5359
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 939:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5364
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 940:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5368
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 941:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:5372
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5379
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5383
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5389
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5393
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5397
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5401
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5406
		{
			yyVAL.updateExprs = nil
		}
	case 949:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5410
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5416
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5420
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5426
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5430
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5436
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5442
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5452
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5456
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5462
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5468
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5472
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5478
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5482
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5486
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 964:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5491
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5495
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5501
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5507
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5514
		{
			yyVAL.bytes = []byte("charset")
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5521
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5525
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5529
		{
			yyVAL.expr = &Default{}
		}
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5534
		{
			yyVAL.empty = struct{}{}
		}
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5536
		{
			yyVAL.empty = struct{}{}
		}
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5539
		{
			yyVAL.str = ""
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5541
		{
			yyVAL.str = IgnoreStr
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5545
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5552
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5556
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5560
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5564
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5570
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5574
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5579
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5586
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5592
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5596
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5600
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5606
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5610
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5614
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5620
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5624
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5631
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5638
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5642
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5649
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5653
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5657
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5663
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5667
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5849
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5858
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
