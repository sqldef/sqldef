// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex any, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex any, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex any, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex any) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex any) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex any) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	statements               []Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	exclusionDefinition      *ExclusionDefinition
	exclusionPair            ExclusionPair
	exclusionPairs           []ExclusionPair
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
	handlerCondition         HandlerCondition
	handlerConditions        []HandlerCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const COLUMNS_UPDATED = 57415
const OFF = 57416
const MAX = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const NO_ELSE = 57421
const BETWEEN = 57422
const CASE = 57423
const WHEN = 57424
const THEN = 57425
const END = 57426
const ELSE = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const POSIX_REGEX = 57436
const POSIX_REGEX_CI = 57437
const POSIX_NOT_REGEX = 57438
const POSIX_NOT_REGEX_CI = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const GRANT = 57457
const REVOKE = 57458
const SCHEMA = 57459
const TABLE = 57460
const INDEX = 57461
const MATERIALIZED = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const PRIMARY = 57467
const COLUMN = 57468
const CONSTRAINT = 57469
const REFERENCES = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const FOREIGN = 57473
const KEY_BLOCK_SIZE = 57474
const POLICY = 57475
const WHILE = 57476
const EXTENSION = 57477
const EXCLUDE = 57478
const UNIQUE = 57479
const KEY = 57480
const SHOW = 57481
const DESCRIBE = 57482
const EXPLAIN = 57483
const DATE = 57484
const ESCAPE = 57485
const REPAIR = 57486
const OPTIMIZE = 57487
const TRUNCATE = 57488
const EXEC = 57489
const EXECUTE = 57490
const MAXVALUE = 57491
const PARTITION = 57492
const REORGANIZE = 57493
const LESS = 57494
const THAN = 57495
const PROCEDURE = 57496
const TRIGGER = 57497
const TYPE = 57498
const RETURN = 57499
const STATUS = 57500
const VARIABLES = 57501
const RESTRICT = 57502
const CASCADE = 57503
const NO = 57504
const ACTION = 57505
const PERMISSIVE = 57506
const RESTRICTIVE = 57507
const PUBLIC = 57508
const CURRENT_USER = 57509
const SESSION_USER = 57510
const PAD_INDEX = 57511
const FILLFACTOR = 57512
const IGNORE_DUP_KEY = 57513
const STATISTICS_NORECOMPUTE = 57514
const STATISTICS_INCREMENTAL = 57515
const ALLOW_ROW_LOCKS = 57516
const ALLOW_PAGE_LOCKS = 57517
const DISTANCE = 57518
const M = 57519
const EUCLIDEAN = 57520
const COSINE = 57521
const BEFORE = 57522
const AFTER = 57523
const EACH = 57524
const ROW = 57525
const SCROLL = 57526
const CURSOR = 57527
const OPEN = 57528
const CLOSE = 57529
const FETCH = 57530
const PRIOR = 57531
const FIRST = 57532
const LAST = 57533
const DEALLOCATE = 57534
const INSTEAD = 57535
const OF = 57536
const OUTPUT = 57537
const HANDLER = 57538
const CONTINUE = 57539
const EXIT = 57540
const SQLEXCEPTION = 57541
const SQLWARNING = 57542
const SQLSTATE = 57543
const FOUND = 57544
const DEFERRABLE = 57545
const INITIALLY = 57546
const IMMEDIATE = 57547
const DEFERRED = 57548
const CONCURRENTLY = 57549
const ASYNC = 57550
const SQL = 57551
const SECURITY = 57552
const BEGIN = 57553
const START = 57554
const TRANSACTION = 57555
const COMMIT = 57556
const ROLLBACK = 57557
const BIT = 57558
const TINYINT = 57559
const SMALLINT = 57560
const SMALLSERIAL = 57561
const MEDIUMINT = 57562
const INT = 57563
const INTEGER = 57564
const SERIAL = 57565
const BIGINT = 57566
const BIGSERIAL = 57567
const INTNUM = 57568
const REAL = 57569
const DOUBLE = 57570
const PRECISION = 57571
const FLOAT_TYPE = 57572
const DECIMAL = 57573
const NUMERIC = 57574
const SMALLMONEY = 57575
const MONEY = 57576
const TIME = 57577
const TIMESTAMP = 57578
const DATETIME = 57579
const YEAR = 57580
const DATETIMEOFFSET = 57581
const DATETIME2 = 57582
const SMALLDATETIME = 57583
const CHAR = 57584
const VARCHAR = 57585
const VARYING = 57586
const BOOL = 57587
const CHARACTER = 57588
const VARBINARY = 57589
const NCHAR = 57590
const NVARCHAR = 57591
const NTEXT = 57592
const UUID = 57593
const TEXT = 57594
const TINYTEXT = 57595
const MEDIUMTEXT = 57596
const LONGTEXT = 57597
const CITEXT = 57598
const TSTZRANGE = 57599
const TSRANGE = 57600
const INT4RANGE = 57601
const INT8RANGE = 57602
const NUMRANGE = 57603
const DATERANGE = 57604
const BLOB = 57605
const TINYBLOB = 57606
const MEDIUMBLOB = 57607
const LONGBLOB = 57608
const JSON = 57609
const JSONB = 57610
const ENUM = 57611
const GEOMETRY = 57612
const POINT = 57613
const LINESTRING = 57614
const POLYGON = 57615
const GEOMETRYCOLLECTION = 57616
const MULTIPOINT = 57617
const MULTILINESTRING = 57618
const MULTIPOLYGON = 57619
const VECTOR = 57620
const VARIADIC = 57621
const ARRAY = 57622
const NOW = 57623
const GETDATE = 57624
const BPCHAR = 57625
const TEXT_PATTERN_OPS = 57626
const NULLX = 57627
const AUTO_INCREMENT = 57628
const APPROXNUM = 57629
const SIGNED = 57630
const UNSIGNED = 57631
const ZEROFILL = 57632
const ZONE = 57633
const AUTOINCREMENT = 57634
const DATABASES = 57635
const TABLES = 57636
const VSCHEMA_TABLES = 57637
const EXTENDED = 57638
const FULL = 57639
const PROCESSLIST = 57640
const NAMES = 57641
const CHARSET = 57642
const GLOBAL = 57643
const SESSION = 57644
const ISOLATION = 57645
const LEVEL = 57646
const READ = 57647
const WRITE = 57648
const ONLY = 57649
const REPEATABLE = 57650
const COMMITTED = 57651
const UNCOMMITTED = 57652
const SERIALIZABLE = 57653
const NEW = 57654
const CONCAT_NULL_YIELDS_NULL = 57655
const CURSOR_CLOSE_ON_COMMIT = 57656
const QUOTED_IDENTIFIER = 57657
const ARITHABORT = 57658
const FMTONLY = 57659
const NOCOUNT = 57660
const NOEXEC = 57661
const NUMERIC_ROUNDABORT = 57662
const ANSI_DEFAULTS = 57663
const ANSI_NULL_DFLT_OFF = 57664
const ANSI_NULL_DFLT_ON = 57665
const ANSI_NULLS = 57666
const ANSI_PADDING = 57667
const ANSI_WARNINGS = 57668
const FORCEPLAN = 57669
const SHOWPLAN_ALL = 57670
const SHOWPLAN_TEXT = 57671
const SHOWPLAN_XML = 57672
const IMPLICIT_TRANSACTIONS = 57673
const REMOTE_PROC_TRANSACTIONS = 57674
const XACT_ABORT = 57675
const CURRENT_TIMESTAMP = 57676
const DATABASE = 57677
const CURRENT_DATE = 57678
const CURRENT_TIME = 57679
const LOCALTIME = 57680
const LOCALTIMESTAMP = 57681
const UTC_DATE = 57682
const UTC_TIME = 57683
const UTC_TIMESTAMP = 57684
const REPLACE = 57685
const CONVERT = 57686
const CAST = 57687
const SUBSTR = 57688
const SUBSTRING = 57689
const GROUP_CONCAT = 57690
const SEPARATOR = 57691
const INHERIT = 57692
const LEAD = 57693
const LAG = 57694
const MATCH = 57695
const AGAINST = 57696
const BOOLEAN = 57697
const LANGUAGE = 57698
const WITH = 57699
const WITHOUT = 57700
const PARSER = 57701
const QUERY = 57702
const EXPANSION = 57703
const UNUSED = 57704
const VIRTUAL = 57705
const STORED = 57706
const GENERATED = 57707
const ALWAYS = 57708
const IDENTITY = 57709
const SEQUENCE = 57710
const INCREMENT = 57711
const MINVALUE = 57712
const CACHE = 57713
const CYCLE = 57714
const OWNED = 57715
const NONE = 57716
const CLUSTERED = 57717
const NONCLUSTERED = 57718
const REPLICATION = 57719
const COLUMNSTORE = 57720
const INCLUDE = 57721
const HOLDLOCK = 57722
const NOLOCK = 57723
const NOWAIT = 57724
const PAGLOCK = 57725
const ROWLOCK = 57726
const TABLOCK = 57727
const UPDLOCK = 57728
const READUNCOMMITTED = 57729
const DEFINER = 57730
const INVOKER = 57731
const TYPECAST = 57732
const CHECK = 57733
const OVER = 57734

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"COLUMNS_UPDATED",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"NO_ELSE",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"END",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"GRANT",
	"REVOKE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"EXTENSION",
	"EXCLUDE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"EXEC",
	"EXECUTE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"RETURN",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"DISTANCE",
	"M",
	"EUCLIDEAN",
	"COSINE",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"OUTPUT",
	"HANDLER",
	"CONTINUE",
	"EXIT",
	"SQLEXCEPTION",
	"SQLWARNING",
	"SQLSTATE",
	"FOUND",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"ASYNC",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"TSTZRANGE",
	"TSRANGE",
	"INT4RANGE",
	"INT8RANGE",
	"NUMRANGE",
	"DATERANGE",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VECTOR",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLOCK",
	"UPDLOCK",
	"READUNCOMMITTED",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 9,
	136, 553,
	-2, 257,
	-1, 67,
	123, 962,
	-2, 956,
	-1, 68,
	123, 963,
	-2, 876,
	-1, 334,
	123, 966,
	-2, 960,
	-1, 335,
	123, 963,
	-2, 961,
	-1, 504,
	61, 522,
	-2, 519,
	-1, 534,
	123, 964,
	-2, 369,
	-1, 674,
	123, 964,
	-2, 369,
	-1, 695,
	297, 973,
	-2, 864,
	-1, 749,
	297, 973,
	-2, 593,
	-1, 785,
	5, 59,
	-2, 26,
	-1, 791,
	5, 59,
	-2, 28,
	-1, 947,
	297, 973,
	-2, 593,
	-1, 1121,
	297, 973,
	-2, 457,
	-1, 1197,
	297, 973,
	-2, 593,
	-1, 1261,
	297, 973,
	-2, 864,
	-1, 1383,
	5, 60,
	-2, 726,
	-1, 1476,
	5, 59,
	-2, 27,
	-1, 1492,
	202, 87,
	-2, 649,
	-1, 1530,
	297, 973,
	-2, 237,
	-1, 1531,
	297, 973,
	-2, 237,
	-1, 1752,
	90, 958,
	-2, 946,
	-1, 1855,
	57, 73,
	59, 73,
	-2, 75,
	-1, 2043,
	5, 59,
	-2, 915,
	-1, 2068,
	5, 59,
	-2, 82,
	-1, 2113,
	59, 1109,
	60, 1109,
	-2, 579,
	-1, 2155,
	5, 60,
	-2, 916,
	-1, 2189,
	5, 59,
	-2, 918,
	-1, 2211,
	5, 60,
	-2, 919,
}

const yyPrivate = 57344

const yyLast = 12278

var yyAct = [...]int16{
	676, 2061, 657, 2164, 885, 2106, 1962, 1980, 2112, 686,
	2107, 36, 36, 798, 1212, 1877, 2103, 2030, 47, 492,
	1988, 1963, 35, 1712, 63, 64, 1890, 65, 76, 78,
	886, 1231, 2053, 1246, 38, 1234, 2066, 1942, 1749, 1889,
	1720, 1865, 91, 93, 1746, 1955, 1249, 1228, 108, 108,
	108, 108, 1499, 569, 1025, 1290, 1743, 1727, 187, 191,
	192, 777, 1235, 102, 1293, 1875, 1465, 1248, 1494, 1470,
	1731, 1060, 1385, 1739, 1171, 1013, 1764, 1603, 660, 39,
	825, 1096, 1050, 732, 1730, 1040, 301, 1376, 496, 214,
	1612, 1051, 913, 1002, 1332, 1151, 303, 738, 224, 225,
	223, 47, 305, 163, 163, 163, 163, 1120, 1073, 1232,
	1148, 1736, 167, 167, 167, 167, 647, 285, 269, 655,
	104, 998, 1457, 929, 631, 531, 656, 505, 322, 321,
	500, 232, 1205, 197, 970, 533, 540, 71, 1190, 236,
	252, 330, 1640, 1446, 271, 921, 668, 557, 227, 81,
	1114, 776, 15, 1447, 267, 973, 853, 863, 864, 856,
	857, 858, 859, 860, 861, 862, 855, 1292, 1842, 865,
	73, 736, 70, 739, 67, 865, 534, 535, 536, 538,
	37, 855, 1206, 639, 865, 541, 539, 549, 550, 503,
	310, 311, 83, 210, 638, 640, 831, 1880, 723, 213,
	2212, 216, 217, 317, 318, 331, 108, 2144, 222, 2209,
	193, 1820, 195, 720, 956, 166, 166, 166, 166, 506,
	507, 482, 483, 537, 334, 207, 470, 331, 529, 1291,
	84, 85, 2091, 73, 820, 70, 634, 1674, 1675, 67,
	499, 70, 1337, 329, 287, 288, 289, 290, 1178, 1179,
	229, 1328, 581, 582, 519, 2062, 2202, 1709, 270, 53,
	2143, 163, 1336, 53, 504, 490, 1167, 1654, 551, 468,
	167, 2090, 733, 1365, 1800, 1803, 86, 164, 164, 164,
	164, 2136, 54, 249, 55, 1891, 54, 1892, 55, 863,
	864, 856, 857, 858, 859, 860, 861, 862, 855, 1998,
	309, 865, 2137, 2138, 1786, 315, 985, 319, 320, 589,
	2079, 984, 559, 2078, 327, 845, 2080, 734, 273, 471,
	1999, 2000, 53, 577, 475, 548, 900, 477, 53, 605,
	480, 481, 580, 633, 1647, 286, 842, 841, 278, 1878,
	1880, 573, 574, 575, 576, 54, 1161, 55, 469, 992,
	523, 54, 275, 55, 843, 281, 276, 1638, 283, 768,
	854, 853, 863, 864, 856, 857, 858, 859, 860, 861,
	862, 855, 767, 166, 865, 525, 73, 545, 70, 547,
	546, 293, 294, 295, 296, 297, 304, 1402, 298, 1400,
	586, 2008, 1480, 561, 542, 194, 60, 564, 300, 567,
	568, 858, 859, 860, 861, 862, 855, 2084, 2083, 865,
	2011, 543, 548, 2075, 544, 2012, 1742, 56, 1883, 588,
	603, 56, 843, 2009, 593, 594, 595, 246, 326, 1676,
	1022, 2025, 1819, 1479, 1821, 164, 854, 853, 863, 864,
	856, 857, 858, 859, 860, 861, 862, 855, 1909, 641,
	865, 506, 507, 1905, 1047, 1227, 37, 866, 1061, 1741,
	1956, 604, 2186, 866, 545, 53, 547, 546, 841, 844,
	642, 188, 866, 608, 609, 1618, 37, 36, 1597, 36,
	56, 553, 552, 808, 61, 843, 56, 837, 54, 331,
	55, 1613, 1614, 842, 841, 1639, 632, 1525, 198, 612,
	1932, 614, 809, 856, 857, 858, 859, 860, 861, 862,
	855, 843, 563, 865, 51, 52, 834, 722, 51, 52,
	506, 507, 794, 795, 616, 522, 866, 628, 247, 638,
	1020, 725, 521, 551, 619, 1680, 286, 844, 516, 37,
	957, 849, 501, 1918, 852, 1670, 553, 552, 1682, 1160,
	867, 868, 869, 870, 871, 872, 873, 630, 850, 851,
	848, 874, 875, 876, 877, 854, 853, 863, 864, 856,
	857, 858, 859, 860, 861, 862, 855, 51, 52, 865,
	1337, 1812, 1379, 51, 52, 1329, 1330, 1908, 228, 866,
	2089, 779, 822, 37, 67, 528, 70, 1989, 1677, 822,
	844, 785, 2203, 791, 799, 1613, 1614, 331, 804, 1495,
	1496, 618, 36, 1992, 36, 753, 579, 810, 756, 617,
	40, 759, 760, 56, 512, 999, 844, 583, 331, 643,
	786, 1357, 786, 800, 805, 1740, 806, 742, 629, 189,
	190, 1331, 828, 719, 2099, 803, 632, 721, 2165, 2166,
	2167, 2168, 2169, 2170, 2171, 2172, 513, 726, 735, 542,
	724, 248, 866, 1526, 1527, 1528, 815, 1952, 737, 502,
	845, 510, 511, 1191, 66, 514, 199, 200, 82, 544,
	249, 755, 634, 53, 1006, 37, 811, 611, 786, 201,
	247, 476, 597, 37, 1791, 845, 62, 866, 788, 248,
	1263, 1252, 1251, 780, 781, 2026, 54, 839, 55, 37,
	41, 1193, 1253, 796, 842, 841, 37, 830, 249, 2065,
	51, 52, 37, 2064, 95, 1254, 42, 842, 841, 799,
	880, 797, 843, 813, 801, 96, 98, 778, 866, 802,
	108, 2063, 954, 97, 59, 843, 90, 790, 1993, 1991,
	1990, 58, 812, 331, 57, 1678, 1679, 1681, 1683, 1684,
	75, 620, 37, 2158, 80, 934, 1041, 1042, 835, 1981,
	1983, 884, 901, 92, 779, 989, 1392, 1824, 1391, 633,
	744, 746, 479, 779, 799, 632, 826, 827, 829, 889,
	890, 979, 2028, 1894, 1004, 163, 77, 996, 842, 841,
	1686, 866, 94, 965, 167, 1194, 904, 903, 1019, 980,
	752, 606, 1021, 274, 952, 1814, 843, 14, 842, 841,
	632, 206, 204, 786, 972, 977, 978, 842, 841, 762,
	935, 571, 570, 1247, 1053, 1658, 843, 1699, 722, 632,
	654, 56, 79, 1259, 733, 843, 997, 844, 950, 923,
	924, 925, 926, 927, 928, 1982, 1265, 1266, 1074, 487,
	844, 486, 961, 542, 733, 46, 1261, 866, 823, 485,
	2081, 279, 9, 12, 13, 2051, 1853, 1893, 10, 11,
	1351, 1350, 981, 224, 983, 1102, 1410, 990, 763, 734,
	1111, 1111, 1108, 845, 1701, 1255, 1256, 1258, 1349, 1113,
	1058, 1257, 1005, 1152, 331, 331, 1419, 166, 73, 734,
	70, 1348, 842, 841, 1044, 786, 224, 1440, 1153, 1048,
	778, 786, 934, 334, 1347, 988, 786, 1075, 1043, 778,
	843, 844, 1016, 1346, 995, 1700, 842, 841, 51, 52,
	842, 841, 1115, 1116, 1039, 1345, 1344, 842, 841, 1343,
	1342, 844, 36, 1340, 843, 842, 841, 1656, 843, 37,
	844, 1849, 1054, 1134, 1850, 843, 230, 1229, 1057, 164,
	1152, 498, 1127, 843, 1174, 1049, 1192, 1625, 1624, 1046,
	1117, 1118, 211, 1065, 1067, 1068, 1147, 935, 1623, 1045,
	1100, 1066, 497, 282, 779, 779, 284, 53, 209, 788,
	498, 1263, 1252, 1251, 884, 208, 203, 36, 624, 1109,
	1112, 955, 1475, 1253, 498, 1230, 518, 498, 625, 1269,
	54, 1169, 55, 1172, 1173, 1080, 1254, 509, 1604, 1226,
	842, 841, 1818, 1604, 1216, 1198, 1756, 1199, 1076, 1078,
	1079, 1077, 1182, 622, 1807, 844, 1186, 1806, 843, 1605,
	740, 741, 1264, 623, 1605, 1659, 632, 1615, 1798, 845,
	1366, 1367, 1368, 968, 2135, 1145, 1146, 967, 562, 844,
	517, 1606, 562, 844, 1386, 1125, 1387, 1388, 1334, 1602,
	844, 2178, 1170, 508, 1184, 1431, 1430, 1074, 844, 37,
	677, 1110, 675, 679, 680, 681, 682, 1429, 1898, 566,
	678, 683, 2140, 565, 854, 853, 863, 864, 856, 857,
	858, 859, 860, 861, 862, 855, 1428, 1360, 865, 1427,
	1426, 1425, 1794, 845, 1424, 562, 987, 986, 37, 1352,
	1897, 959, 2074, 587, 1247, 585, 584, 1126, 556, 1926,
	778, 778, 902, 1341, 1259, 1207, 1208, 1097, 37, 1098,
	1193, 37, 982, 610, 2073, 56, 1075, 1265, 1266, 509,
	37, 626, 484, 844, 902, 578, 560, 1261, 854, 853,
	863, 864, 856, 857, 858, 859, 860, 861, 862, 855,
	524, 509, 865, 312, 37, 37, 1372, 999, 37, 1014,
	845, 845, 1192, 2196, 2195, 331, 1255, 1256, 1258, 1014,
	2194, 1859, 1257, 1338, 779, 632, 88, 2181, 901, 2131,
	845, 2157, 845, 1398, 334, 88, 2092, 819, 2015, 1862,
	845, 1484, 1473, 1416, 1101, 1399, 819, 1911, 1397, 761,
	1476, 2096, 845, 1115, 1867, 1870, 1871, 1872, 1868, 718,
	1869, 1873, 819, 1910, 2054, 2055, 1418, 1860, 1438, 1858,
	717, 786, 51, 52, 1492, 716, 1521, 1522, 1523, 786,
	715, 1530, 1014, 1831, 1928, 1485, 1456, 88, 1783, 1927,
	1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
	1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
	1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
	1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
	1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
	1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 632, 632,
	1448, 1474, 1453, 1463, 1598, 1454, 1450, 1472, 1601, 1451,
	1452, 1483, 1462, 1445, 1488, 1489, 1490, 644, 1497, 788,
	778, 819, 1781, 1264, 1532, 1455, 1394, 1395, 1626, 1396,
	632, 1356, 1780, 36, 727, 1777, 1776, 1401, 1486, 1403,
	1404, 1405, 819, 1771, 1406, 1407, 2041, 1408, 1409, 1533,
	515, 2042, 819, 1770, 743, 1631, 819, 1690, 1805, 1593,
	1594, 1600, 749, 750, 751, 1663, 1664, 1661, 1662, 819,
	1629, 509, 1769, 2179, 1187, 845, 866, 88, 1436, 819,
	1363, 1356, 1355, 819, 1211, 1014, 1210, 1014, 1177, 1106,
	845, 1628, 1607, 1608, 1609, 1610, 1611, 819, 1059, 819,
	818, 772, 771, 1630, 1619, 1620, 788, 789, 1458, 789,
	1689, 1627, 1617, 765, 766, 765, 764, 1134, 1622, 100,
	99, 2104, 1943, 1959, 2050, 1858, 1127, 1861, 1669, 1633,
	799, 1634, 1943, 1668, 1667, 1666, 1134, 1665, 2188, 1660,
	866, 999, 1534, 1693, 1644, 1127, 1461, 840, 1621, 1478,
	1460, 88, 836, 1862, 1641, 1862, 1648, 1704, 509, 1443,
	1364, 879, 881, 882, 883, 887, 1442, 1209, 331, 1642,
	2050, 1718, 892, 892, 892, 892, 892, 892, 892, 1202,
	1187, 1711, 1414, 1646, 1726, 1187, 1715, 749, 1649, 1412,
	1201, 1267, 1200, 1723, 602, 1757, 1183, 991, 905, 906,
	907, 908, 909, 910, 911, 912, 1015, 915, 1655, 917,
	918, 919, 920, 922, 922, 922, 922, 922, 922, 922,
	1721, 946, 947, 948, 949, 1722, 1729, 1703, 969, 1125,
	1413, 1765, 1765, 2050, 73, 963, 70, 1411, 1725, 1734,
	602, 2153, 788, 960, 769, 1796, 1755, 1688, 1125, 758,
	757, 754, 788, 601, 89, 1696, 602, 88, 87, 1106,
	1713, 88, 1714, 1694, 1695, 1483, 632, 632, 1862, 88,
	1997, 1728, 1886, 1737, 1702, 1187, 1393, 1014, 1766, 1767,
	819, 1867, 1870, 1871, 1872, 1868, 845, 1869, 1873, 958,
	749, 1126, 770, 2104, 509, 833, 832, 73, 509, 70,
	789, 2126, 509, 2124, 509, 73, 2087, 70, 1929, 1762,
	1126, 276, 1464, 774, 773, 2054, 2055, 1707, 1774, 302,
	1596, 1595, 1459, 53, 1423, 306, 1362, 1772, 1773, 1359,
	1358, 854, 853, 863, 864, 856, 857, 858, 859, 860,
	861, 862, 855, 1327, 1204, 865, 54, 1203, 55, 1181,
	1168, 1167, 1166, 1165, 1164, 1163, 1162, 331, 892, 892,
	1055, 892, 892, 892, 892, 892, 892, 892, 892, 892,
	892, 892, 892, 892, 892, 892, 1018, 994, 1778, 1779,
	993, 951, 838, 1787, 784, 783, 53, 782, 748, 747,
	745, 728, 789, 645, 53, 803, 590, 1784, 887, 530,
	526, 495, 299, 887, 307, 308, 1333, 292, 1882, 54,
	108, 55, 291, 1809, 280, 331, 17, 54, 1851, 55,
	607, 1848, 1896, 1810, 1811, 2057, 1439, 775, 621, 592,
	591, 1813, 1815, 1816, 1817, 314, 313, 219, 202, 786,
	1269, 1840, 1839, 196, 43, 632, 1913, 2060, 101, 68,
	2059, 1841, 1808, 1974, 1856, 1847, 1830, 1902, 1975, 1971,
	1970, 1972, 1835, 1175, 1632, 163, 1973, 48, 845, 1221,
	1222, 1887, 2182, 1884, 167, 74, 1881, 1825, 1874, 1900,
	2142, 56, 1828, 1941, 1734, 1904, 1836, 1832, 1833, 916,
	1197, 1483, 1844, 494, 1466, 1483, 1714, 184, 185, 186,
	1899, 572, 1914, 731, 1713, 1901, 1912, 1854, 1855, 1467,
	474, 1217, 2151, 854, 853, 863, 864, 856, 857, 858,
	859, 860, 861, 862, 855, 473, 1976, 865, 1871, 1872,
	472, 74, 224, 328, 1964, 1041, 1042, 74, 221, 74,
	74, 220, 1741, 1713, 56, 1225, 74, 1917, 1394, 730,
	48, 1108, 56, 600, 598, 1723, 1994, 331, 1691, 1218,
	1949, 596, 1219, 1149, 1697, 331, 1930, 1951, 1931, 205,
	1986, 1958, 36, 1915, 1885, 1768, 1154, 166, 51, 52,
	786, 892, 892, 892, 1012, 1977, 793, 1948, 892, 892,
	892, 892, 1936, 1960, 2006, 637, 1213, 2149, 1996, 1940,
	36, 1995, 1934, 2004, 1966, 1967, 1734, 1969, 1822, 1214,
	999, 1734, 1734, 1734, 1734, 1734, 2148, 1965, 2, 2005,
	1968, 2098, 2027, 1946, 1458, 1734, 1197, 1761, 1483, 1760,
	2043, 1844, 892, 866, 44, 1957, 1759, 1758, 74, 164,
	1961, 51, 52, 74, 613, 74, 74, 1673, 1672, 51,
	52, 478, 74, 1354, 335, 2067, 74, 74, 2204, 786,
	1698, 2068, 74, 636, 635, 74, 1353, 520, 74, 74,
	2049, 2058, 323, 324, 325, 1001, 493, 1003, 1857, 2035,
	807, 2017, 1844, 1008, 1017, 1009, 1010, 1011, 1, 975,
	786, 1498, 1734, 19, 2076, 2047, 18, 2029, 1007, 331,
	2018, 316, 2082, 2032, 2033, 73, 1384, 70, 1734, 899,
	672, 2010, 224, 74, 1964, 2114, 2067, 74, 2105, 2110,
	1907, 224, 2108, 1964, 658, 2163, 2069, 1714, 789, 1987,
	1782, 1493, 1738, 1946, 2115, 2034, 789, 2093, 1491, 2100,
	1524, 1994, 2121, 1616, 1723, 1723, 555, 254, 786, 2101,
	2102, 2046, 2117, 2048, 1441, 527, 21, 74, 36, 1708,
	1477, 2132, 74, 74, 74, 792, 599, 2071, 1599, 1023,
	821, 1531, 1721, 237, 2134, 226, 264, 1722, 2085, 2086,
	2141, 814, 267, 268, 2146, 488, 45, 16, 1713, 1827,
	1339, 1829, 2152, 238, 53, 799, 235, 1834, 799, 799,
	799, 234, 2177, 2160, 233, 231, 558, 255, 2162, 272,
	277, 2173, 2174, 2175, 112, 866, 2176, 54, 114, 55,
	113, 2095, 262, 111, 250, 110, 107, 105, 2114, 2192,
	106, 2189, 251, 2108, 2187, 103, 2191, 1744, 2118, 1895,
	2119, 615, 2120, 73, 1189, 70, 2193, 2115, 878, 788,
	2184, 1263, 1252, 1251, 2200, 2077, 1751, 2111, 1469, 2147,
	786, 2097, 1844, 1253, 2205, 2206, 1417, 1150, 2108, 659,
	2207, 1064, 2208, 671, 670, 224, 1254, 1964, 669, 2040,
	1483, 2210, 1916, 847, 1733, 1852, 1866, 1864, 892, 892,
	1863, 966, 2056, 258, 786, 253, 263, 2052, 1732, 1802,
	2024, 1220, 1706, 1260, 1250, 260, 259, 1000, 1223, 8,
	1262, 1245, 2161, 7, 1483, 6, 67, 215, 70, 5,
	1946, 4, 892, 892, 892, 892, 1244, 1243, 1242, 1937,
	1714, 2007, 53, 1938, 1939, 1241, 1239, 1240, 493, 788,
	1237, 1263, 1252, 1251, 1635, 1238, 1236, 1215, 787, 3,
	0, 0, 56, 1253, 0, 54, 0, 55, 1685, 1714,
	649, 0, 0, 0, 0, 0, 1254, 0, 218, 854,
	853, 863, 864, 856, 857, 858, 859, 860, 861, 862,
	855, 0, 74, 865, 1247, 0, 788, 0, 1263, 1252,
	1251, 50, 0, 0, 1259, 0, 0, 0, 0, 0,
	1253, 1735, 0, 0, 0, 53, 0, 1265, 1266, 0,
	0, 2013, 2014, 1254, 0, 0, 37, 1261, 49, 0,
	0, 1845, 0, 0, 0, 0, 0, 0, 54, 0,
	55, 1103, 1104, 1105, 1107, 0, 0, 0, 0, 0,
	74, 74, 74, 0, 0, 0, 1255, 1256, 1258, 51,
	52, 74, 1257, 0, 256, 0, 493, 0, 0, 73,
	257, 70, 0, 0, 0, 1155, 1156, 1157, 1158, 0,
	1159, 74, 0, 0, 1247, 0, 0, 493, 684, 788,
	0, 1263, 1252, 1251, 1259, 0, 0, 0, 0, 0,
	56, 0, 0, 1253, 0, 0, 0, 1265, 1266, 0,
	0, 1176, 0, 69, 72, 53, 1254, 1261, 73, 1775,
	70, 0, 0, 0, 0, 0, 0, 0, 1185, 0,
	1188, 1247, 0, 0, 0, 1195, 1196, 0, 54, 0,
	55, 1259, 0, 265, 0, 266, 1255, 1256, 1258, 0,
	1268, 0, 1257, 0, 1265, 1266, 892, 0, 53, 0,
	0, 0, 1224, 0, 1261, 0, 0, 0, 0, 261,
	72, 1484, 0, 56, 0, 1801, 72, 0, 72, 72,
	0, 54, 0, 55, 0, 72, 69, 0, 0, 0,
	0, 0, 212, 1255, 1256, 1258, 0, 51, 52, 1257,
	0, 0, 0, 0, 0, 0, 0, 53, 646, 0,
	0, 0, 493, 1264, 1361, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 1247, 0, 729, 0, 0, 0,
	54, 0, 55, 74, 1259, 74, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 1265, 1266, 0,
	74, 0, 0, 0, 0, 0, 1876, 1261, 0, 1380,
	1381, 0, 0, 1953, 0, 0, 1383, 0, 0, 0,
	51, 52, 0, 56, 0, 1389, 1390, 72, 0, 0,
	0, 866, 72, 0, 72, 72, 1255, 1256, 1258, 0,
	0, 72, 1257, 336, 0, 336, 72, 0, 50, 0,
	0, 72, 0, 1264, 72, 1415, 0, 72, 72, 0,
	0, 1421, 892, 0, 0, 892, 56, 892, 0, 892,
	0, 892, 892, 37, 0, 49, 0, 1432, 1433, 0,
	1434, 1435, 0, 0, 824, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 846, 0,
	1264, 0, 72, 1482, 888, 0, 554, 0, 0, 0,
	0, 0, 0, 335, 493, 56, 0, 0, 0, 0,
	51, 52, 0, 0, 0, 0, 0, 0, 1735, 0,
	0, 0, 0, 1735, 1735, 1735, 1735, 1735, 0, 0,
	0, 0, 0, 0, 0, 914, 72, 1876, 248, 1984,
	2150, 72, 72, 72, 240, 0, 239, 0, 243, 244,
	247, 0, 53, 51, 52, 0, 241, 249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 55, 0, 0,
	0, 0, 0, 1264, 788, 0, 1263, 1252, 1251, 0,
	0, 0, 0, 74, 74, 0, 0, 0, 1253, 0,
	0, 0, 51, 52, 1735, 0, 0, 0, 0, 0,
	0, 1254, 0, 0, 0, 0, 2044, 2045, 1289, 0,
	1735, 0, 0, 0, 0, 1378, 0, 0, 0, 0,
	0, 0, 0, 1843, 854, 853, 863, 864, 856, 857,
	858, 859, 860, 861, 862, 855, 0, 789, 865, 0,
	854, 853, 863, 864, 856, 857, 858, 859, 860, 861,
	862, 855, 0, 0, 865, 0, 1717, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 1056, 0, 0, 0,
	0, 1062, 1063, 0, 0, 0, 0, 0, 0, 1377,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 2109, 0, 789, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 2127, 2128, 2129, 888, 0, 1259,
	0, 0, 888, 0, 0, 1671, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 1119, 1144, 0,
	0, 1687, 1261, 0, 74, 0, 0, 0, 0, 0,
	0, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1705, 891, 893, 894, 895, 896, 897, 898, 0,
	0, 1255, 1256, 1258, 0, 0, 0, 1257, 0, 0,
	0, 0, 0, 0, 335, 0, 1180, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 1484, 51, 52, 0,
	242, 0, 0, 0, 2109, 0, 0, 2190, 0, 554,
	72, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 854, 853, 863, 864, 856, 857, 858, 859, 860,
	861, 862, 855, 0, 0, 865, 0, 0, 0, 2109,
	72, 789, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 1289,
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 788, 0, 1263,
	1252, 1251, 0, 0, 0, 0, 866, 0, 1264, 0,
	1788, 1253, 1789, 1790, 0, 0, 1382, 1792, 1793, 1795,
	1797, 1799, 866, 0, 1254, 0, 0, 0, 1069, 0,
	0, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 0, 0, 976, 976,
	976, 0, 0, 1823, 0, 0, 0, 0, 1716, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 0, 72, 0, 0, 0, 0, 1954,
	0, 554, 0, 0, 0, 1437, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 532, 0,
	0, 67, 0, 534, 535, 536, 538, 0, 0, 0,
	0, 0, 541, 539, 549, 550, 0, 0, 0, 0,
	0, 0, 0, 1468, 1471, 0, 0, 788, 0, 1263,
	1252, 1251, 1247, 0, 1903, 0, 0, 0, 0, 1481,
	0, 1253, 1259, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 0, 0, 1254, 1265, 1266, 1487, 0, 74,
	74, 0, 0, 0, 0, 1261, 0, 493, 0, 1529,
	1925, 914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 1026, 0, 0, 0, 1038, 0, 0,
	53, 0, 0, 1935, 1255, 1256, 1258, 1028, 0, 0,
	1257, 0, 336, 866, 976, 976, 0, 0, 976, 976,
	976, 0, 0, 54, 69, 55, 0, 0, 0, 0,
	0, 0, 788, 0, 1263, 1252, 1251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 0,
	1026, 0, 0, 1979, 1038, 976, 976, 976, 976, 1254,
	0, 1369, 1370, 1371, 1028, 0, 0, 0, 0, 1373,
	1374, 1375, 1247, 0, 0, 0, 1052, 0, 1052, 0,
	976, 0, 1259, 0, 0, 1027, 0, 0, 0, 0,
	0, 2016, 0, 0, 0, 1265, 1266, 2019, 2020, 2021,
	2022, 2023, 554, 554, 0, 1261, 0, 0, 0, 0,
	0, 0, 891, 1645, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 0, 0, 0, 1255, 1256, 1258, 0, 0, 1657,
	1257, 0, 1027, 0, 0, 0, 0, 0, 543, 548,
	74, 0, 0, 0, 0, 0, 0, 0, 56, 1484,
	0, 1264, 0, 0, 0, 0, 493, 1247, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1259, 1692, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 0, 0,
	1265, 1266, 0, 0, 0, 0, 0, 0, 1710, 0,
	1261, 545, 2088, 547, 546, 74, 74, 2094, 0, 0,
	0, 1953, 0, 0, 0, 74, 74, 0, 553, 552,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 1255,
	1256, 1258, 0, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 2130, 0, 0, 0, 0, 1289,
	888, 888, 0, 0, 1484, 51, 52, 976, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 962, 535,
	536, 538, 0, 2145, 0, 0, 0, 541, 539, 549,
	550, 0, 0, 0, 0, 0, 0, 2154, 2155, 2156,
	0, 1264, 0, 0, 0, 2159, 976, 0, 0, 0,
	0, 0, 74, 336, 0, 0, 976, 0, 0, 0,
	1024, 0, 554, 0, 0, 537, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 74, 74, 0,
	0, 1947, 74, 74, 74, 74, 74, 0, 0, 0,
	0, 2197, 2198, 2199, 74, 0, 74, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 493, 1335, 1636, 1637,
	0, 0, 27, 29, 493, 22, 72, 0, 1804, 0,
	0, 0, 0, 0, 2211, 0, 1264, 0, 23, 0,
	28, 0, 32, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 1650, 1651, 1652, 1653, 0, 0, 0, 0,
	24, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	1837, 1838, 1471, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 74,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 0, 0,
	0, 0, 0, 543, 548, 0, 0, 0, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2116, 0, 0, 0, 0, 0,
	0, 0, 0, 20, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 0, 545, 0, 547, 546,
	0, 0, 1944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 72,
	0, 0, 0, 0, 0, 788, 0, 1263, 1252, 1251,
	74, 0, 0, 2003, 0, 0, 0, 0, 26, 1253,
	0, 0, 0, 0, 0, 0, 1785, 0, 0, 0,
	30, 31, 1254, 33, 0, 0, 0, 2116, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 2031, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2038, 0, 2039, 1284, 1283, 0, 37, 0, 1282, 0,
	1285, 1286, 1287, 1288, 0, 0, 0, 2133, 1304, 0,
	0, 0, 0, 0, 1307, 1306, 1305, 0, 0, 1311,
	1312, 1313, 1314, 1316, 1315, 1279, 1280, 1281, 0, 0,
	0, 0, 1309, 1310, 0, 1308, 0, 0, 0, 0,
	1276, 1275, 0, 0, 1270, 1271, 1272, 1273, 0, 1274,
	0, 1277, 0, 0, 0, 0, 0, 0, 1278, 0,
	1247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 1323, 0, 1322,
	1326, 0, 0, 1265, 1266, 53, 0, 0, 0, 1324,
	0, 2122, 0, 1261, 2123, 0, 0, 2125, 0, 72,
	0, 0, 1919, 0, 0, 1920, 0, 1921, 54, 1922,
	55, 1923, 1924, 788, 0, 1263, 1252, 1251, 0, 0,
	0, 2139, 1255, 1256, 1258, 0, 0, 1253, 1257, 0,
	0, 0, 0, 0, 0, 976, 2031, 0, 0, 0,
	1254, 0, 0, 0, 0, 0, 0, 1233, 0, 888,
	0, 0, 0, 0, 72, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 1879, 2070, 0, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 0, 178,
	0, 0, 179, 180, 181, 183, 182, 0, 2183, 888,
	0, 0, 0, 0, 1300, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 0, 0, 1295, 1296, 1297, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 1247, 0,
	0, 1933, 0, 0, 0, 0, 0, 0, 1259, 0,
	1906, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 1264,
	0, 1261, 72, 0, 0, 0, 72, 72, 0, 0,
	69, 72, 72, 72, 72, 72, 1318, 1317, 1319, 1320,
	0, 0, 0, 1978, 0, 72, 0, 0, 0, 1985,
	1255, 1256, 1258, 0, 0, 0, 1257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2072, 0, 0, 0, 0,
	51, 52, 0, 1325, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 453, 442, 0, 401, 455, 369,
	389, 464, 391, 392, 427, 348, 410, 0, 386, 367,
	0, 0, 72, 372, 341, 381, 342, 370, 403, 0,
	368, 0, 444, 413, 0, 0, 0, 462, 72, 418,
	0, 0, 0, 0, 0, 405, 446, 408, 437, 400,
	428, 357, 417, 457, 387, 423, 458, 0, 0, 0,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 422, 452, 383, 354, 467, 0, 426, 340,
	420, 0, 0, 346, 349, 463, 450, 377, 376, 788,
	0, 1263, 1252, 1251, 0, 0, 404, 409, 433, 397,
	0, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 416, 0, 1254, 1264, 353, 347,
	69, 402, 0, 0, 0, 356, 0, 374, 434, 69,
	337, 0, 0, 440, 447, 399, 0, 0, 451, 396,
	395, 0, 0, 0, 0, 0, 0, 388, 333, 53,
	465, 0, 0, 454, 406, 445, 371, 382, 0, 378,
	0, 0, 0, 379, 380, 415, 429, 0, 0, 0,
	0, 2201, 54, 436, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 338, 375, 438,
	441, 361, 425, 350, 384, 431, 385, 407, 366, 1879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1247, 0, 0, 0, 0, 1745,
	0, 0, 0, 0, 1259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 1261, 0, 0,
	0, 0, 1753, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 1255, 1256, 1258, 0,
	0, 0, 1257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 56, 344, 365,
	448, 0, 0, 0, 0, 1754, 1752, 1748, 1747, 0,
	0, 0, 0, 424, 0, 0, 0, 0, 1750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 358, 359, 411, 412, 459, 460, 461, 435,
	355, 0, 362, 363, 0, 443, 0, 0, 0, 414,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 390, 339, 394, 0, 0, 0, 0, 0, 0,
	0, 351, 352, 0, 0, 398, 393, 419, 421, 430,
	439, 449, 456, 432, 51, 52, 453, 442, 0, 401,
	455, 369, 389, 464, 391, 392, 427, 348, 410, 0,
	386, 367, 0, 0, 0, 372, 341, 381, 342, 370,
	403, 0, 368, 0, 444, 413, 0, 0, 0, 462,
	0, 418, 0, 1264, 0, 0, 0, 405, 446, 408,
	437, 400, 428, 357, 417, 457, 387, 423, 458, 0,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 452, 383, 354, 467, 0,
	426, 340, 420, 0, 0, 346, 349, 463, 450, 377,
	376, 788, 0, 1263, 1252, 1251, 0, 0, 404, 409,
	433, 397, 0, 0, 0, 1253, 0, 0, 0, 0,
	0, 0, 0, 0, 373, 0, 416, 0, 1254, 0,
	353, 347, 0, 402, 0, 0, 0, 356, 0, 374,
	434, 0, 337, 0, 0, 440, 447, 399, 0, 0,
	451, 396, 395, 0, 0, 0, 0, 0, 0, 388,
	333, 53, 465, 0, 0, 454, 406, 445, 371, 382,
	0, 378, 0, 0, 0, 379, 380, 415, 429, 0,
	0, 0, 0, 2185, 54, 436, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 338,
	375, 438, 441, 361, 425, 350, 384, 431, 385, 407,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 0,
	0, 1888, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 1261,
	0, 0, 0, 0, 1753, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 1256,
	1258, 0, 0, 0, 1257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 56,
	344, 365, 448, 0, 0, 0, 0, 1754, 1752, 0,
	0, 0, 0, 0, 0, 424, 0, 0, 0, 0,
	1750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 364, 358, 359, 411, 412, 459, 460,
	461, 435, 355, 0, 362, 363, 0, 443, 0, 0,
	0, 414, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 390, 339, 394, 0, 0, 0, 0,
	0, 0, 0, 351, 352, 0, 0, 398, 393, 419,
	421, 430, 439, 449, 456, 432, 51, 52, 453, 442,
	0, 401, 455, 369, 389, 464, 391, 392, 427, 348,
	410, 0, 386, 367, 0, 0, 0, 372, 341, 381,
	342, 370, 403, 0, 368, 0, 444, 413, 0, 0,
	0, 462, 0, 418, 0, 1264, 0, 0, 0, 405,
	446, 408, 437, 400, 428, 357, 417, 457, 387, 423,
	458, 0, 0, 0, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 422, 452, 383, 354,
	467, 0, 426, 340, 420, 0, 0, 346, 349, 463,
	450, 377, 376, 788, 0, 1263, 1252, 1251, 0, 0,
	404, 409, 433, 397, 0, 0, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 416, 0,
	1254, 0, 353, 347, 0, 402, 0, 0, 0, 356,
	0, 374, 434, 0, 337, 0, 0, 440, 447, 399,
	0, 0, 451, 396, 395, 0, 0, 0, 0, 0,
	0, 388, 333, 53, 465, 0, 0, 454, 406, 445,
	371, 382, 0, 378, 0, 0, 0, 379, 380, 415,
	429, 0, 0, 0, 0, 2180, 54, 436, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 338, 375, 438, 441, 361, 425, 350, 384, 431,
	385, 407, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 1261, 0, 0, 0, 0, 1753, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1255, 1256, 1258, 0, 0, 0, 1257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 56, 344, 365, 448, 0, 0, 0, 0, 1754,
	1752, 0, 0, 0, 0, 0, 0, 424, 0, 0,
	0, 0, 1750, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 360, 364, 358, 359, 411, 412,
	459, 460, 461, 435, 355, 0, 362, 363, 0, 443,
	0, 0, 0, 414, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 390, 339, 394, 0, 0,
	0, 0, 0, 0, 0, 351, 352, 0, 0, 398,
	393, 419, 421, 430, 439, 449, 456, 432, 51, 52,
	453, 442, 0, 401, 455, 369, 389, 464, 391, 392,
	427, 348, 410, 0, 386, 367, 0, 0, 0, 372,
	341, 381, 342, 370, 403, 0, 368, 0, 444, 413,
	0, 144, 0, 462, 0, 418, 0, 1264, 0, 0,
	0, 405, 446, 408, 437, 400, 428, 357, 417, 457,
	387, 423, 458, 0, 0, 0, 67, 0, 70, 37,
	0, 109, 0, 0, 0, 0, 0, 0, 422, 452,
	383, 354, 467, 0, 426, 340, 420, 0, 0, 346,
	349, 463, 450, 377, 376, 0, 0, 0, 0, 0,
	0, 0, 404, 409, 433, 397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 373, 0,
	416, 0, 0, 0, 353, 347, 0, 402, 123, 0,
	153, 356, 0, 374, 434, 0, 337, 0, 0, 440,
	447, 399, 0, 0, 451, 396, 395, 0, 0, 0,
	0, 0, 0, 388, 333, 53, 465, 0, 0, 454,
	406, 445, 371, 382, 0, 378, 0, 145, 0, 379,
	380, 415, 429, 0, 0, 0, 0, 0, 54, 436,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 338, 375, 438, 441, 361, 425, 350,
	384, 431, 385, 407, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 0, 178, 165, 0, 179, 180, 181, 183, 182,
	146, 147, 148, 152, 150, 149, 151, 117, 119, 0,
	115, 118, 124, 120, 121, 122, 136, 125, 126, 127,
	128, 129, 138, 137, 139, 140, 141, 142, 130, 131,
	132, 133, 134, 135, 143, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 56, 344, 365, 448, 0, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 364, 358, 359,
	411, 412, 459, 460, 461, 435, 355, 0, 362, 363,
	0, 443, 0, 0, 0, 414, 0, 0, 0, 466,
	116, 0, 0, 0, 0, 0, 0, 390, 339, 394,
	0, 0, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 398, 393, 419, 421, 430, 439, 449, 456, 432,
	51, 52, 453, 442, 0, 401, 455, 369, 389, 464,
	391, 392, 427, 348, 410, 0, 386, 367, 0, 0,
	0, 372, 341, 381, 342, 370, 403, 0, 368, 0,
	444, 413, 0, 0, 0, 462, 0, 418, 0, 0,
	0, 0, 0, 405, 446, 408, 437, 400, 428, 357,
	417, 457, 387, 423, 458, 0, 0, 0, 37, 0,
	816, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	422, 452, 383, 354, 467, 0, 426, 340, 420, 0,
	0, 346, 349, 463, 450, 377, 376, 788, 0, 1263,
	1252, 1251, 0, 0, 404, 409, 433, 397, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 0, 416, 0, 1254, 0, 353, 347, 0, 402,
	930, 0, 945, 356, 0, 374, 434, 0, 337, 0,
	0, 440, 447, 399, 0, 0, 451, 396, 395, 0,
	0, 0, 0, 0, 0, 388, 333, 53, 465, 0,
	0, 454, 406, 445, 371, 382, 0, 378, 0, 932,
	0, 379, 380, 415, 429, 0, 0, 0, 0, 0,
	54, 436, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 338, 375, 438, 441, 361,
	425, 350, 384, 431, 385, 407, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1259, 942, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 0, 0, 1265, 1266, 0, 939, 938,
	0, 0, 944, 1099, 933, 1261, 0, 0, 0, 941,
	940, 0, 115, 931, 0, 0, 0, 0, 937, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1255, 1256, 1258, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 56, 344, 365, 448, 1233,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 0,
	0, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 364,
	358, 359, 411, 412, 459, 460, 461, 435, 355, 0,
	362, 363, 0, 443, 0, 0, 0, 414, 0, 0,
	0, 466, 116, 0, 0, 0, 0, 0, 0, 390,
	339, 394, 0, 0, 0, 0, 0, 0, 0, 351,
	352, 0, 0, 398, 393, 419, 421, 430, 439, 449,
	456, 432, 51, 52, 453, 442, 0, 401, 455, 369,
	389, 464, 391, 392, 427, 348, 410, 0, 386, 367,
	0, 0, 0, 372, 341, 381, 342, 370, 403, 0,
	368, 0, 444, 413, 0, 0, 0, 462, 0, 418,
	0, 1264, 0, 0, 0, 405, 446, 408, 437, 400,
	428, 357, 417, 457, 387, 423, 458, 0, 489, 0,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 422, 452, 383, 354, 467, 0, 426, 340,
	420, 0, 0, 346, 349, 463, 450, 377, 376, 788,
	0, 1263, 1252, 1251, 0, 0, 404, 409, 433, 397,
	0, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 416, 0, 1254, 0, 353, 347,
	0, 402, 930, 0, 945, 356, 0, 374, 434, 0,
	337, 0, 0, 440, 447, 399, 0, 0, 451, 396,
	395, 0, 0, 0, 0, 0, 0, 388, 333, 53,
	465, 0, 0, 454, 406, 445, 371, 382, 0, 378,
	0, 932, 0, 379, 380, 415, 429, 0, 0, 0,
	0, 0, 54, 436, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 338, 375, 438,
	441, 361, 425, 350, 384, 431, 385, 407, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1259, 942, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 0, 0, 1265, 1266, 0,
	939, 938, 0, 0, 944, 943, 933, 1261, 0, 0,
	0, 941, 940, 0, 115, 931, 0, 0, 0, 0,
	937, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1255, 1256, 1258, 0,
	0, 0, 1257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 56, 344, 365,
	448, 1724, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 358, 359, 411, 412, 459, 460, 461, 435,
	355, 0, 362, 363, 0, 443, 0, 0, 0, 414,
	0, 0, 0, 466, 116, 0, 0, 0, 0, 0,
	0, 390, 339, 394, 0, 0, 0, 0, 0, 0,
	0, 351, 352, 0, 0, 398, 393, 419, 421, 430,
	439, 449, 456, 432, 51, 52, 453, 442, 0, 401,
	455, 369, 389, 464, 391, 392, 427, 348, 410, 0,
	386, 367, 0, 0, 0, 372, 341, 381, 342, 370,
	403, 0, 368, 0, 444, 413, 0, 0, 0, 462,
	0, 418, 0, 1264, 0, 0, 0, 405, 446, 408,
	437, 400, 428, 357, 417, 457, 387, 423, 458, 0,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 452, 383, 354, 467, 0,
	426, 340, 420, 0, 0, 346, 349, 463, 450, 377,
	376, 788, 0, 1263, 1252, 1251, 0, 0, 404, 409,
	433, 397, 0, 0, 0, 1253, 0, 0, 0, 0,
	0, 0, 1826, 0, 373, 0, 416, 0, 1254, 0,
	353, 347, 0, 402, 0, 0, 0, 356, 0, 374,
	434, 0, 337, 0, 0, 440, 447, 399, 0, 0,
	451, 396, 395, 0, 0, 0, 0, 0, 0, 388,
	333, 53, 465, 0, 0, 454, 406, 445, 371, 382,
	0, 378, 0, 0, 0, 379, 380, 415, 429, 0,
	0, 0, 0, 1945, 54, 436, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 338,
	375, 438, 441, 361, 425, 350, 384, 431, 385, 407,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 1261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 1256,
	1258, 0, 0, 0, 1257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 56,
	344, 365, 448, 0, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 364, 358, 359, 411, 412, 459, 460,
	461, 435, 355, 0, 362, 363, 0, 443, 0, 0,
	0, 414, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 390, 339, 394, 0, 0, 0, 0,
	0, 0, 0, 351, 352, 0, 0, 398, 393, 419,
	421, 430, 439, 449, 456, 432, 51, 52, 453, 442,
	0, 401, 455, 369, 389, 464, 391, 392, 427, 348,
	410, 0, 386, 367, 0, 0, 0, 372, 341, 381,
	342, 370, 403, 0, 368, 0, 444, 413, 0, 0,
	0, 462, 0, 418, 0, 1264, 0, 0, 0, 405,
	446, 408, 437, 400, 428, 357, 417, 457, 387, 423,
	458, 0, 0, 0, 67, 0, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 422, 452, 383, 354,
	467, 0, 426, 340, 420, 0, 0, 346, 349, 463,
	450, 377, 376, 788, 0, 1263, 1252, 1251, 0, 0,
	404, 409, 433, 397, 0, 0, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 416, 0,
	1254, 0, 353, 347, 0, 402, 0, 0, 0, 356,
	0, 374, 434, 0, 337, 0, 0, 440, 447, 399,
	0, 0, 451, 396, 395, 0, 0, 0, 0, 0,
	0, 388, 333, 53, 465, 0, 0, 454, 406, 445,
	371, 382, 0, 378, 0, 0, 0, 379, 380, 415,
	429, 0, 0, 0, 0, 1846, 54, 436, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 338, 375, 438, 441, 361, 425, 350, 384, 431,
	385, 407, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 1261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1255, 1256, 1258, 0, 0, 0, 1257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 56, 344, 365, 448, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 360, 364, 358, 359, 411, 412,
	459, 460, 461, 435, 355, 0, 362, 363, 0, 443,
	0, 0, 0, 414, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 390, 339, 394, 0, 0,
	0, 0, 0, 0, 0, 351, 352, 0, 0, 398,
	393, 419, 421, 430, 439, 449, 456, 432, 51, 52,
	453, 442, 0, 401, 455, 369, 389, 464, 391, 392,
	427, 348, 410, 0, 386, 367, 0, 0, 0, 372,
	341, 381, 342, 370, 403, 0, 368, 0, 444, 413,
	0, 0, 0, 462, 0, 418, 0, 1264, 0, 0,
	0, 405, 446, 408, 437, 400, 428, 357, 417, 457,
	387, 423, 458, 0, 0, 0, 37, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 422, 452,
	383, 354, 467, 0, 426, 340, 420, 0, 0, 346,
	349, 463, 450, 377, 376, 627, 788, 0, 1263, 1252,
	1251, 0, 404, 409, 433, 397, 0, 0, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 373, 0,
	416, 0, 0, 1254, 353, 347, 0, 402, 0, 0,
	0, 356, 0, 374, 434, 0, 337, 0, 0, 440,
	447, 399, 0, 0, 451, 396, 395, 0, 0, 0,
	0, 0, 0, 388, 333, 53, 465, 0, 0, 454,
	406, 445, 371, 382, 0, 378, 0, 0, 0, 379,
	380, 415, 429, 0, 0, 0, 0, 0, 54, 436,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 338, 375, 438, 441, 361, 425, 350,
	384, 431, 385, 407, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 1266, 0, 0, 0, 0,
	0, 0, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1255, 1256, 1258, 0, 0, 0, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 343, 0,
	0, 0, 0, 56, 344, 365, 448, 0, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 364, 358, 359,
	411, 412, 459, 460, 461, 435, 355, 0, 362, 363,
	0, 443, 0, 0, 0, 414, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 390, 339, 394,
	0, 0, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 398, 393, 419, 421, 430, 439, 449, 456, 432,
	51, 52, 453, 442, 0, 401, 455, 369, 389, 464,
	391, 392, 427, 348, 410, 0, 386, 367, 0, 0,
	0, 372, 341, 381, 342, 370, 403, 0, 368, 0,
	444, 413, 0, 0, 0, 462, 0, 418, 0, 0,
	1264, 0, 0, 405, 446, 408, 437, 400, 428, 357,
	417, 457, 387, 423, 458, 0, 0, 0, 37, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	422, 452, 383, 354, 467, 0, 426, 340, 420, 0,
	0, 346, 349, 463, 450, 377, 376, 0, 0, 0,
	0, 0, 0, 0, 404, 409, 433, 397, 0, 0,
	1643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 0, 416, 0, 0, 0, 353, 347, 0, 402,
	0, 0, 0, 356, 0, 374, 434, 0, 337, 0,
	0, 440, 447, 399, 0, 0, 451, 396, 395, 1123,
	0, 0, 0, 0, 0, 388, 333, 53, 465, 0,
	0, 454, 406, 445, 371, 382, 0, 378, 0, 0,
	0, 379, 380, 415, 429, 0, 0, 0, 0, 0,
	54, 436, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 338, 375, 438, 441, 361,
	425, 350, 384, 431, 385, 407, 366, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 0, 178, 1128, 0, 179, 180, 181,
	183, 182, 1132, 0, 1124, 0, 1136, 1135, 1137, 1122,
	1139, 0, 0, 0, 1143, 1140, 1142, 1141, 0, 1138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1129, 1130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1131, 1133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 56, 344, 365, 448, 0,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 0,
	0, 424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 364,
	358, 359, 411, 412, 459, 460, 461, 435, 355, 0,
	362, 363, 0, 443, 0, 0, 0, 414, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 390,
	339, 394, 0, 0, 0, 0, 0, 0, 0, 351,
	352, 0, 0, 398, 393, 419, 421, 430, 439, 449,
	456, 432, 51, 52, 453, 2113, 0, 401, 455, 369,
	389, 464, 391, 392, 427, 348, 410, 0, 386, 367,
	0, 0, 0, 372, 341, 381, 342, 370, 403, 0,
	368, 0, 444, 413, 0, 0, 0, 462, 0, 418,
	0, 0, 0, 0, 0, 405, 446, 408, 437, 400,
	428, 357, 417, 457, 387, 423, 458, 509, 0, 0,
	37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 422, 452, 383, 354, 467, 0, 426, 340,
	420, 0, 0, 346, 349, 463, 450, 377, 376, 0,
	0, 0, 0, 0, 0, 0, 404, 409, 433, 397,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 416, 0, 0, 0, 353, 347,
	0, 402, 0, 0, 0, 356, 0, 374, 434, 0,
	337, 0, 0, 440, 447, 399, 0, 0, 451, 396,
	395, 0, 0, 0, 0, 0, 0, 388, 0, 53,
	465, 0, 0, 454, 406, 445, 371, 382, 0, 378,
	0, 0, 0, 379, 380, 415, 429, 0, 0, 0,
	0, 0, 54, 436, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 338, 375, 438,
	441, 361, 425, 350, 384, 431, 385, 407, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 0, 0, 56, 344, 365,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 364, 358, 359, 411, 412, 459, 460, 461, 435,
	355, 0, 362, 363, 0, 443, 0, 0, 0, 414,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 390, 339, 394, 0, 0, 0, 0, 0, 0,
	0, 351, 352, 0, 0, 398, 393, 419, 421, 430,
	439, 449, 456, 432, 51, 52, 453, 442, 0, 401,
	455, 369, 389, 464, 391, 392, 427, 348, 410, 0,
	386, 367, 0, 0, 0, 372, 341, 381, 342, 370,
	403, 0, 368, 0, 444, 413, 0, 0, 0, 462,
	0, 418, 0, 0, 0, 0, 0, 405, 446, 408,
	437, 400, 428, 357, 417, 457, 387, 423, 458, 0,
	0, 0, 73, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 452, 383, 354, 467, 0,
	426, 340, 420, 0, 0, 346, 349, 463, 450, 377,
	376, 0, 0, 0, 0, 0, 0, 0, 404, 409,
	433, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 373, 0, 416, 0, 0, 0,
	353, 347, 0, 402, 0, 0, 0, 356, 0, 374,
	434, 0, 337, 0, 0, 440, 447, 399, 0, 0,
	451, 396, 395, 0, 0, 0, 0, 0, 0, 388,
	0, 53, 465, 0, 0, 454, 406, 445, 371, 382,
	0, 378, 0, 0, 0, 379, 380, 415, 429, 0,
	0, 0, 0, 0, 54, 436, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 338,
	375, 438, 441, 361, 425, 350, 384, 431, 385, 407,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 0, 0, 0, 0, 56,
	344, 365, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 364, 358, 359, 411, 412, 459, 460,
	461, 435, 355, 0, 362, 363, 0, 443, 0, 0,
	0, 414, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 390, 339, 394, 0, 0, 0, 0,
	0, 0, 0, 351, 352, 0, 0, 398, 393, 419,
	421, 430, 439, 449, 456, 432, 51, 52, 453, 442,
	0, 401, 455, 369, 389, 464, 391, 392, 427, 348,
	410, 0, 386, 367, 0, 0, 0, 372, 341, 381,
	342, 370, 403, 0, 368, 0, 444, 413, 0, 0,
	0, 462, 0, 418, 0, 0, 0, 0, 0, 405,
	446, 408, 437, 400, 428, 357, 417, 457, 387, 423,
	458, 0, 0, 0, 37, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 422, 452, 383, 354,
	467, 0, 426, 340, 420, 0, 0, 346, 349, 463,
	450, 377, 376, 0, 0, 0, 0, 0, 0, 0,
	404, 409, 433, 397, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 416, 0,
	0, 0, 353, 347, 0, 402, 0, 0, 0, 356,
	0, 374, 434, 0, 337, 0, 0, 440, 447, 399,
	0, 0, 451, 396, 395, 0, 0, 0, 0, 0,
	0, 388, 0, 53, 465, 0, 0, 454, 406, 445,
	371, 382, 0, 378, 0, 0, 0, 379, 380, 415,
	429, 0, 0, 0, 0, 0, 54, 436, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 338, 375, 438, 441, 361, 425, 350, 384, 431,
	385, 407, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 56, 344, 365, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 360, 364, 358, 359, 411, 412,
	459, 460, 461, 435, 355, 0, 362, 363, 0, 443,
	0, 0, 0, 414, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 390, 339, 394, 0, 0,
	0, 0, 0, 652, 0, 351, 352, 0, 0, 398,
	393, 419, 421, 430, 439, 449, 456, 432, 51, 52,
	651, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 696, 0, 697, 0, 0, 0, 0, 0,
	0, 0, 687, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 67, 677, 674, 675, 679,
	680, 681, 682, 0, 0, 0, 678, 683, 549, 550,
	653, 0, 0, 0, 0, 648, 666, 0, 0, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 0, 712,
	0, 665, 0, 0, 1121, 662, 667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 788,
	0, 1263, 1252, 1251, 0, 710, 0, 0, 0, 0,
	0, 0, 0, 1253, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 1254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2036, 2037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 0, 178, 1128,
	0, 179, 180, 181, 183, 182, 1132, 0, 1124, 0,
	1136, 1135, 1137, 1122, 1139, 0, 0, 0, 1143, 1140,
	1142, 1141, 698, 1138, 1247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1259, 0, 0, 0, 1129, 1130,
	0, 0, 0, 0, 0, 0, 0, 1265, 1266, 0,
	714, 0, 699, 700, 0, 0, 0, 1261, 0, 1131,
	1133, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 1255, 1256, 1258, 0,
	0, 0, 1257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 711, 707, 708, 705,
	706, 704, 703, 702, 713, 689, 690, 691, 692, 694,
	0, 0, 553, 552, 693, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 0, 650, 0, 0,
	0, 0, 0, 0, 696, 0, 697, 0, 0, 51,
	52, 709, 0, 0, 687, 688, 0, 0, 0, 0,
	0, 0, 2001, 0, 509, 0, 0, 67, 677, 674,
	675, 679, 680, 681, 682, 0, 0, 0, 678, 683,
	549, 550, 653, 2002, 0, 0, 0, 648, 666, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 664, 0, 0, 652,
	0, 712, 0, 665, 0, 0, 661, 662, 667, 0,
	0, 0, 0, 1264, 971, 0, 651, 0, 0, 0,
	0, 650, 0, 0, 0, 0, 0, 710, 696, 0,
	697, 0, 0, 0, 0, 0, 53, 0, 687, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 67, 677, 674, 675, 679, 680, 681, 682, 54,
	0, 55, 678, 683, 549, 550, 653, 0, 0, 0,
	673, 648, 666, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 974, 0, 0, 0, 712, 0, 665, 0, 0,
	661, 662, 667, 0, 788, 0, 1263, 1252, 1251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1253, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 1254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 699, 700, 0, 842, 841, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 685, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 711, 707,
	708, 705, 706, 704, 703, 702, 713, 689, 690, 691,
	692, 694, 0, 0, 553, 552, 693, 0, 698, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 1261, 0, 0, 0, 714, 0, 699, 700,
	0, 51, 52, 709, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1255, 1256, 1258, 0, 0, 0, 1257, 0, 685,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1724, 0, 0, 0,
	0, 701, 711, 707, 708, 705, 706, 704, 703, 702,
	713, 689, 690, 691, 692, 694, 0, 0, 553, 552,
	693, 652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 651, 0,
	0, 0, 0, 650, 0, 0, 0, 0, 0, 0,
	696, 0, 697, 0, 0, 51, 52, 709, 0, 0,
	687, 688, 0, 0, 0, 0, 0, 0, 0, 0,
	509, 0, 845, 67, 677, 674, 675, 679, 680, 681,
	682, 0, 0, 0, 678, 683, 549, 550, 653, 0,
	0, 0, 0, 648, 666, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 664, 0, 0, 652, 0, 712, 1264, 665,
	0, 0, 661, 662, 667, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 0, 650, 0, 0,
	0, 0, 0, 710, 696, 0, 697, 0, 0, 0,
	0, 0, 53, 0, 687, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 67, 677, 674,
	675, 679, 680, 681, 682, 54, 0, 55, 678, 683,
	549, 550, 653, 0, 0, 0, 673, 648, 666, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 664, 974, 0, 0,
	0, 712, 0, 665, 0, 0, 661, 662, 667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 714, 0,
	699, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 711, 707, 708, 705, 706, 704,
	703, 702, 713, 689, 690, 691, 692, 694, 0, 0,
	553, 552, 693, 0, 698, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 699, 700, 0, 51, 52, 709,
	0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 685, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 711, 707,
	708, 705, 706, 704, 703, 702, 713, 689, 690, 691,
	692, 694, 0, 0, 553, 552, 693, 0, 0, 0,
	0, 0, 788, 0, 0, 652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 0, 650, 0, 0,
	0, 51, 52, 709, 696, 0, 697, 0, 0, 0,
	0, 0, 0, 0, 687, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 67, 677, 674,
	675, 679, 680, 681, 682, 0, 0, 0, 678, 683,
	549, 550, 653, 0, 0, 0, 0, 648, 666, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 664, 0, 0, 652,
	0, 712, 0, 665, 0, 0, 661, 662, 667, 0,
	788, 0, 1263, 1252, 1251, 0, 651, 0, 0, 0,
	0, 650, 0, 0, 1253, 0, 0, 710, 696, 0,
	697, 0, 0, 0, 0, 0, 53, 1254, 687, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 0,
	0, 67, 677, 674, 675, 679, 680, 681, 682, 54,
	0, 55, 678, 683, 549, 550, 653, 0, 0, 0,
	673, 648, 666, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 842, 841, 0, 0, 0, 0, 0,
	0, 1719, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 843, 0, 0, 0, 712, 0, 665, 0, 0,
	661, 662, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 1247, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 1259, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 55, 0, 0, 1265, 1266,
	0, 0, 0, 0, 673, 0, 0, 0, 1261, 0,
	0, 0, 714, 0, 699, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1255, 1256, 1258,
	0, 0, 0, 1257, 0, 685, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1724, 0, 0, 0, 0, 701, 711, 707,
	708, 705, 706, 704, 703, 702, 713, 689, 690, 691,
	692, 694, 0, 0, 553, 552, 693, 0, 698, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 699, 700,
	0, 51, 52, 709, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 711, 707, 708, 705, 706, 704, 703, 702,
	713, 689, 690, 691, 692, 694, 0, 0, 553, 552,
	693, 1070, 1071, 1072, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 687, 688,
	0, 0, 0, 0, 0, 51, 52, 709, 509, 0,
	0, 67, 677, 674, 675, 679, 680, 681, 682, 0,
	0, 0, 678, 683, 549, 550, 0, 0, 0, 0,
	0, 0, 666, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 0, 0, 0, 0, 712, 0, 665, 0, 0,
	661, 662, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 710, 696, 0, 697, 0, 0, 0, 0, 0,
	53, 0, 687, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 67, 677, 674, 675, 679,
	680, 681, 682, 54, 0, 55, 678, 683, 549, 550,
	0, 0, 0, 0, 673, 0, 666, 0, 0, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 0, 0, 712,
	0, 665, 0, 0, 661, 662, 667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 55,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 699, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 711, 707, 708, 705, 706, 704, 703, 702,
	713, 689, 690, 691, 692, 694, 0, 0, 553, 552,
	693, 0, 698, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	714, 0, 699, 700, 0, 51, 52, 709, 0, 0,
	0, 0, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 711, 707, 708, 705,
	706, 704, 703, 702, 713, 689, 690, 691, 692, 694,
	0, 0, 553, 552, 693, 0, 0, 0, 696, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 687, 688,
	0, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 67, 677, 674, 675, 679, 680, 681, 682, 51,
	52, 709, 678, 683, 549, 550, 0, 0, 0, 0,
	0, 0, 666, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	664, 0, 0, 0, 0, 712, 0, 665, 0, 0,
	661, 662, 667, 0, 788, 0, 1263, 1252, 1251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1253, 0,
	0, 710, 0, 0, 788, 0, 1263, 1252, 1251, 0,
	53, 1254, 0, 0, 0, 0, 0, 0, 1253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1254, 0, 54, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 843, 0, 842, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 37, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 1265, 1266, 0, 0, 0, 0, 0, 1259,
	0, 0, 1261, 0, 0, 123, 714, 153, 699, 700,
	0, 0, 1265, 1266, 0, 0, 0, 0, 56, 0,
	0, 0, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 1255, 1256, 1258, 0, 0, 0, 1257, 0, 685,
	844, 0, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 1255, 1256, 1258, 0, 0, 1724, 1257, 0, 0,
	844, 701, 711, 707, 708, 705, 706, 704, 703, 702,
	713, 689, 690, 691, 692, 694, 1763, 0, 553, 552,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 52, 709, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 0, 178,
	165, 0, 179, 180, 181, 183, 182, 146, 147, 148,
	152, 150, 149, 151, 117, 119, 0, 115, 118, 124,
	120, 121, 122, 136, 125, 126, 127, 128, 129, 138,
	137, 139, 140, 141, 142, 130, 131, 132, 133, 134,
	135, 143, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 0, 0, 0, 0, 964, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116,
}

var yyPact = [...]int16{
	746, -1000, -1000, -258, -1000, -1000, -1000, -1000, 1688, 3538,
	1124, 1124, 480, 574, 1718, 746, -1000, 2285, 618, 615,
	608, 258, 558, 1124, 533, 2328, 625, 655, 701, 537,
	-1000, -203, -162, -1000, -84, 1532, -1000, -1000, 1528, 611,
	-1000, 632, 661, 600, -1000, 1390, -1000, 5538, 5538, 5538,
	5538, -1000, -1000, -1000, -1000, -1000, -1000, 415, 1124, 1124,
	537, 168, 537, 1717, 479, 1712, 925, -1000, -1000, 699,
	-1000, 1874, 698, -1000, -1000, 537, -1000, 924, -1000, 917,
	-1000, 2328, 901, -1000, -1000, -1000, -1000, 2377, 1124, 2112,
	1974, 1711, 1845, -1000, 1842, -1000, 2328, 2185, 1124, 213,
	2582, 2081, -153, 12, -1000, -1000, -1000, -1000, -1000, 690,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1583, 77, 1686,
	1583, 1686, -1000, 1583, 1686, 72, 72, 72, 72, 72,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1684, 1679, -1000, 1583, 1583, 1583, 1583,
	1583, -1000, -1000, 1583, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1674, 1583, 1591, 140, 1597, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2081, 2081, 2081, 1678, 2328, 1124,
	1127, 1710, 1709, 2328, -202, 2328, 2328, 1994, -1000, -1000,
	-1000, 217, 2328, 1837, 7143, 5538, 8751, 2328, 1834, 1829,
	-1000, 1814, 2328, 552, -1000, 2328, 1970, 651, 2328, 2328,
	1124, 1099, 772, 764, -1000, 762, 6339, -1000, 1787, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1673, 936, 1124,
	387, 128, 1570, 525, 563, 520, 1319, 383, -1000, -1000,
	-1000, 997, -1000, 1124, -1000, 1988, -1000, -1000, 377, -1000,
	370, 890, 1117, 2328, 1672, 212, 1671, 3150, 1073, -1000,
	-265, -1000, 5, -1000, 1103, 72, 1060, 1583, -1000, 72,
	1038, 72, 72, -1000, -1000, 712, 1798, 712, 712, 712,
	712, 1102, 1102, -122, -122, -1000, -1000, -1000, -1000, 1071,
	-1000, -1000, 1070, 1591, -1000, -1000, 1068, 2328, 1124, 1668,
	1704, 1703, 2328, 2328, 2328, 1866, 554, -1000, -1000, 1859,
	1858, 1527, -1000, -1000, 209, -1000, -1000, 479, 1124, -1000,
	688, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1693, 1124, 1090, -1000, 548, 1124, 1963, 1124, 380,
	630, -1000, 1702, -1000, -1000, 980, 945, 1098, 7545, 213,
	-1000, -1000, -1000, -1000, -1000, 624, -1000, 1984, 1906, 41,
	322, -173, 1286, -1000, -1000, 1665, -1000, -1000, 10940, -1000,
	1199, 1194, -1000, 1189, 1178, 59, 1124, -1000, -196, 123,
	26, -1000, -1000, 1570, -1000, 1663, 10940, 1854, -1000, 1802,
	779, -1000, 113, -1000, -234, -1000, -1000, 985, -1000, -234,
	-1000, -1000, -1000, 1570, -1000, 1662, 1661, -1000, 1660, -1000,
	-1000, 1570, 1570, 1570, 687, -1000, -1000, -1000, -1000, -1000,
	-1000, 712, 1521, 72, 712, 1520, 1519, 712, 712, -1000,
	-1000, 1168, 768, -1000, -1000, -1000, -1000, 1386, -1000, 1384,
	-1000, 120, 107, -1000, 1514, 1563, -1000, 1372, 1586, 1701,
	178, 2328, 2328, 1659, 1657, 1656, 1576, 537, 1576, 1897,
	341, 2328, 1994, 478, 1994, 479, 7947, 1124, -1000, -1000,
	-1000, 1124, 1540, 1124, 1540, 347, 1124, -1000, -1000, -1000,
	542, 2328, -1000, -1000, -1000, -1000, -1000, 5937, -1000, -1000,
	1370, -1000, 298, 1583, 10940, 609, 609, -198, 1568, 361,
	-173, 1570, 332, 1654, -1000, 624, 833, -1000, 10940, 460,
	1570, 1570, 1570, 1570, 10836, -1000, -1000, 665, -1000, -1000,
	-1000, 11394, 11394, 11394, 11394, 11394, 11394, 11394, -1000, -1000,
	-1000, -1000, 29, -1000, -234, -1000, 1101, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 684, 683, -1000, 1570, 1570, 1570,
	1570, 1570, 1570, 1570, 1570, 10940, 1570, 1778, 1570, 1570,
	1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 6342,
	1570, 1570, 1570, 1570, -1000, -1000, -1000, -1000, -1000, -1000,
	-173, 1653, -1000, -1000, -1000, 890, -1000, 10940, 478, 951,
	156, -1000, 1560, -1000, 1066, 1513, 3505, 1505, -1000, 11905,
	-1000, -1000, -1000, 1131, -1000, 1007, -1000, 1003, 1498, 10000,
	10466, 10466, 7947, -1000, -1000, 712, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 72, 1089, 72, 3, -2, -1000,
	1062, -1000, 1061, 178, 1124, 2328, 1467, 1551, -1000, 291,
	1652, 1649, 178, 478, 624, -1000, 1925, 2000, -1000, 1576,
	2328, -1000, 545, 2007, -1000, -1000, 1895, -1000, 1548, -1000,
	-1000, 1511, 1994, -1000, 1648, 1540, 1540, 1124, -1000, -1000,
	376, 1124, -1000, -1000, -1000, -1000, -1000, -1000, 3236, 624,
	1838, -1000, -1000, -1000, 868, 933, -1000, -1000, 906, 274,
	919, -1000, 10940, 1124, -173, 1632, 10940, 1124, 624, 1368,
	279, 10940, 10940, 910, -1000, -1000, 325, 11290, 969, 941,
	11394, 11394, 11394, 11394, 11394, 11394, 11394, 11394, 11394, 11394,
	11394, 11394, 11394, 11394, 11394, 1086, 5940, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1163,
	-1000, 1576, 2185, 1131, 1131, 1131, 1360, 10836, 414, 1028,
	1028, 56, 10836, 56, 56, 56, 56, 56, 119, -1000,
	-261, -1000, -1000, 7143, 7947, 10466, 10466, 9534, 10940, 10466,
	10466, 10466, 1869, 884, 414, 2185, 1887, 1131, 1131, 1131,
	1131, -1000, 1131, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 288, -1000, -1000, -1000, -1000, -1000, -1000, 1628, 1627,
	1626, 1625, 1624, 1623, 1622, -1000, 10466, 10466, 10466, 10466,
	-1000, 1124, 1570, 833, 1358, -132, 10940, 1621, 779, -1000,
	-1000, 1466, -234, -1000, -1000, -153, -1000, -1000, -1000, -1000,
	1131, 10466, 1345, -1000, -1000, 648, 682, 1345, 1345, 1570,
	-1000, 712, -1000, 712, -1000, -1000, 1462, 1460, 1449, 1619,
	1616, -214, 1060, 178, 178, 1437, 1356, 1354, 1909, 1923,
	1576, 1868, 1755, -1000, 1131, 1850, 1124, -1000, -1000, -1000,
	-1000, -1000, 256, 881, 1124, 6021, 1465, -1000, 3915, 1615,
	193, 499, 1680, 3293, 204, -1000, 1142, 863, 1080, 860,
	859, 856, 855, 843, 834, 821, 808, 791, 790, -1000,
	-1000, -1000, -1000, 1838, -1000, 1987, -1000, -1000, -1000, 1973,
	1352, -1000, 257, 1602, 1601, 624, 833, 1598, 1350, 3236,
	-1000, -94, 325, 388, -1000, -1000, 987, -1000, -1000, 2906,
	11394, 11394, 11394, -1000, -1000, -1000, -1000, 969, 11394, 11394,
	11394, 2709, 2906, 2725, 182, 50, 56, 290, 290, 65,
	65, 65, 65, 65, 394, 394, -1000, -1000, -1000, 208,
	-1000, 1131, 1131, -1000, -1000, -1000, 10940, -1000, 1131, -1000,
	-234, 1079, -1000, -1000, 1011, 1570, -1000, 1345, 1345, 719,
	1547, 11730, 1583, -1000, 1583, 1597, 1591, -1000, 140, -1000,
	-1000, 150, 1583, 148, 1583, 1583, 1583, -1000, -1000, 1583,
	1583, -1000, 1583, 1583, 861, 1508, 1501, 1345, 10466, -1000,
	817, -1000, 10940, 1131, 2328, -1000, -1000, -1000, -1000, -1000,
	1596, 1059, 1056, 1055, 1054, 1051, 1032, 1021, 1020, 1345,
	1131, 1546, 1345, 1345, 1348, 10940, 279, 1700, -1000, -1000,
	857, -1000, 1436, 1429, -1000, -1000, 1345, 10466, -256, -1000,
	-1000, 1087, -1000, -1000, 5535, -256, -256, 10466, -1000, -1000,
	-1000, -1000, -214, 178, 624, 1942, 1594, 1420, 1416, -214,
	1942, 3236, 1805, 10940, 10940, 1925, -1000, 1576, -1000, -1000,
	1869, -1000, -1000, 942, -1000, 1576, 1422, 233, 164, 10940,
	-1000, 3326, -1000, 6021, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1925, 10940, -1000, -1000,
	-1000, -1000, -1000, 395, 3504, 1124, 1124, 1124, 457, 10940,
	1123, 10940, -1000, -1000, -1000, -1000, -1000, 2328, 1412, 3915,
	3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
	3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
	3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
	3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
	3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
	3915, 3915, 3915, 3915, 3915, 3915, 3915, 624, 624, 1593,
	1592, 323, -1000, 1124, -1000, -134, 3293, 1124, -1000, 1014,
	-1000, -1000, 972, 1006, 972, 972, 972, 972, 972, 296,
	992, 410, -1000, 609, 609, 1942, 10940, 898, 10940, 624,
	1340, 279, 1124, 3236, 1680, -1000, -1000, -1000, -1000, 2906,
	2906, 2906, -1000, 2709, 2906, 2194, -1000, 11394, 11394, 105,
	-1000, -1000, 414, -1000, 83, -1000, -234, -1000, -1000, -1000,
	-1000, 7930, 1086, 10940, -1000, 273, -1000, -1000, -1000, 1591,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7930, 11394, 11394, 11394, 11394, -104, 1456, 869, -1000, 10940,
	748, -1000, -1000, 990, 1409, 1338, 1336, 1407, 1405, 1404,
	1403, 1398, -1000, -1000, -1000, -1000, 400, 833, -1000, 1968,
	-143, 369, -1000, -1000, -1000, -1000, -1000, 1570, -1000, -1000,
	677, -1000, -1000, 1131, 1942, 1380, 1327, 3236, 10940, 478,
	-214, -214, 1942, 3236, -1000, -1000, 1981, 737, 876, 1545,
	-1000, 739, 1909, 1131, 1600, -1000, -1000, -117, 10940, 6021,
	7630, 414, 7630, -1000, 6021, 2758, 1909, 10954, 480, 1503,
	1574, 1544, 434, 203, -1000, -1000, -1000, 4329, 977, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1124, 1956, 1955, 1948, 1946, 11868,
	10940, 10940, -1000, 1886, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1342, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1323, 1313, 624, 624, 1590, 1570, 1306,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 890,
	890, -1000, -1000, -1000, -1000, -1000, -1000, 1302, 1292, 3236,
	-1000, 1208, 1680, -1000, -1000, 11394, 2906, 2906, -4, -1000,
	1011, -1000, 1131, 1583, 1131, 635, -1000, -1000, -1000, 1131,
	1063, 1556, 999, 255, 1570, -91, -1000, 414, 10940, 1328,
	-1000, 982, -1000, 979, -1000, -1000, -1000, -1000, -1000, -1000,
	2328, 279, 609, 609, -1000, -1000, -1000, 207, 799, 779,
	779, 967, 45, -1000, 1922, 610, 6741, -1000, 3236, 1942,
	3236, 1680, 414, 1203, 1942, 1942, 3236, 1680, -1000, 1774,
	10940, 10940, 10940, -1000, 1805, -1000, 10466, -1000, -1000, -240,
	414, 3326, 2403, -1000, -1000, 2263, 7227, -1000, 1805, 6021,
	872, -1000, 875, -1000, 7630, 847, 2328, 1190, -1000, 1424,
	1565, -1000, -1000, -1000, 1847, 1566, 172, 1124, 216, 5538,
	-1000, -1000, 1885, 1543, 4731, -35, -1000, -1000, -1000, 787,
	670, 1067, -1000, 1797, -1000, -1000, 3504, 1806, -1000, -1000,
	-1000, -1000, -1000, 7630, -1000, 1530, 1131, 881, 254, 3915,
	-1000, 367, 1183, 1167, 624, 1124, -1000, 3293, -1000, -1000,
	1942, 3236, 1680, 398, -1000, 2906, -1000, -1000, -1000, -1000,
	-1000, 11394, -1000, -1000, 11394, -1000, 11394, -1000, 11394, -1000,
	11394, 11394, 1131, 1076, 414, -1000, 1209, 1204, 1580, -1000,
	-1000, -1000, 779, -1000, 779, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 109, -1000, 1916, 1131, -1000, 1680, 3236, -1000,
	-1000, -1000, 3236, 3236, 1680, -1000, 1770, 414, 414, -1000,
	-1000, 1451, 10940, 6825, -1000, -1000, -1000, -1000, 3231, 6423,
	526, 3101, 293, 2328, -1000, 293, 1396, 1574, 2328, -1000,
	-1000, 2185, 1574, 1574, 1574, 1574, 1574, -1000, 1744, 1743,
	-1000, 1745, 1737, 1810, 2328, 1160, 1566, 715, 1570, -1000,
	2328, -1000, 1847, 1881, -1000, 532, 5133, 1543, -35, 1541,
	-1000, -22, -3, 9896, 7947, 712, -1000, -1000, -1000, -1000,
	-1000, 1124, 2173, -1000, 163, 223, -1000, 189, -1000, 195,
	3236, 3236, 1158, 1131, -1000, -1000, 1680, -1000, 2328, 1738,
	1738, 1738, 1738, 1738, 331, -1000, -1000, -1000, -1000, 1124,
	-1000, -1000, -1000, 669, 10940, -1000, -1000, -1000, 1680, 1680,
	-1000, -1000, 1942, 1574, 414, -1000, -1000, 9663, -1000, -1000,
	10940, -1000, 10940, 7630, -1000, 1343, 1570, -1000, 1942, 1574,
	1426, -1000, 1441, -1000, 785, 1565, 1589, 1699, 1188, -1000,
	-1000, -1000, -1000, 1734, -1000, 1731, -1000, -1000, -1000, -1000,
	-119, 605, 587, 583, 1124, -1000, 1576, 4087, -1000, -1000,
	1091, -1000, 194, -1000, -1000, -1000, 1541, -35, -12, -1000,
	-1000, -1000, -1000, 414, 780, -1000, 1540, -1000, 7630, -1000,
	-1000, 185, -1000, 1680, 1680, -1000, -1000, -1000, 1578, -1000,
	-1000, -1000, -1000, -1000, 1131, 218, -145, 1156, 7947, 1172,
	-1000, 414, -1000, -1000, 1938, 1539, 503, 6021, 10118, 11848,
	1567, 2185, 1570, -1000, 8349, 1124, 1925, 1426, -1000, 1942,
	2185, 10940, -1000, -1000, 10940, 1575, -1000, 10940, -1000, -1000,
	-1000, -1000, 1573, 1570, 1570, 1570, 1150, -1000, -1000, -1000,
	532, -1000, 3899, -1000, 1001, -1000, -1000, -1000, -41, -24,
	-1000, 10940, 692, -1000, -1000, -1000, -1000, 1124, -1000, 1767,
	-113, -171, -1000, -1000, -1000, 1131, 10940, 1932, 1911, -1000,
	2310, 872, -1000, -1000, 1812, 1395, 1512, -1000, -1000, 10362,
	1131, 1152, -1000, -1000, 640, -1000, -1000, 1150, 1909, -1000,
	1925, -1000, 414, 414, 478, 414, 251, 478, 478, 478,
	315, 1124, -1000, -1000, 993, -1000, -1000, -1000, -1000, 414,
	5217, 1147, -1000, 1759, -1000, -1000, -1000, -1000, 10940, 10940,
	4815, 307, -1000, 1570, -1000, -1000, 1430, 9153, 1124, -1000,
	-1000, 1909, 1140, 1134, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1130, 1130, 1130, 715, -1000, -1000, 4413,
	-1000, -1000, -118, 414, 1530, 461, 1979, -1000, 1570, -1000,
	1576, -1000, -1000, -1000, -1000, -1000, 251, -1000, -1000, -1000,
	-119, -1000, -168, -1000, 2185, 1512, 1131, -1000, -1000, -178,
	1504, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 2279, 1948, 4, 33, 2278, 2277, 2276, 2275, 2270,
	2267, 2266, 2265, 2258, 2257, 2256, 62, 67, 46, 35,
	40, 2251, 2249, 2245, 2243, 2241, 2240, 2239, 93, 2238,
	2237, 2234, 2233, 110, 2232, 2231, 2230, 2229, 87, 74,
	134, 155, 2019, 37, 65, 84, 70, 2228, 32, 2227,
	2222, 57, 2220, 41, 2217, 2216, 111, 2215, 2214, 7,
	122, 116, 126, 83, 2213, 2209, 119, 2290, 2208, 2204,
	146, 2203, 2201, 108, 30, 76, 5, 9, 10, 2199,
	78, 2, 2197, 95, 92, 2196, 2191, 2189, 121, 2188,
	69, 85, 14, 66, 2187, 13, 8, 132, 45, 36,
	16, 6, 56, 39, 2186, 21, 44, 26, 2185, 79,
	2178, 149, 47, 75, 19, 1779, 0, 38, 138, 2174,
	2171, 2169, 2408, 141, 15, 73, 81, 2167, 107, 123,
	63, 120, 2165, 2160, 2157, 2156, 55, 229, 167, 64,
	2155, 2153, 2150, 2148, 2144, 96, 2140, 234, 871, 136,
	117, 53, 2139, 2136, 118, 332, 86, 102, 323, 865,
	1778, 2135, 2134, 2131, 2126, 139, 82, 91, 131, 2123,
	80, 130, 22, 427, 2120, 2117, 2116, 2115, 2111, 2105,
	2103, 124, 2100, 151, 61, 94, 430, 54, 2099, 2098,
	2096, 2095, 97, 2090, 2089, 2086, 71, 2085, 2084, 127,
	88, 140, 125, 135, 2077, 2076, 77, 90, 2073, 133,
	128, 2070, 129, 31, 23, 109, 68, 2068, 2062, 2061,
	20, 2059, 2056, 2055, 1, 3, 2054, 2050, 2041, 2040,
	2039, 2036, 72, 2031, 143, 2027, 17, 2026, 2023, 52,
	2021, 2018, 2018, 2014, 2010, 840, 1477, 2008, 2470, 148,
	2007, 145,
}

var yyR1 = [...]uint8{
	0, 241, 2, 2, 2, 242, 242, 1, 1, 1,
	1, 24, 24, 24, 24, 24, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 244, 244, 3, 3, 4, 5,
	5, 6, 6, 7, 7, 31, 31, 8, 9, 9,
	9, 247, 247, 51, 51, 98, 98, 10, 10, 10,
	10, 11, 11, 11, 217, 217, 216, 218, 218, 219,
	219, 221, 221, 220, 220, 220, 220, 220, 220, 220,
	222, 222, 222, 222, 12, 12, 12, 12, 12, 211,
	211, 211, 211, 211, 13, 13, 214, 214, 214, 16,
	16, 16, 16, 17, 17, 18, 18, 18, 20, 20,
	103, 103, 107, 107, 107, 108, 108, 108, 108, 233,
	233, 127, 127, 243, 243, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 209, 209, 209, 209, 210, 210,
	210, 210, 212, 212, 213, 213, 213, 213, 213, 213,
	215, 215, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 14, 14, 32, 32, 75, 75, 15,
	113, 113, 190, 190, 190, 191, 191, 191, 191, 191,
	191, 193, 193, 194, 194, 120, 120, 195, 195, 23,
	23, 23, 23, 23, 23, 23, 23, 27, 175, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 165, 165,
	166, 166, 167, 167, 167, 167, 159, 159, 159, 159,
	130, 130, 130, 130, 130, 130, 130, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 201, 201, 201, 201,
	201, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 203, 204, 205, 197, 197, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 149, 149, 149, 149, 149, 149, 196, 196, 192,
	192, 192, 132, 132, 132, 132, 132, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 140, 137, 137,
	141, 138, 138, 142, 144, 145, 145, 156, 156, 157,
	157, 157, 139, 139, 143, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 131, 131, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 146, 146, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 158, 158, 147, 147, 148,
	148, 148, 155, 155, 155, 152, 152, 153, 153, 154,
	154, 154, 150, 150, 150, 151, 151, 151, 161, 186,
	186, 186, 188, 188, 189, 189, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	174, 174, 206, 206, 207, 207, 208, 208, 185, 185,
	185, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 173, 173, 183, 183, 184, 184, 181, 181,
	181, 181, 182, 168, 168, 168, 168, 168, 169, 169,
	170, 170, 170, 170, 162, 162, 163, 163, 164, 164,
	199, 199, 199, 237, 237, 237, 237, 237, 237, 238,
	238, 200, 200, 171, 171, 172, 172, 179, 179, 179,
	179, 249, 249, 177, 177, 177, 178, 178, 178, 250,
	28, 29, 29, 30, 30, 30, 35, 35, 35, 33,
	33, 34, 34, 40, 40, 39, 39, 41, 41, 41,
	41, 119, 119, 119, 118, 118, 234, 234, 234, 234,
	234, 43, 43, 44, 44, 45, 45, 46, 46, 46,
	224, 224, 223, 223, 225, 225, 225, 225, 225, 225,
	225, 225, 58, 58, 95, 95, 95, 99, 99, 47,
	47, 47, 47, 48, 48, 49, 49, 50, 50, 125,
	125, 124, 124, 124, 52, 52, 52, 54, 53, 53,
	53, 53, 55, 55, 57, 57, 56, 56, 59, 59,
	59, 59, 60, 60, 97, 97, 42, 42, 42, 42,
	42, 42, 42, 42, 110, 110, 62, 62, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 72, 72, 72, 72, 72, 72,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 38, 38, 73, 73, 73, 80, 74, 74, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 70, 70, 70, 70,
	70, 70, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 251, 251, 71, 71, 71,
	71, 36, 36, 36, 36, 36, 126, 126, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 84, 84, 37, 37, 82, 82,
	83, 112, 112, 85, 85, 81, 81, 81, 81, 226,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	63, 63, 86, 86, 87, 87, 235, 235, 236, 88,
	88, 89, 89, 90, 91, 91, 91, 92, 92, 92,
	92, 93, 93, 93, 65, 65, 65, 65, 65, 65,
	94, 94, 96, 96, 96, 96, 100, 100, 76, 76,
	78, 78, 77, 79, 101, 101, 105, 102, 102, 106,
	106, 106, 106, 106, 25, 26, 104, 104, 104, 121,
	121, 121, 111, 111, 109, 109, 116, 117, 117, 117,
	117, 117, 122, 122, 122, 123, 123, 227, 227, 227,
	228, 228, 228, 229, 229, 230, 231, 231, 232, 232,
	232, 240, 240, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	115, 245, 246,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 2, 0, 1, 1, 1, 1,
	1, 6, 6, 6, 6, 6, 2, 13, 12, 14,
	14, 13, 12, 13, 12, 10, 7, 10, 7, 11,
	11, 9, 13, 16, 5, 8, 7, 6, 7, 6,
	3, 6, 3, 6, 3, 6, 11, 13, 13, 14,
	14, 6, 6, 7, 1, 1, 4, 6, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 2, 6, 6, 1, 3, 3, 0, 1, 1,
	1, 1, 3, 1, 2, 3, 1, 2, 1, 1,
	1, 2, 3, 4, 2, 2, 2, 3, 5, 0,
	2, 2, 2, 2, 3, 5, 1, 2, 3, 7,
	10, 1, 1, 5, 5, 3, 5, 3, 1, 3,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 0, 3, 0, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 4, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 4, 1, 1, 0, 1, 2,
	0, 3, 0, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 2, 0, 3, 0, 1, 0, 2, 3,
	5, 5, 7, 3, 5, 3, 5, 4, 4, 0,
	1, 3, 3, 3, 3, 3, 3, 3, 7, 9,
	1, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 3,
	2, 4, 2, 4, 2, 2, 3, 2, 3, 2,
	7, 9, 3, 3, 6, 9, 9, 6, 6, 8,
	8, 5, 8, 7, 4, 0, 2, 4, 6, 2,
	4, 2, 1, 1, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 2, 1, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 3, 0, 2, 0,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 3, 0, 1, 0, 5, 0,
	3, 5, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 1, 1, 2, 1, 1, 4, 5, 4, 4,
	4, 1, 2, 2, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 3, 0, 3, 0,
	3, 3, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 6, 0,
	1, 4, 1, 2, 1, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	5, 3, 3, 2, 3, 2, 3, 3, 2, 2,
	3, 4, 1, 1, 1, 1, 1, 3, 3, 2,
	2, 4, 1, 2, 5, 5, 8, 8, 13, 11,
	1, 1, 2, 2, 10, 8, 9, 7, 7, 5,
	0, 1, 1, 0, 1, 1, 1, 2, 2, 1,
	2, 0, 3, 0, 1, 1, 3, 0, 4, 1,
	3, 2, 1, 1, 2, 1, 1, 1, 1, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 3, 6, 4,
	7, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	0, 4, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 8, 1, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 0, 4, 1, 3, 3, 2,
	3, 2, 1, 2, 0, 3, 1, 1, 3, 4,
	4, 4, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 4, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 2, 1, 4, 5, 5, 5,
	5, 6, 4, 4, 6, 6, 8, 6, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 9, 7, 5,
	4, 4, 3, 3, 3, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 2, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 6, 6, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 0, 2, 1, 1, 3, 5, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 0, 3, 0, 2, 1, 3, 1, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 1, 3, 1, 1, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 5, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -241, -2, -1, -21, -22, -23, -24, -27, 126,
	132, 133, 127, 128, 71, 410, -175, 58, -237, -238,
	295, -195, 137, 150, 172, 173, 380, 134, 152, 135,
	392, 393, 154, 395, 79, -172, -116, 61, -172, -109,
	140, 136, 152, 56, -2, -176, -159, -116, -115, 63,
	36, 405, 406, 150, 173, 175, 308, 136, 136, 136,
	138, 226, 138, -116, -116, -81, 141, 61, -115, -122,
	63, -56, -122, 61, -115, 135, -116, 141, -116, 141,
	63, -111, 141, 395, 392, 393, 360, 56, 59, 56,
	135, -116, 141, -116, 141, 63, 135, 143, 136, 60,
	59, -160, -130, -132, -131, -134, -133, -135, -116, 63,
	-140, -141, -144, -142, -143, 262, 372, 259, 263, 260,
	265, 266, 267, 120, 264, 269, 270, 271, 272, 273,
	280, 281, 282, 283, 284, 285, 268, 275, 274, 276,
	277, 278, 279, 286, 33, 159, 252, 253, 254, 257,
	256, 258, 255, 122, 287, 288, 289, 290, 291, 292,
	293, 294, 295, -136, -137, 245, -138, -139, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 244, 247,
	248, 249, 251, 250, -160, -160, -160, -116, 56, 224,
	225, -116, -116, -111, 227, -111, 56, -209, 19, 197,
	198, 210, 56, 81, 123, 25, 123, -111, 81, 81,
	-56, 81, 135, -56, -116, 135, -56, -56, 324, 56,
	26, 26, -56, -81, -116, -116, -179, -249, 375, 37,
	-159, -161, -168, -162, -163, -164, -165, -180, -169, 144,
	142, 154, 408, 146, 147, 295, -173, 148, 136, 155,
	73, 81, -201, 144, -204, 56, 303, 309, 142, 155,
	154, 408, 71, 145, 25, 382, 384, 31, 32, -154,
	411, 297, -152, 306, 123, -147, 58, -146, 261, -148,
	58, -147, -148, -147, -148, -150, 263, -150, -150, -150,
	-150, 58, 58, -147, -147, -147, -147, -147, -147, 58,
	-147, -156, 58, -145, 246, -157, 58, 56, 57, -56,
	-116, -116, 56, 56, 56, -56, -233, 405, 406, -56,
	-56, -212, -210, 8, 9, 10, 211, -56, 26, -117,
	-123, -116, 317, 149, -114, -115, -122, 131, 198, 383,
	80, 25, 27, 303, 309, 197, 84, 120, 16, 85,
	204, 392, 393, 119, 76, 361, 126, 52, 353, 354,
	351, 202, 363, 364, 352, 310, 209, 20, 31, 10,
	28, 157, 24, 113, 128, 199, 89, 88, 160, 164,
	165, 26, 158, 75, 205, 207, 19, 55, 148, 11,
	382, 13, 14, 397, 384, 141, 140, 100, 396, 136,
	50, 8, 122, 29, 97, 46, 155, 208, 48, 98,
	17, 355, 356, 34, 370, 166, 115, 53, 40, 398,
	81, 399, 73, 56, 324, 203, 79, 15, 51, 167,
	400, 206, 404, 99, 129, 360, 174, 49, 200, 401,
	134, 201, 6, 366, 33, 156, 47, 135, 311, 402,
	87, 139, 74, 5, 154, 9, 403, 54, 57, 357,
	358, 359, 38, 86, 12, 151, 374, 77, -130, -123,
	-114, -56, 26, 26, 26, -56, 139, -56, 11, 131,
	-56, -56, -116, -116, 63, 97, 97, 97, -177, 59,
	-117, 71, -114, -115, 36, 58, -200, 56, 81, -116,
	-171, 155, -173, 61, 136, -199, 392, 393, -245, 58,
	-173, -173, 61, 136, 155, 61, 155, 73, 19, -116,
	9, 155, 155, -200, 63, -56, 58, -197, 383, 16,
	58, -202, 58, -203, 63, 64, 65, 110, 66, 73,
	-149, 72, -62, 298, -70, 351, 354, 353, 299, 74,
	75, -116, 369, 368, -122, -205, 65, 412, -153, 307,
	63, -150, 65, -147, -150, 65, 61, -150, -150, -151,
	120, 119, 33, -151, -151, -151, -151, -158, 63, -158,
	-155, 374, 375, -155, 65, 65, -156, 65, -56, -116,
	58, 56, 56, -56, -56, -56, 25, 138, 25, -190,
	25, 56, 59, 211, -209, -116, 123, 57, -116, -116,
	63, 139, -172, 11, -172, -120, 144, -165, -168, 154,
	131, 56, 63, 73, 63, 73, 63, 90, -117, -249,
	-184, -181, -116, 155, 58, 10, 9, 19, 153, 142,
	154, 408, 148, -199, 61, 58, -42, -61, 81, -67,
	31, 26, 9, 76, -245, -66, -62, -81, -226, -79,
	-80, 120, 121, 109, 110, 117, 82, 122, -70, -68,
	-69, -71, -229, 184, 63, 64, -116, 62, 72, 65,
	66, 67, 68, 73, -122, 329, -77, 48, 49, 361,
	362, 363, 364, 370, 365, 85, 38, 40, 268, 298,
	299, 351, 359, 358, 357, 355, 356, 353, 354, 407,
	141, 352, 115, 360, 296, 61, 61, 61, 61, -199,
	154, -171, -116, 394, -201, 408, -149, -245, 58, -42,
	25, 31, -63, 65, 110, -202, 58, -203, -192, 407,
	65, 66, -192, -245, -147, 58, -147, 58, 58, -245,
	-245, -245, 123, -151, 60, -150, -151, 60, 60, -151,
	-151, 61, 61, 120, 60, 59, 60, 252, 252, 60,
	59, 60, 59, 58, 57, 56, -183, -184, -70, -116,
	-56, -56, 58, 58, 58, -3, -4, -5, 6, -245,
	-111, -3, -191, 19, 181, 182, -56, -210, -95, -116,
	155, -212, -209, -117, -116, -172, -172, -244, 136, 155,
	-116, 144, -168, -56, -178, -117, 63, 65, 60, 59,
	-147, -182, 301, -147, -42, -170, 177, 178, 33, 179,
	-170, 394, 58, 57, 155, -199, -245, 155, 58, -184,
	-246, 80, 79, 97, 212, 60, -42, -64, 100, 81,
	98, 99, 84, 106, 105, 116, 109, 110, 111, 112,
	113, 114, 115, 107, 108, 119, 407, 90, 91, 92,
	93, 94, 95, 96, 101, 102, 103, 104, -110, -245,
	-80, -245, -245, -245, -61, -3, -74, -245, -42, 124,
	125, -67, -245, -67, -67, -67, -67, -67, -67, -230,
	297, -192, 63, 123, 123, -245, -245, -245, -245, -245,
	-245, -245, -245, -84, -42, -245, 41, -245, -245, -245,
	-245, -251, -245, -251, -251, -251, -251, -251, -251, -129,
	120, 263, 159, 254, -136, -131, 269, 268, 249, 248,
	260, 259, 233, 253, 252, 122, -245, -245, -245, -245,
	-199, 58, -200, -42, -95, 60, 58, 384, 59, 65,
	60, -202, 63, 60, 300, -130, -246, 60, 60, 60,
	-40, 24, -39, -41, 111, -42, -122, -39, -39, -117,
	-151, -150, 63, -150, 308, 308, 65, 65, -183, -116,
	-56, 60, 58, 58, 58, -183, -95, -184, -88, 15,
	-30, 5, -28, -250, -3, -56, 139, 21, 6, 8,
	9, 10, 19, -113, 59, 25, -212, -243, 58, -116,
	154, -116, -186, -188, 374, -187, 57, 149, 71, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 61, -181,
	-91, 27, 28, 60, -200, 56, 73, 180, -200, 56,
	-166, -167, -42, -116, -199, 58, -42, -171, -184, 60,
	-196, 179, -42, -42, -72, 73, 81, 74, 75, -67,
	21, 22, 23, -73, -77, -80, 69, 100, 98, 99,
	84, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -126, 61, 63, 253,
	-129, 61, -81, -246, -246, -246, 59, -246, -3, -66,
	63, -116, -66, -116, 411, -117, -117, -39, -39, -42,
	-128, 120, 259, 159, 254, -138, -137, -139, 245, 284,
	285, 305, 252, 306, -136, 257, 256, 258, 269, 260,
	265, 267, 266, 264, -42, -41, -41, -39, -33, 24,
	-82, -83, 86, -81, 19, -246, -246, -246, -246, -246,
	261, 58, 58, 58, 58, 58, 58, 58, 58, -39,
	-40, -39, -39, -39, -172, -245, -246, 60, 380, 381,
	-42, 58, -63, 60, -154, -246, -39, 59, -246, -119,
	-118, 25, -116, 63, 123, -246, -246, -245, -151, -151,
	60, 60, 60, 58, 58, -97, 396, -183, -183, 60,
	60, 60, -92, 17, 16, -6, -4, -245, 21, 24,
	-35, 44, 45, -29, -246, 25, -172, 199, -112, 86,
	-116, -213, -215, 228, -19, -16, -7, -9, -8, -11,
	-10, -12, -13, -14, -15, -25, -4, 141, -17, -18,
	-31, 10, 9, 20, 33, 203, 204, 209, 205, 151,
	-32, 174, -26, 8, 360, 164, 165, 56, -248, -116,
	109, 110, 111, 112, 114, 106, 105, 116, 123, 90,
	91, 92, 63, 59, 58, 65, 66, 67, 68, -115,
	-136, -137, -138, -139, 269, 280, 281, 282, 283, 260,
	259, 270, 271, 272, 73, 81, 80, 79, 100, 97,
	98, 84, 85, 86, 87, 89, 88, 362, 361, 363,
	364, 31, 144, 142, 154, 408, 145, 58, 58, 392,
	393, 142, -185, 56, -187, 374, 58, 376, 61, -174,
	90, 63, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, -91, 9, 10, 60, 59, 374, 58, 58,
	-184, -246, 58, 60, -186, 367, 73, 74, 75, -67,
	-67, -67, -73, -67, -67, -67, -38, 160, 80, 374,
	-246, -246, -42, -246, -231, -232, 63, 65, 66, -246,
	-246, 59, 57, 59, -147, -147, -147, -157, -156, -145,
	239, -147, 239, -147, -147, -147, -147, -147, -147, -147,
	25, 59, 11, 59, 11, -246, -39, -85, -83, 89,
	-42, -246, -122, 58, 65, 65, 65, 65, 65, 65,
	65, 65, -246, -246, -246, -246, 60, -42, -196, 56,
	60, -198, 60, 60, -246, -41, -234, 409, -118, 111,
	-123, -234, -234, -40, -97, -183, -184, -60, 12, 58,
	60, 60, -97, -60, -186, -93, 19, 34, -42, -89,
	-90, -42, -88, -3, -33, 70, -3, -193, 57, 200,
	228, -42, 410, -215, 228, -213, -88, -42, -28, -28,
	-28, -217, -116, -219, -216, 214, 215, -28, -240, -239,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, -116, -116, -116, -211, 40, 206, 207, 208, -42,
	-116, -245, -84, -56, 60, -248, -248, -248, -248, -248,
	-248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
	-248, -248, -248, -184, -184, 58, 58, 155, -116, -189,
	-187, -116, 65, -206, 56, 77, 65, -206, -206, -206,
	-206, -206, -207, 195, 196, 65, -208, -207, 65, -170,
	-170, -60, -167, 90, 80, 79, -116, -166, -184, 60,
	-196, -172, -186, -185, -38, 80, -67, -67, 252, 412,
	59, -192, -128, 120, -126, -42, -150, 61, -156, -128,
	-67, -67, -67, -67, 371, -88, 88, -42, 87, 65,
	60, 59, 60, 59, 60, 60, 60, 60, 60, 60,
	145, -246, 10, 9, 380, 381, 60, 229, 386, 387,
	166, 388, 179, 389, 390, -245, 123, -246, -60, 60,
	60, -186, -42, -95, -97, -97, -60, -186, 9, 100,
	59, 18, 59, -91, -92, -246, -34, 47, -194, 374,
	-42, -213, -214, -215, -215, -213, 410, 88, -92, 87,
	-20, -16, -17, -19, 228, -109, 11, -51, -56, -44,
	-45, -46, -47, -58, -80, -245, -56, 59, -218, -125,
	201, 25, 213, -102, -127, 230, -106, 319, 318, -117,
	329, -104, 317, 263, 316, -206, 59, -116, 11, 11,
	11, 11, -215, 228, -75, -74, -75, -113, 19, 60,
	60, 60, -184, -184, 58, -245, 60, 59, -200, -200,
	60, 60, -186, 60, -185, -67, 308, -232, -246, -246,
	-246, 59, -246, -246, 59, -246, 19, -246, 59, -246,
	19, -245, -37, 366, -42, 60, 65, 65, -56, -196,
	-170, -170, 374, -63, 16, -63, -63, -63, 65, 387,
	166, 389, 16, -246, 167, -88, 111, -186, -60, -186,
	-185, 60, -60, -60, -186, -185, 42, -42, -42, -90,
	-93, -39, 408, 410, -215, 88, 88, -93, -213, 89,
	89, -214, -57, 29, -56, -56, -51, -247, 59, 11,
	57, 33, 59, -52, -54, -53, -55, 46, 50, 52,
	47, 48, 49, 53, -125, -44, -245, -124, 167, -122,
	25, -216, -116, 202, -130, 19, 59, -102, 230, -103,
	-107, 320, 322, 90, 123, -121, -116, 63, 31, 33,
	-239, 29, -214, -246, -112, 199, -248, -227, 220, 81,
	60, 60, -184, -116, -187, -60, -186, -185, 145, -67,
	-67, -67, -67, -67, -67, -246, 63, 60, 60, 58,
	-63, -63, 391, -122, 16, -246, -185, -186, -186, -186,
	-185, 43, -43, 11, -42, 88, -215, 410, -17, -20,
	141, -18, 141, 410, 88, -98, 167, -56, -98, 57,
	-44, -56, -101, -105, -81, -45, -46, -46, -45, -46,
	46, 46, 46, 51, 46, 51, 46, -53, -122, -246,
	-59, 54, 140, 55, -245, -122, 19, -221, -220, 65,
	218, 217, 81, 216, -116, -106, -103, 59, 321, 323,
	324, 56, 77, -42, -117, -151, -172, 88, 228, 200,
	-228, 221, 220, -186, -186, 60, -246, -185, -56, -246,
	-246, -246, -246, -246, -36, 100, 374, -172, 123, -235,
	-236, -42, -185, -185, -60, -44, 88, 89, -42, -42,
	-65, 33, 38, -3, -245, -245, -60, -44, -60, -43,
	59, 90, -49, -48, 56, 57, -50, 56, -48, 46,
	46, -224, 374, 136, 136, 136, -99, -116, -3, -222,
	59, -215, 228, 63, 41, 219, -107, -108, 325, 322,
	328, 90, -214, 223, 222, -185, -185, 58, -246, 372,
	53, 377, 60, -117, -246, -88, 59, -86, 13, 141,
	-213, -20, -20, -100, 56, -101, -76, -78, -77, -245,
	-3, -94, -96, 6, -116, -114, -115, -99, -88, -60,
	-60, -105, -42, -42, 58, -42, 58, -245, -245, -245,
	-246, 59, -220, 88, -213, 63, 322, 326, 327, -42,
	410, -172, 43, 373, 378, -246, -236, -87, 14, 16,
	410, 30, -100, 59, -246, -246, -246, 59, 123, -246,
	-92, -88, -95, -223, -225, 397, 398, 399, 400, 401,
	402, 403, 404, -95, -95, -95, -124, -116, 88, 410,
	88, 60, 43, -42, -74, 88, 155, -78, 38, -3,
	-245, -96, -116, -92, 60, 60, 59, -246, -246, -246,
	-59, 88, 374, 141, 9, -76, -3, -225, -224, 377,
	-101, -246, 378,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 7, 8, 9, 10, 0, -2,
	0, 0, 954, 0, 0, 4, 16, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	554, 555, 556, 559, 0, 0, 565, 956, 0, 0,
	955, 0, 0, 0, 3, 0, 270, 325, 325, 325,
	325, 1135, 1136, 1137, 1138, 1139, 1140, 0, 0, 0,
	952, 0, 952, 0, 875, 0, 0, -2, -2, 0,
	964, 0, 666, 962, 963, 952, 40, 0, 42, 0,
	44, 0, 0, 560, 557, 558, 258, 0, 0, 0,
	0, 259, 0, 263, 0, 265, 0, 0, 0, 567,
	0, 286, 469, 465, 291, 292, 293, 294, 295, 0,
	372, 373, 374, 375, 376, 414, 415, 457, 444, 459,
	457, 459, 421, 457, 459, 472, 472, 472, 472, 472,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 0, 405, 457, 457, 457, 457,
	457, 411, 412, 457, 446, 447, 448, 449, 450, 451,
	452, 453, 0, 457, 397, 395, 399, 404, 377, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 388, 389,
	391, 392, 402, 403, 287, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 205,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 268, 569, 0, 572,
	271, 272, 273, 274, 275, 276, 277, 0, 561, 563,
	0, 550, 0, 0, 0, 0, 0, 0, 522, 523,
	298, 0, 300, 0, 302, 0, 304, 305, 0, 307,
	309, 561, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 471, 467, 466, 0, 472, 0, 457, 445, 472,
	0, 472, 472, 422, 423, 475, 0, 475, 475, 475,
	475, 0, 0, 462, 462, 408, 409, 410, 413, 0,
	387, 390, 0, 397, 396, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 140, 0,
	242, 0, 212, 208, 209, 210, 207, 0, 0, 877,
	0, 957, 958, 959, -2, -2, 965, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 34, 667,
	966, 0, 0, 0, 953, 0, 0, 0, 0, 255,
	0, 261, 260, 264, 266, 0, 0, 0, 0, 0,
	573, 575, 960, 961, 571, 0, 533, 0, 0, 564,
	0, 550, 0, 518, -2, 0, 551, 552, 973, 1141,
	0, 0, 513, 515, 0, 550, 563, 299, 0, 0,
	0, 306, 308, 0, 312, 313, 973, 0, 345, 0,
	0, 326, 0, 329, -2, 332, 333, 0, 335, 369,
	338, 339, 340, 0, 342, 457, 457, 365, 0, 686,
	687, 0, 0, 0, 0, 343, 344, 470, 290, 468,
	296, 475, 0, 472, 475, 0, 0, 475, 475, 424,
	476, 0, 0, 425, 426, 427, 428, 0, 455, 0,
	406, 0, 0, 407, 0, 0, 394, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 43,
	45, 0, 37, 0, 39, 0, 563, 51, 52, 256,
	0, 0, 11, 12, 13, 14, 15, 0, 574, 570,
	0, 526, 457, 457, 973, 0, 0, 0, 0, 0,
	550, 0, 0, 0, 517, 0, 0, 676, 973, 682,
	684, 0, 0, 0, 973, 729, 730, 731, 732, 733,
	734, 973, 973, 973, 973, 973, 973, 973, 760, 761,
	762, 763, 0, 765, -2, 881, 875, 883, 884, 885,
	886, 887, 888, 889, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 795, 805, 805, 805, 805, 805, 805, 805, 0,
	0, 0, 0, 0, 974, 511, 512, 514, 516, 520,
	550, 0, 564, 324, 301, 561, 303, 973, 0, 0,
	0, 346, 0, 890, 0, 0, 0, 0, 331, 0,
	334, 336, 337, 0, 361, 0, 363, 0, 0, -2,
	973, 973, 0, 416, 458, 475, 418, 460, 461, 419,
	420, 477, 473, 474, 472, 0, 472, 0, 0, 454,
	0, 400, 0, 0, 0, 0, 0, 524, 525, 457,
	0, 0, 0, 0, 0, -2, 899, 0, 579, 0,
	0, -2, 0, 0, 243, 244, 240, 213, 211, 634,
	635, 0, 0, 878, 143, 36, 38, 0, 54, 55,
	564, 563, 53, 262, 568, 576, 577, 578, 479, 0,
	904, 530, 532, 529, 0, 561, 540, 541, 0, 0,
	561, 562, 973, 0, 550, 0, 973, 563, 0, 0,
	367, 973, 973, 0, 681, 1142, 679, 973, 0, 0,
	973, 973, 973, 973, 973, 973, 973, 973, 973, 973,
	973, 973, 973, 973, 973, 0, 0, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 683, 0,
	700, 0, 0, 0, 676, 59, 0, 973, 727, 0,
	0, 751, 973, 752, 753, 754, 755, 756, 757, 764,
	0, 880, 882, 0, 0, 973, 973, 973, 973, 973,
	973, 973, 589, 0, 865, 0, 0, 0, 0, 0,
	0, 797, 0, 798, 799, 800, 801, 802, 803, 804,
	844, 0, 846, 847, 848, 849, 850, 851, 0, 0,
	0, 0, 377, 0, 0, 863, 973, -2, 973, 973,
	521, 0, 0, 0, 0, 0, 973, 321, 0, 891,
	327, 0, 369, 330, 370, 469, 341, 362, 364, 366,
	0, 973, 0, 595, 597, 601, 0, 0, 0, 0,
	417, 475, 456, 475, 463, 464, 0, 0, 0, 0,
	0, 674, 1141, 0, 0, 0, 0, 0, 907, 0,
	0, 583, 586, 581, 59, 0, 0, 246, 247, 248,
	249, 250, 0, 871, 0, 0, 0, 35, 145, 0,
	0, 564, 508, 480, 0, 482, 0, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 905, 906, 904, 534, 0, 542, 543, 535, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 479,
	549, 0, 677, 678, 680, 704, 0, 706, 708, 688,
	973, 973, 973, 692, 723, 724, 725, 0, 973, 973,
	973, 721, 696, 0, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 749, 816, 817, 0,
	759, 0, 0, 702, 703, 726, 973, 932, 59, 747,
	369, 0, 748, 758, 0, 877, 879, 0, 0, 0,
	0, -2, 457, 821, 457, 399, 397, 825, 395, 827,
	828, 829, 457, 832, 457, 457, 457, 837, 838, 457,
	457, 841, 457, 457, 0, 0, 0, 0, 973, 590,
	873, 868, 973, 0, 0, 792, 793, 794, 796, 806,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 594, 0, 0, 0, 973, 367, 314, 317, 318,
	0, 347, 0, 0, 371, 766, 0, 973, 606, 598,
	602, 0, 604, 605, 0, 606, 606, -2, 442, 443,
	398, 401, 674, 0, 0, 672, 0, 0, 0, 674,
	672, 479, 911, 973, 973, 899, 61, 0, 584, 585,
	589, 587, 588, 580, 60, 0, 251, 0, 0, 973,
	636, 31, 214, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 899, 973, 121, 122,
	579, 579, 579, 0, 579, 0, 0, 0, 109, 973,
	0, -2, 944, 65, 66, 235, 236, 0, 0, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 0, 0, 0,
	0, 0, 478, 0, 483, 0, 0, 0, 486, 0,
	501, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 0, 0, 672, 973, 0, 973, 0,
	0, 367, 0, 479, 508, 368, 705, 707, 709, 689,
	690, 691, 693, 721, 697, 0, 694, 973, 973, 0,
	685, 701, 728, -2, 0, 976, 369, 979, 980, 772,
	773, 0, 0, 973, 818, 472, 822, 823, 824, 397,
	830, 831, 833, 834, 835, 836, 839, 840, 842, 843,
	0, 973, 973, 973, 973, 0, 899, 0, 869, 973,
	0, 790, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 808, 809, 810, 0, 0, 310, 0,
	0, 0, 323, 328, 767, 596, 768, 0, 603, 599,
	0, 769, 770, 0, 672, 0, 0, 479, 973, 0,
	674, 674, 672, 479, 25, 56, 0, 0, 908, 900,
	901, 904, 907, 59, 591, 582, -2, 253, 973, 241,
	0, 872, 0, 217, 0, 0, 907, 0, 954, 0,
	0, 81, -2, 0, 84, 89, 90, 0, 0, 981,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 104, 105, 106, 0, 0, 0, 0, 0, 0,
	-2, -2, 239, 240, 144, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	0, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 0, 0, 0, 0, 0, 509, 0,
	484, 489, 487, 490, 502, 503, 491, 492, 493, 494,
	495, 496, 497, 504, 505, 498, 499, 506, 507, 561,
	561, 278, 281, 282, 283, 284, 285, 0, 0, 479,
	548, 0, 508, 547, 695, 973, 722, 698, 0, 975,
	0, 978, 0, 457, 0, 0, 819, 820, 826, 0,
	0, 0, 0, 0, 0, 866, 789, 874, 973, 0,
	857, 0, 859, 0, 860, 854, 856, 858, 861, 862,
	0, 367, 0, 0, 319, 320, 322, 0, 0, 0,
	0, 0, 0, 358, 0, 0, 0, 771, 479, 672,
	479, 508, 673, 0, 672, 672, 479, 508, 912, 0,
	973, 973, 973, 903, 911, 62, 973, 592, 29, 0,
	252, 30, 0, 116, 215, 0, 0, 218, 911, 0,
	127, 125, 121, 128, 0, 0, 0, 0, 73, 0,
	613, 615, 616, 617, 649, 0, 651, 0, 0, 0,
	88, 650, 0, 77, 0, 0, 937, 141, 142, 0,
	0, 0, -2, 0, 948, 945, 0, 107, 110, 111,
	112, 113, 114, 0, 233, 238, 0, 871, 0, 145,
	46, 967, 0, 0, 0, 0, 481, 0, 536, 537,
	672, 479, 508, 0, 545, 699, 750, 977, 774, 778,
	775, 973, 777, 779, 973, 781, 973, 783, 973, 785,
	973, 973, 0, 0, 870, 855, 0, 0, 0, 311,
	315, 316, 0, 349, 0, 351, 352, 353, 354, 355,
	356, 357, 0, 607, 0, 0, 600, 508, 479, 22,
	18, 675, 479, 479, 508, 24, 0, 909, 910, 902,
	57, 611, 973, 0, 117, 219, 216, 232, 0, 0,
	0, 0, 75, 0, 665, -2, 0, 0, 0, 71,
	72, 0, 0, 0, 0, 0, 0, 654, 0, 0,
	657, 0, 0, 0, 0, 0, 0, 668, 0, 652,
	0, 85, 649, 0, 86, 0, 0, 78, 0, 80,
	130, 0, 0, 973, 0, 475, 949, 950, 951, 947,
	982, 0, 0, 234, 0, 0, 161, 970, 968, 0,
	479, 479, 0, 0, 485, 279, 508, 546, 0, 0,
	0, 0, 0, 0, 811, 788, 867, 852, 853, 0,
	348, 350, 359, 0, 973, 609, 17, 23, 508, 508,
	21, 913, 672, 0, 254, 32, 118, 0, 123, 124,
	973, 126, 973, 0, 129, 0, 0, 664, 672, 0,
	672, 74, 611, 934, 0, 614, 645, 647, 0, 642,
	655, 656, 658, 0, 660, 0, 662, 663, 618, 619,
	620, 0, 0, 0, 0, 653, 0, 0, 91, 93,
	0, 96, 0, 98, 99, 938, 79, 0, 0, 133,
	134, 939, 940, 941, 0, 943, 108, 115, 0, 241,
	48, 0, 969, 508, 508, 47, 510, 544, 0, 776,
	780, 782, 784, 786, 0, 0, 0, 0, 0, 0,
	896, 898, 19, 20, 892, 612, 0, 0, 0, 0,
	926, 0, 0, -2, 0, 0, 899, 672, 70, 672,
	0, 973, 639, 646, 973, 0, 640, 973, 641, 659,
	661, 632, 0, 0, 0, 0, 0, 637, -2, 83,
	0, 100, 0, 94, 0, 97, 131, 132, 0, 0,
	138, 973, 0, 971, 972, 49, 50, 0, 787, 0,
	0, 0, 539, 360, 608, 0, 973, 894, 0, 119,
	0, 0, 127, 63, 0, 926, 914, 928, 930, 973,
	59, 0, 920, -2, 922, 924, 925, 0, 907, 69,
	899, 935, 936, 643, 0, 648, 0, 0, 0, 0,
	651, 0, 92, 101, 0, 95, 135, 136, 137, 942,
	0, 0, 812, 0, 815, 610, 897, 58, 973, 973,
	0, 0, 64, 0, 931, -2, 0, 0, 0, 76,
	68, 907, 0, 0, 622, 624, 625, 626, 627, 628,
	629, 630, 631, 0, 0, 0, 668, 638, 102, 0,
	33, 538, 813, 895, 893, 0, 0, 929, 0, -2,
	0, 921, 923, 67, 644, 621, 0, 669, 670, 671,
	620, 103, 0, 120, 0, 917, 59, 623, 633, 0,
	927, -2, 814,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 114, 106, 3,
	58, 60, 111, 109, 59, 110, 123, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 410,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 411, 3, 412, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:440
		{
			switch len(yyDollar[1].statements) {
			case 0:
				setParseTree(yylex, nil)
			case 1:
				setParseTree(yylex, yyDollar[1].statements[0])
			default:
				setParseTree(yylex, &MultiStatement{Statements: yyDollar[1].statements})
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:453
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:457
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[3].statements...)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:461
		{
			yyVAL.statements = []Statement{yyDollar[1].statement}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:466
		{
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:467
		{
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:477
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:494
		{
			tableName := ""
			if !yyDollar[4].tableName.Schema.isEmpty() {
				tableName = yyDollar[4].tableName.Schema.String() + "."
			}
			tableName += yyDollar[4].tableName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Table:  yyDollar[4].tableName,
				Comment: &Comment{
					ObjectType: "TABLE",
					Object:     tableName,
					Comment:    "",
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:511
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:530
		{
			colName := ""
			if !yyDollar[4].colName.Qualifier.isEmpty() {
				if !yyDollar[4].colName.Qualifier.Schema.isEmpty() {
					colName = yyDollar[4].colName.Qualifier.Schema.String() + "."
				}
				colName += yyDollar[4].colName.Qualifier.Name.String() + "."
			}
			colName += yyDollar[4].colName.Name.String()
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "COLUMN",
					Object:     colName,
					Comment:    "",
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CommentOn,
				Comment: &Comment{
					ObjectType: "INDEX",
					Object:     yyDollar[4].colIdent.String(),
					Comment:    string(yyDollar[6].bytes),
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:562
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 17:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:567
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:607
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:628
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:649
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Async:     true,
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 22:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:671
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 23:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 24:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:704
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    NewColIdent("VECTOR"),
					Vector:  true,
					Options: yyDollar[10].indexOptions,
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:739
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:750
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:762
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:773
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colName,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 32:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:817
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[3].colIdent},
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 33:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:830
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      &ColName{Name: yyDollar[6].colIdent},
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:855
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:860
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:880
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: GrantPrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    true,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:901
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[7].colIdents))
			for i, g := range yyDollar[7].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[5].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:921
		{
			privs := make([]string, len(yyDollar[2].colIdents))
			for i, p := range yyDollar[2].colIdents {
				privs[i] = p.String()
			}
			grantees := make([]string, len(yyDollar[6].colIdents))
			for i, g := range yyDollar[6].colIdents {
				grantees[i] = g.String()
			}
			yyVAL.statement = &DDL{
				Action: RevokePrivilege,
				Table:  yyDollar[4].tableName,
				Grant: &Grant{
					IsGrant:    false,
					Privileges: privs,
					Grantees:   grantees,
				},
			}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:942
		{
			yyVAL.statement = &DDL{
				Action: CreateSchema,
				Schema: &Schema{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:951
		{
			yyVAL.statement = &DDL{
				Action:      CreateSchema,
				IfNotExists: true,
				Schema: &Schema{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:962
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:971
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: yyDollar[6].colIdent.String(),
				},
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:981
		{
			yyVAL.statement = &DDL{
				Action: CreateExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:990
		{
			yyVAL.statement = &DDL{
				Action:      CreateExtension,
				IfNotExists: true,
				Extension: &Extension{
					Name: string(yyDollar[6].bytes),
				},
			}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 47:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1016
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 48:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:1030
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 49:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1050
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 50:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.statement = &DDL{
				Action:    AddExclusion,
				Table:     yyDollar[4].tableName,
				Exclusion: yyDollar[6].exclusionDefinition,
			}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1094
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1103
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1118
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1126
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 58:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1133
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1139
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1143
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1149
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1153
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1160
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1172
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1184
		{
			yyVAL.str = InsertStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.str = ReplaceStr
		}
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1194
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1200
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1204
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1208
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1213
		{
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1214
		{
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1218
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1222
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1227
		{
			yyVAL.partitions = nil
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1231
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1249
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1255
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1259
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.statement = &Declare{
				Type: declareHandler,
				Handler: &HandlerDefinition{
					Action:     yyDollar[2].str,
					Conditions: yyDollar[5].handlerConditions,
					Statement:  yyDollar[6].statement,
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1283
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1287
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[3].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1298
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1318
		{
			yyVAL.handlerConditions = []HandlerCondition{yyDollar[1].handlerCondition}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1322
		{
			yyVAL.handlerConditions = append(yyVAL.handlerConditions, yyDollar[3].handlerCondition)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionMysqlErrorCode, Value: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1332
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[2].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1336
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlstate, Value: string(yyDollar[3].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1340
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlwarning}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1344
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionNotFound}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1348
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionSqlexception}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1352
		{
			yyVAL.handlerCondition = HandlerCondition{Type: handlerConditionName, Value: string(yyDollar[1].colIdent.String())}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1358
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1362
		{
			yyVAL.statement = &BeginEnd{
				Statements:        []Statement{},
				SuppressSemicolon: false,
			}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1369
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.statement = &BeginEnd{
				Statements:        yyDollar[2].blockStatement,
				SuppressSemicolon: false,
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1385
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1392
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1399
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1406
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1414
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdents,
			}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1424
		{
			yyVAL.str = ""
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1436
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1440
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1446
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1453
		{
			yyVAL.statement = &While{
				Condition: yyDollar[2].expr,
				Statements: []Statement{
					&BeginEnd{
						Statements:        yyDollar[4].blockStatement,
						SuppressSemicolon: true,
					},
				},
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1467
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1471
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1475
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1482
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 120:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:1490
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[7].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1500
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1504
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1511
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: []Statement{yyDollar[5].statement},
				Keyword:        "Mssql",
			}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1521
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[3].blockStatement,
				ElseStatements: yyDollar[5].blockStatement,
				Keyword:        "Mssql",
			}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1532
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, Keyword: "Mssql"}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1537
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: []Statement{yyDollar[3].statement}, ElseStatements: []Statement{yyDollar[5].statement}, Keyword: "Mssql"}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1542
		{
			yyVAL.statement = &If{Condition: yyDollar[2].expr, IfStatements: yyDollar[3].blockStatement, Keyword: "Mssql"}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1549
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1553
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1568
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1588
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1592
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1606
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1610
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.str = SessionStr
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.str = GlobalStr
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1693
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1697
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1701
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1705
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1711
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1730
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1734
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1740
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1749
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements: yyDollar[2].blockStatement,
				},
			}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1758
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.blockStatement = []Statement{
				&BeginEnd{
					Statements:        yyDollar[2].blockStatement,
					SuppressSemicolon: true,
				},
			}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement,
				&BeginEnd{
					Statements:        yyDollar[3].blockStatement,
					SuppressSemicolon: true,
				},
			)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1787
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1800
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1810
		{
			// EXEC sp_name param1, param2
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Name: yyDollar[2].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1815
		{
			// EXEC ('SELECT * FROM ...')
			yyVAL.statement = &Exec{Action: yyDollar[1].str, Exprs: yyDollar[3].exprs}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1821
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1822
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1825
		{
			yyVAL.exprs = nil
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1826
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.statement = &Return{Expr: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1835
		{
			yyVAL.empty = struct{}{}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1837
		{
			yyVAL.empty = struct{}{}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1840
		{
			yyVAL.bytes = nil
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1844
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1853
		{
			yyVAL.bytes = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1857
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1861
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1865
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1869
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1878
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1882
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1887
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1891
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1896
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1900
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1905
		{
			yyVAL.bytes = nil
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1909
		{
			yyVAL.bytes = nil
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1915
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1924
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1934
		{
			yyVAL.statement = &DDL{
				Action: DropIndex,
				Table:  yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[3].colIdent,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1944
		{
			yyVAL.statement = &DDL{
				Action:   DropIndex,
				IfExists: true,
				Table:    yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name: yyDollar[5].colIdent,
				},
			}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1956
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: yyDollar[3].colIdent.String(),
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: yyDollar[5].colIdent.String(),
				},
			}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1975
		{
			yyVAL.statement = &DDL{
				Action: DropExtension,
				Extension: &Extension{
					Name: string(yyDollar[3].bytes),
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1984
		{
			yyVAL.statement = &DDL{
				Action:   DropExtension,
				IfExists: true,
				Extension: &Extension{
					Name: string(yyDollar[5].bytes),
				},
			}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1996
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2003
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2009
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2013
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2018
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2022
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2026
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2030
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2034
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2038
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2042
		{
			yyVAL.TableSpec.addExclusion(yyDollar[3].exclusionDefinition)
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2048
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      NewColIdent(""), // Default index type
				Exclusions:     yyDollar[5].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[7].expr),
			}
		}
	case 279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2057
		{
			yyVAL.exclusionDefinition = &ExclusionDefinition{
				ConstraintName: yyDollar[2].colIdent,
				IndexType:      yyDollar[5].colIdent, // GIST, btree, etc.
				Exclusions:     yyDollar[7].exclusionPairs,
				Where:          NewWhere(WhereStr, yyDollar[9].expr),
			}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2068
		{
			yyVAL.exclusionPairs = []ExclusionPair{yyDollar[1].exclusionPair}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2072
		{
			yyVAL.exclusionPairs = append(yyDollar[1].exclusionPairs, yyDollar[3].exclusionPair)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2078
		{
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "=",
			}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2085
		{
			// AND token represents && in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "&&",
			}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2093
		{
			// OR token represents || in the lexer
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   "||",
			}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2101
		{
			// Handle all other operators and GIST-specific operators
			yyVAL.exclusionPair = ExclusionPair{
				Expression: yyDollar[1].expr,
				Operator:   string(yyDollar[3].colIdent.val),
			}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2111
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2115
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2120
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2125
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2131
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2142
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + "." + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2152
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2165
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2170
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2175
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2180
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2186
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2191
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2196
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2201
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2206
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2211
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2216
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2221
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2226
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 311:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2235
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2245
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2250
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2255
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2262
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 316:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2269
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2277
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2282
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 319:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2287
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 320:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2292
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2298
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2304
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2311
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2318
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2330
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2334
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2338
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2342
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2352
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2360
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2364
		{
			yyVAL.optVal = NewIntVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2368
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2372
		{
			yyVAL.optVal = NewFloatVal(append([]byte("-"), yyDollar[2].bytes...))
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2376
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2380
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2384
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2388
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2392
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2398
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2404
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2410
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2416
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2420
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2425
		{
			yyVAL.sequence = &Sequence{}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2429
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2434
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2439
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2444
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2449
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2454
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2459
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2464
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2469
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2474
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2479
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2484
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2489
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2496
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2500
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2504
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2508
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2512
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2516
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2521
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2525
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2530
		{
			yyVAL.bytes = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), DisplayWidth: yyDollar[2].optVal}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2594
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2598
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2615
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2619
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2625
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2854
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2859
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2864
		{
			yyVAL.optVal = nil
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2868
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.optVal = nil
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2877
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2881
		{
			if !strings.EqualFold(string(yyDollar[2].bytes), "max") {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2890
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2903
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2907
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2912
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2934
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2938
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2942
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.str = ""
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2955
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2966
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2970
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2974
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2980
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2984
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2994
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3000
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3004
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3009
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3013
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3017
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3021
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3025
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3029
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3033
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3037
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3041
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3045
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3049
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3053
		{
			id := strings.Trim(strings.ToLower(string(yyDollar[1].bytes)), "`")
			if id != "distance" && id != "m" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[1].bytes)))
			}
			yyVAL.indexOption = &IndexOption{Name: id, Value: yyDollar[3].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3064
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3068
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3078
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3084
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3088
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3094
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3098
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3104
		{
			yyVAL.indexPartition = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3108
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3112
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(""), Vector: true}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent(string(yyDollar[3].bytes)), Vector: true}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3146
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3150
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3158
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3168
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3174
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3185
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3189
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3195
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3200
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3204
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3208
		{
			yyVAL.indexColumn = IndexColumn{Expression: yyDollar[2].expr, Direction: yyDollar[4].str}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3218
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3223
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3230
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3237
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3244
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 538:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:3253
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 539:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3275
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3279
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3283
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3287
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 544:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:3293
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3303
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 546:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3314
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:              &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:           yyDollar[6].indexColumns,
				Options:           yyDollar[8].indexOptions,
				Partition:         yyDollar[9].indexPartition,
				ConstraintOptions: &ConstraintOptions{}, // Mark as constraint
			}
		}
	case 547:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3325
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 548:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3345
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3354
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3358
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3362
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3394
		{
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3395
		{
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3399
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3403
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3408
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3415
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3419
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3430
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3436
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3440
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3445
		{
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3446
		{
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3450
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3454
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3458
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3464
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3477
		{
			setAllowComments(yylex, true)
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3481
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3487
		{
			yyVAL.bytes2 = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3491
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3497
		{
			yyVAL.str = UnionStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3501
		{
			yyVAL.str = UnionAllStr
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3505
		{
			yyVAL.str = UnionDistinctStr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.str = ""
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.str = SQLCacheStr
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3523
		{
			yyVAL.str = ""
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3527
		{
			yyVAL.str = DistinctStr
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3532
		{
			yyVAL.str = ""
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3536
		{
			yyVAL.str = StraightJoinHint
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3541
		{
			yyVAL.selectExprs = nil
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3545
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3551
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3555
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3561
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3565
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3569
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3573
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3578
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3582
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3586
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3593
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3598
		{
			yyVAL.overExpr = nil
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3602
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3606
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3610
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.tableExprs = TableExprs{}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3623
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3629
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3643
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3656
		{
			yyVAL.strs = []string{}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3660
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3666
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3670
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3692
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3696
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3710
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 633:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3714
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3720
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3725
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3729
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3752
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3756
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3760
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3764
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3770
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3772
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3776
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3778
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3782
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3784
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3789
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3792
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3796
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3800
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3806
		{
			yyVAL.str = JoinStr
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3810
		{
			yyVAL.str = JoinStr
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3814
		{
			yyVAL.str = JoinStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3820
		{
			yyVAL.str = StraightJoinStr
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3826
		{
			yyVAL.str = LeftJoinStr
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3830
		{
			yyVAL.str = LeftJoinStr
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3834
		{
			yyVAL.str = RightJoinStr
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3838
		{
			yyVAL.str = RightJoinStr
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3844
		{
			yyVAL.str = NaturalJoinStr
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3848
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3858
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3868
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3872
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3877
		{
			yyVAL.indexHints = nil
		}
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3889
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3894
		{
			yyVAL.expr = nil
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3903
		{
			yyVAL.columns = nil
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3907
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3913
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3917
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3921
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3929
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3933
		{
			yyVAL.expr = &SuffixExpr{Expr: yyDollar[1].expr, Suffix: string(yyDollar[2].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3937
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3941
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3947
		{
			yyVAL.str = ""
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3951
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3967
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3971
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3975
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3979
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3991
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4007
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4011
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4015
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4020
		{
			yyVAL.expr = &UpdateFuncExpr{Name: yyDollar[3].colName}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4024
		{
			yyVAL.expr = &UpdateFuncExpr{Name: nil}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4034
		{
			yyVAL.str = IsNullStr
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4038
		{
			yyVAL.str = IsNotNullStr
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4042
		{
			yyVAL.str = IsTrueStr
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.str = IsNotTrueStr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.str = IsFalseStr
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.str = IsNotFalseStr
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4060
		{
			yyVAL.str = EqualStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4064
		{
			yyVAL.str = LessThanStr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4068
		{
			yyVAL.str = GreaterThanStr
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4072
		{
			yyVAL.str = LessEqualStr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4076
		{
			yyVAL.str = GreaterEqualStr
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4080
		{
			yyVAL.str = NotEqualStr
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.str = PosixRegexStr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4092
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4096
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4100
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4105
		{
			yyVAL.expr = nil
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4109
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4115
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4119
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4123
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4135
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4157
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4165
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4225
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4229
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4233
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4241
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4249
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4263
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4267
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4271
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4279
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4287
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4295
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4299
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4309
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 767:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4313
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4317
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 771:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4343
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 774:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4347
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 775:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4352
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr}
		}
	case 776:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4356
		{
			yyVAL.expr = &ConvertExpr{Action: Type1stStr, Type: yyDollar[3].convertType, Expr: yyDollar[5].expr, Style: yyDollar[7].expr}
		}
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4360
		{
			yyVAL.expr = &ConvertExpr{Action: CastStr, Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 778:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 779:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4368
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 780:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4372
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 781:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4376
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 782:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4380
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4384
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 784:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4388
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 785:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4392
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 786:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:4396
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 787:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:4400
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 788:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4404
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4408
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4412
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4417
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4440
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4471
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4480
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4512
		{
			yyVAL.str = ""
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4516
		{
			yyVAL.str = BooleanModeStr
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4520
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 814:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:4524
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4528
		{
			yyVAL.str = QueryExpansionStr
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4534
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4564
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4576
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4580
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.convertType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4594
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4598
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4602
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4606
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4610
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4614
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4618
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4622
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4626
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4650
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4656
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4660
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4676
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 852:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 853:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 855:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: NewIntVal(yyDollar[4].bytes)}
		}
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4704
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 857:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4708
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4716
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4737
		{
			yyVAL.expr = nil
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4741
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4746
		{
			yyVAL.str = string("")
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4750
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4756
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4760
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4766
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4771
		{
			yyVAL.empty = struct{}{}
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4773
		{
			yyVAL.empty = struct{}{}
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4776
		{
			yyVAL.expr = nil
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4780
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4786
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4790
		{
			yyVAL.colName = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4794
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4798
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4804
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4810
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4814
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4819
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4824
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4828
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4832
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4836
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4840
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4844
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4848
		{
			yyVAL.expr = &NullVal{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4854
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4858
		{
			yyVAL.bytes = append([]byte("-"), yyDollar[2].bytes...)
		}
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4863
		{
			yyVAL.exprs = nil
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4867
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4872
		{
			yyVAL.expr = nil
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4876
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4882
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4886
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4892
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4897
		{
			yyVAL.orderBy = nil
		}
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4901
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4907
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4911
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4917
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4922
		{
			yyVAL.str = AscScr
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4926
		{
			yyVAL.str = AscScr
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4930
		{
			yyVAL.str = DescScr
		}
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4935
		{
			yyVAL.limit = nil
		}
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4939
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4943
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4947
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4952
		{
			yyVAL.str = ""
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4956
		{
			yyVAL.str = ForUpdateStr
		}
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4960
		{
			yyVAL.str = ShareModeStr
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4973
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4977
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4981
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 917:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4986
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4990
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 919:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4994
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5001
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5005
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].colIdent)
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5011
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5015
		{
			yyVAL.colIdent = yyDollar[3].colIdent
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5019
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5023
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5028
		{
			yyVAL.updateExprs = nil
		}
	case 927:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5032
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5038
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5042
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5048
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5052
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5058
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5064
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5074
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5078
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5084
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5090
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5094
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5100
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5104
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5108
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:5113
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5117
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5123
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5129
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5136
		{
			yyVAL.bytes = []byte("charset")
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5143
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5147
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5151
		{
			yyVAL.expr = &Default{}
		}
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5156
		{
			yyVAL.empty = struct{}{}
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5158
		{
			yyVAL.empty = struct{}{}
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5161
		{
			yyVAL.str = ""
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5163
		{
			yyVAL.str = IgnoreStr
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5167
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5174
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5178
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5182
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5186
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5192
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5196
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5201
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5208
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5214
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5218
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5222
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5228
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5232
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5236
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:5242
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5246
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:5253
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5260
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5264
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:5271
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5275
		{
			yyVAL.arrayElement = NewIntVal(yyDollar[1].bytes)
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5279
		{
			yyVAL.arrayElement = NewFloatVal(yyDollar[1].bytes)
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5285
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:5289
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5466
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:5475
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
